[/ Generated by doxygen_xml2qbk, don't change, will be overwritten automatically]
[/ Generated from xml/group__rtree__functions.xml]
[section:group__rtree__functions Functions related to the rtree (boost::geometry::index::)]
[table
[[Function][Description]]
[[[link geometry_index.r_tree.reference.group__rtree__functions.function0 `insert(rtree<...> &, Value const &)`]][Insert a value to the index. ]]
[[[link geometry_index.r_tree.reference.group__rtree__functions.function1 `insert(rtree<...> &, Iterator, Iterator)`]][Insert a range of values to the index. ]]
[[[link geometry_index.r_tree.reference.group__rtree__functions.function2 `insert(rtree<...> &, Range const &)`]][Insert a range of values to the index. ]]
[[[link geometry_index.r_tree.reference.group__rtree__functions.function3 `remove(rtree<...> &, Value const &)`]][Remove a value from the container. ]]
[[[link geometry_index.r_tree.reference.group__rtree__functions.function4 `remove(rtree<...> &, Iterator, Iterator)`]][Remove a range of values from the container. ]]
[[[link geometry_index.r_tree.reference.group__rtree__functions.function5 `remove(rtree<...> &, Range const &)`]][Remove a range of values from the container. ]]
[[[link geometry_index.r_tree.reference.group__rtree__functions.function6 `spatial_query(rtree<...> const &, Predicates const &, OutIter)`]][Find values meeting spatial predicates. ]]
[[[link geometry_index.r_tree.reference.group__rtree__functions.function7 `nearest_query(rtree<...> const &, DistancesPredicates const &, Value &)`]][Find the value meeting distances predicates. ]]
[[[link geometry_index.r_tree.reference.group__rtree__functions.function8 `nearest_query(rtree<...> const &, DistancesPredicates const &, Predicates const &, Value &)`]][Find the value meeting distances and spatial predicates. ]]
[[[link geometry_index.r_tree.reference.group__rtree__functions.function9 `nearest_query(rtree<...> const &, DistancesPredicates const &, size_t, OutIter)`]][Find k values meeting distances predicates. ]]
[[[link geometry_index.r_tree.reference.group__rtree__functions.function10 `nearest_query(rtree<...> const &, DistancesPredicates const &, size_t, Predicates const &, OutIter)`]][Find k values meeting distances and spatial predicates. ]]
[[[link geometry_index.r_tree.reference.group__rtree__functions.function11 `clear(rtree<...> &)`]][Remove all values from the index. ]]
[[[link geometry_index.r_tree.reference.group__rtree__functions.function12 `size(rtree<...> const &)`]][Get the number of values stored in the index. ]]
[[[link geometry_index.r_tree.reference.group__rtree__functions.function13 `empty(rtree<...> const &)`]][Query if there are no values stored in the index. ]]
[[[link geometry_index.r_tree.reference.group__rtree__functions.function14 `box(rtree<...> const &)`]][Get the box containing all stored values or an invalid box if the index has no values. ]]
]

[section:function0 insert(rtree<...> &, Value const &)]
Insert a value to the index. 

[heading Synopsis]
``template<typename Value,
         typename Options,
         typename Translator,
         typename Allocator>
void boost::geometry::index::insert(rtree< Value, Options, Translator, Allocator > & tree, Value const & v)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `rtree< Value, Options, Translator, Allocator > &` ][ `tree` ][The spatial index. ]]
[[ `Value const &` ][ `v` ][The value which will be stored in the index. ]]
]
[endsect]

[section:function1 insert(rtree<...> &, Iterator, Iterator)]
Insert a range of values to the index. 

[heading Synopsis]
``template<typename Value,
         typename Options,
         typename Translator,
         typename Allocator,
         typename Iterator>
void boost::geometry::index::insert(rtree< Value, Options, Translator, Allocator > & tree,
                                    Iterator first,
                                    Iterator last)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `rtree< Value, Options, Translator, Allocator > &` ][ `tree` ][The spatial index. ]]
[[ `Iterator` ][ `first` ][The beginning of the range of values. ]]
[[ `Iterator` ][ `last` ][The end of the range of values. ]]
]
[endsect]

[section:function2 insert(rtree<...> &, Range const &)]
Insert a range of values to the index. 

[heading Synopsis]
``template<typename Value,
         typename Options,
         typename Translator,
         typename Allocator,
         typename Range>
void boost::geometry::index::insert(rtree< Value, Options, Translator, Allocator > & tree, Range const & rng)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `rtree< Value, Options, Translator, Allocator > &` ][ `tree` ][The spatial index. ]]
[[ `Range const &` ][ `rng` ][The range of values. ]]
]
[endsect]

[section:function3 remove(rtree<...> &, Value const &)]
Remove a value from the container. 

[heading Description]
Remove a value from the container. In contrast to the STL set/map erase() method this function removes only one value from the container.[heading Synopsis]
``template<typename Value,
         typename Options,
         typename Translator,
         typename Allocator>
rtree<Value, Options, Translator, Allocator>::size_type boost::geometry::index::remove(rtree< Value, Options, Translator, Allocator > & tree, Value const & v)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `rtree< Value, Options, Translator, Allocator > &` ][ `tree` ][The spatial index. ]]
[[ `Value const &` ][ `v` ][The value which will be removed from the index.]]
]
[heading Returns]
1 if value was removed, 0 otherwise. 
[endsect]

[section:function4 remove(rtree<...> &, Iterator, Iterator)]
Remove a range of values from the container. 

[heading Description]
Remove a range of values from the container. In contrast to the STL set/map erase() method it doesn't take iterators pointing to values stored in this container. It removes values equal to these passed as a range. Furthermore this function removes only one value for each one passed in the range, not all equal values.[heading Synopsis]
``template<typename Value,
         typename Options,
         typename Translator,
         typename Allocator,
         typename Iterator>
rtree<Value, Options, Translator, Allocator>::size_type boost::geometry::index::remove(rtree< Value, Options, Translator, Allocator > & tree,
                                                                                       Iterator first,
                                                                                       Iterator last)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `rtree< Value, Options, Translator, Allocator > &` ][ `tree` ][The spatial index. ]]
[[ `Iterator` ][ `first` ][The beginning of the range of values. ]]
[[ `Iterator` ][ `last` ][The end of the range of values.]]
]
[heading Returns]
The number of removed values. 
[endsect]

[section:function5 remove(rtree<...> &, Range const &)]
Remove a range of values from the container. 

[heading Description]
Remove a range of values from the container. In contrast to the STL set/map erase() method it removes values equal to these passed as a range. Furthermore this method removes only one value for each one passed in the range, not all equal values.[heading Synopsis]
``template<typename Value,
         typename Options,
         typename Translator,
         typename Allocator,
         typename Range>
rtree<Value, Options, Translator, Allocator>::size_type boost::geometry::index::remove(rtree< Value, Options, Translator, Allocator > & tree, Range const & rng)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `rtree< Value, Options, Translator, Allocator > &` ][ `tree` ][The spatial index. ]]
[[ `Range const &` ][ `rng` ][The range of values.]]
]
[heading Returns]
The number of removed values. 
[endsect]

[section:function6 spatial_query(rtree<...> const &, Predicates const &, OutIter)]
Find values meeting spatial predicates. 

[heading Synopsis]
``template<typename Value,
         typename Options,
         typename Translator,
         typename Allocator,
         typename Predicates,
         typename OutIter>
size_t boost::geometry::index::spatial_query(rtree< Value, Options, Translator, Allocator > const & tree,
                                             Predicates const & pred,
                                             OutIter out_it)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `rtree< Value, Options, Translator, Allocator > const &` ][ `tree` ][The spatial index. ]]
[[ `Predicates const &` ][ `pred` ][The spatial predicates. ]]
[[ `OutIter` ][ `out_it` ][The output iterator of the result range.]]
]
[heading Returns]
The number of found values. 
[endsect]

[section:function7 nearest_query(rtree<...> const &, DistancesPredicates const &, Value &)]
Find the value meeting distances predicates. 

[heading Synopsis]
``template<typename Value,
         typename Options,
         typename Translator,
         typename Allocator,
         typename DistancesPredicates>
size_t boost::geometry::index::nearest_query(rtree< Value, Options, Translator, Allocator > const & tree,
                                             DistancesPredicates const & dpred,
                                             Value & v)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `rtree< Value, Options, Translator, Allocator > const &` ][ `tree` ][The spatial index. ]]
[[ `DistancesPredicates const &` ][ `dpred` ][The distances predicates. ]]
[[ `Value &` ][ `v` ][The result.]]
]
[heading Returns]
The number of found values. 
[endsect]

[section:function8 nearest_query(rtree<...> const &, DistancesPredicates const &, Predicates const &, Value &)]
Find the value meeting distances and spatial predicates. 

[heading Synopsis]
``template<typename Value,
         typename Options,
         typename Translator,
         typename Allocator,
         typename DistancesPredicates,
         typename Predicates>
size_t boost::geometry::index::nearest_query(rtree< Value, Options, Translator, Allocator > const & tree,
                                             DistancesPredicates const & dpred,
                                             Predicates const & pred,
                                             Value & v)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `rtree< Value, Options, Translator, Allocator > const &` ][ `tree` ][The spatial index. ]]
[[ `DistancesPredicates const &` ][ `dpred` ][The distances predicates. ]]
[[ `Predicates const &` ][ `pred` ][The spatial predicates. ]]
[[ `Value &` ][ `v` ][The result.]]
]
[heading Returns]
The number of found values. 
[endsect]

[section:function9 nearest_query(rtree<...> const &, DistancesPredicates const &, size_t, OutIter)]
Find k values meeting distances predicates. 

[heading Synopsis]
``template<typename Value,
         typename Options,
         typename Translator,
         typename Allocator,
         typename DistancesPredicates,
         typename OutIter>
size_t boost::geometry::index::nearest_query(rtree< Value, Options, Translator, Allocator > const & tree,
                                             DistancesPredicates const & dpred,
                                             size_t k,
                                             OutIter out_it)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `rtree< Value, Options, Translator, Allocator > const &` ][ `tree` ][The spatial index. ]]
[[ `DistancesPredicates const &` ][ `dpred` ][The distances predicates. ]]
[[ `size_t` ][ `k` ][The max number of values. ]]
[[ `OutIter` ][ `out_it` ][The output iterator of the result range.]]
]
[heading Returns]
The number of found values. 
[endsect]

[section:function10 nearest_query(rtree<...> const &, DistancesPredicates const &, size_t, Predicates const &, OutIter)]
Find k values meeting distances and spatial predicates. 

[heading Synopsis]
``template<typename Value,
         typename Options,
         typename Translator,
         typename Allocator,
         typename DistancesPredicates,
         typename Predicates,
         typename OutIter>
size_t boost::geometry::index::nearest_query(rtree< Value, Options, Translator, Allocator > const & tree,
                                             DistancesPredicates const & dpred,
                                             size_t k,
                                             Predicates const & pred,
                                             OutIter out_it)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `rtree< Value, Options, Translator, Allocator > const &` ][ `tree` ][The spatial index. ]]
[[ `DistancesPredicates const &` ][ `dpred` ][The distances predicates. ]]
[[ `size_t` ][ `k` ][The max number of values. ]]
[[ `Predicates const &` ][ `pred` ][The spatial predicates. ]]
[[ `OutIter` ][ `out_it` ][The output iterator of the result range.]]
]
[heading Returns]
The number of found values. 
[endsect]

[section:function11 clear(rtree<...> &)]
Remove all values from the index. 

[heading Synopsis]
``template<typename Value,
         typename Options,
         typename Translator,
         typename Allocator>
void boost::geometry::index::clear(rtree< Value, Options, Translator, Allocator > & tree)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `rtree< Value, Options, Translator, Allocator > &` ][ `tree` ][The spatial index. ]]
]
[endsect]

[section:function12 size(rtree<...> const &)]
Get the number of values stored in the index. 

[heading Synopsis]
``template<typename Value,
         typename Options,
         typename Translator,
         typename Allocator>
size_t boost::geometry::index::size(rtree< Value, Options, Translator, Allocator > const & tree)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `rtree< Value, Options, Translator, Allocator > const &` ][ `tree` ][The spatial index.]]
]
[heading Returns]
The number of values stored in the index. 
[endsect]

[section:function13 empty(rtree<...> const &)]
Query if there are no values stored in the index. 

[heading Synopsis]
``template<typename Value,
         typename Options,
         typename Translator,
         typename Allocator>
bool boost::geometry::index::empty(rtree< Value, Options, Translator, Allocator > const & tree)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `rtree< Value, Options, Translator, Allocator > const &` ][ `tree` ][The spatial index.]]
]
[heading Returns]
true if there are no values in the index. 
[endsect]

[section:function14 box(rtree<...> const &)]
Get the box containing all stored values or an invalid box if the index has no values. 

[heading Synopsis]
``template<typename Value,
         typename Options,
         typename Translator,
         typename Allocator>
rtree<Value, Options, Translator, Allocator>::box_type boost::geometry::index::box(rtree< Value, Options, Translator, Allocator > const & tree)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `rtree< Value, Options, Translator, Allocator > const &` ][ `tree` ][The spatial index.]]
]
[heading Returns]
The box containing all stored values or an invalid box. 
[endsect]

[endsect]

