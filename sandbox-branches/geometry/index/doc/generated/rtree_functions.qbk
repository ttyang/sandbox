[/ Generated by doxygen_xml2qbk, don't change, will be overwritten automatically]
[/ Generated from xml/group__rtree__functions.xml]
[section:group__rtree__functions Functions related to the rtree]
[heading Functions]
[table
[[Function][Description]]
[[[link group__rtree__functions_1gac0ac9ed0e01f7494a5a3059e75d3c5cc `insert(rtree<...> &, Value const &)`]][Insert a value to the index. ]]
[[[link group__rtree__functions_1gaf8f4fa09c12b96ace3bbb38823a9191b `insert(rtree<...> &, Iterator, Iterator)`]][Insert a range of values to the index. ]]
[[[link group__rtree__functions_1ga97ec330c1c021a1ac2d896a488c2eb9c `insert(rtree<...> &, Range const &)`]][Insert a range of values to the index. ]]
[[[link group__rtree__functions_1gad40492a5b99c3eebbd51901574762527 `remove(rtree<...> &, Value const &)`]][Remove a value from the container. ]]
[[[link group__rtree__functions_1ga0219361de8b15c539af3f9bd027938ce `remove(rtree<...> &, Iterator, Iterator)`]][Remove a range of values from the container. ]]
[[[link group__rtree__functions_1ga5885d6c90a91f238f72ab9b5ef24daf9 `remove(rtree<...> &, Range const &)`]][Remove a range of values from the container. ]]
[[[link group__rtree__functions_1ga86e0808522ef6682b72b310a3891b276 `query(rtree<...> const &, Predicates const &, OutIter)`]][Finds values meeting passed predicates e.g. nearest to some Point and/or intersecting some Box. ]]
[[[link group__rtree__functions_1ga35b54dcaed4e4d5fb38e9ef4b78ee3c7 `query(rtree<...> const &, Predicates const &, typename rtree<...>::value_type &)`]][Finds value meeting passed predicates e.g. nearest to some Point and intersecting some Box. ]]
[[[link group__rtree__functions_1gadcec162d2391c2c9cc4215a5578d1721 `spatial_query(rtree<...> const &, Predicates const &, OutIter)`]][Find values meeting spatial predicates. ]]
[[[link group__rtree__functions_1gacabbd521b88b67a700e1246e5889d343 `nearest_query(rtree<...> const &, DistancesPredicates const &, Value &)`]][Find the value meeting distances predicates. ]]
[[[link group__rtree__functions_1gaf963f417d4ab54a2782928020dd8c3ad `nearest_query(rtree<...> const &, DistancesPredicates const &, Predicates const &, Value &)`]][Find the value meeting distances and spatial predicates. ]]
[[[link group__rtree__functions_1ga74550ecb22e4ac69a445c1a6b0be9a1b `nearest_query(rtree<...> const &, DistancesPredicates const &, typename rtree<...>::size_type, OutIter)`]][Find k values meeting distances predicates. ]]
[[[link group__rtree__functions_1ga8057af533a3e28e09337bab2c7a146aa `nearest_query(rtree<...> const &, DistancesPredicates const &, typename rtree<...>::size_type, Predicates const &, OutIter)`]][Find k values meeting distances and spatial predicates. ]]
[[[link group__rtree__functions_1ga0c65d7b29b1edf72f1d236ccf211f63c `clear(rtree<...> &)`]][Remove all values from the index. ]]
[[[link group__rtree__functions_1gaec0b88a9d8b408753e3069134f1598c7 `size(rtree<...> const &)`]][Get the number of values stored in the index. ]]
[[[link group__rtree__functions_1ga459e3d404fec7cbd66794714cbdd129e `empty(rtree<...> const &)`]][Query if there are no values stored in the index. ]]
[[[link group__rtree__functions_1gae10fbc3d536235b89aa3cb3641768bca `bounds(rtree<...> const &)`]][Get the box containing all stored values or an invalid box if the index has no values. ]]
]

[#group__rtree__functions_1gac0ac9ed0e01f7494a5a3059e75d3c5cc]
[section insert(rtree<...> &, Value const &)]
Insert a value to the index. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1af6d5bd81e46cb4ff89277c753133664c rtree::insert(value_type const&)]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``>`
`void boost::geometry::index::insert``(``rtree< Value, Options, Translator, Allocator > &` `tree``,` `Value const &` `v``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > &`][ `tree` ][The spatial index. ]]
[[`Value const &`][ `v` ][The value which will be stored in the index. ]]
]
[endsect]

[#group__rtree__functions_1gaf8f4fa09c12b96ace3bbb38823a9191b]
[section insert(rtree<...> &, Iterator, Iterator)]
Insert a range of values to the index. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a5263a3faac7b4f0090d4ad1d44cc540d rtree::insert(Iterator, Iterator)]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename Iterator``>`
`void boost::geometry::index::insert``(``rtree< Value, Options, Translator, Allocator > &` `tree``,`
                                    `Iterator` `first``,`
                                    `Iterator` `last``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > &`][ `tree` ][The spatial index. ]]
[[`Iterator`][ `first` ][The beginning of the range of values. ]]
[[`Iterator`][ `last` ][The end of the range of values. ]]
]
[endsect]

[#group__rtree__functions_1ga97ec330c1c021a1ac2d896a488c2eb9c]
[section insert(rtree<...> &, Range const &)]
Insert a range of values to the index. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1abb624abd9268b41e815d40342b2634c2 rtree::insert(Range const&)]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename Range``>`
`void boost::geometry::index::insert``(``rtree< Value, Options, Translator, Allocator > &` `tree``,` `Range const &` `rng``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > &`][ `tree` ][The spatial index. ]]
[[`Range const &`][ `rng` ][The range of values. ]]
]
[endsect]

[#group__rtree__functions_1gad40492a5b99c3eebbd51901574762527]
[section remove(rtree<...> &, Value const &)]
Remove a value from the container. 

[heading Description]
Remove a value from the container. In contrast to the [^`std::set`] or [^`std::map erase()`] method this function removes only one value from the container.

It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1af6ca6909354a997f89411ef40ea5688a rtree::remove(value_type const&)]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``>`
`rtree<Value, Options, Translator, Allocator>::size_type boost::geometry::index::remove``(``rtree< Value, Options, Translator, Allocator > &` `tree``,` `Value const &` `v``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > &`][ `tree` ][The spatial index. ]]
[[`Value const &`][ `v` ][The value which will be removed from the index.]]
]
[heading Returns]
1 if value was removed, 0 otherwise. 
[endsect]

[#group__rtree__functions_1ga0219361de8b15c539af3f9bd027938ce]
[section remove(rtree<...> &, Iterator, Iterator)]
Remove a range of values from the container. 

[heading Description]
Remove a range of values from the container. In contrast to the [^`std::set`] or [^`std::map erase()`] method it doesn't take iterators pointing to values stored in this container. It removes values equal to these passed as a range. Furthermore this function removes only one value for each one passed in the range, not all equal values.

It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a6e9123114697d65b16ebc49cd5371fbd rtree::remove(Iterator, Iterator)]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename Iterator``>`
`rtree<Value, Options, Translator, Allocator>::size_type boost::geometry::index::remove``(``rtree< Value, Options, Translator, Allocator > &` `tree``,`
                                                                                       `Iterator` `first``,`
                                                                                       `Iterator` `last``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > &`][ `tree` ][The spatial index. ]]
[[`Iterator`][ `first` ][The beginning of the range of values. ]]
[[`Iterator`][ `last` ][The end of the range of values.]]
]
[heading Returns]
The number of removed values. 
[endsect]

[#group__rtree__functions_1ga5885d6c90a91f238f72ab9b5ef24daf9]
[section remove(rtree<...> &, Range const &)]
Remove a range of values from the container. 

[heading Description]
Remove a range of values from the container. In contrast to the [^`std::set`] or [^`std::map erase()`] method it removes values equal to these passed as a range. Furthermore this method removes only one value for each one passed in the range, not all equal values.

It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a5a57bb93b0b2d7ea1c659e925f918e9c rtree::remove(Range const&)]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename Range``>`
`rtree<Value, Options, Translator, Allocator>::size_type boost::geometry::index::remove``(``rtree< Value, Options, Translator, Allocator > &` `tree``,` `Range const &` `rng``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > &`][ `tree` ][The spatial index. ]]
[[`Range const &`][ `rng` ][The range of values.]]
]
[heading Returns]
The number of removed values. 
[endsect]

[#group__rtree__functions_1ga86e0808522ef6682b72b310a3891b276]
[section query(rtree<...> const &, Predicates const &, OutIter)]
Finds values meeting passed predicates e.g. nearest to some Point and/or intersecting some Box. 

[heading Description]
This query function performs spatial and k-nearest neighbor searches. It allows to pass a set of predicates. Values will be returned only if all predicates are met.

[*Spatial predicates]

The simplest form of spatial predicate is a [^`Geometry`]. In this case Values intersecting the [^`Geometry`] are returned. More spatial predicates may be generated by one of the functions listed below: 

* [^[link group__predicates_1ga0a613a7f1d18ac33955bfdc2c5777c61 boost::geometry::index::covered_by()]], 
* [^[link group__predicates_1ga351bb3b82e019ff45adf789385b8007d boost::geometry::index::disjoint()]], 
* [^[link group__predicates_1ga7301c50e0272976b9f1434536383e6d0 boost::geometry::index::intersects()]] - default, 
* [^[link group__predicates_1ga5511236f56be1defcccbf11e742ccd88 boost::geometry::index::overlaps()]], 
* [^[link group__predicates_1gabf9c4e76dd8a09a4c476f2f8fa8a0e4d boost::geometry::index::within()]],


It is possible to negate spatial predicates: 

* [^`! `[link group__predicates_1ga0a613a7f1d18ac33955bfdc2c5777c61 boost::geometry::index::covered_by()]], 
* [^`! `[link group__predicates_1ga351bb3b82e019ff45adf789385b8007d boost::geometry::index::disjoint()]], 
* [^`! `[link group__predicates_1ga7301c50e0272976b9f1434536383e6d0 boost::geometry::index::intersects()]], 
* [^`! `[link group__predicates_1ga5511236f56be1defcccbf11e742ccd88 boost::geometry::index::overlaps()]], 
* [^`! `[link group__predicates_1gabf9c4e76dd8a09a4c476f2f8fa8a0e4d boost::geometry::index::within()]]

[*Value predicate]

This is a special kind of predicate which allows to pass a user-defined functor which checks if Value should be returned by the query. It's generated by: 

* [^[link group__predicates_1ga8acb81106fce01da72f310184ab4d9ce boost::geometry::index::value()]].

[*Nearest predicate]

If the nearest predicate is passed a k-nearest neighbor search will be performed. It has two variants. Passing the first one will result in returning k number of values, the second one will result in returning only one, closest value. In both cases values will be returned to the output iterator. Only one nearest predicate may be passed to the query. It may be generated by: 

* [^[link group__predicates_1ga162233fd11b980853f8b8335cb70d57b boost::geometry::index::nearest()]].

[*Connecting predicates]

A set of predicates may be generated by: 

* [^`std::make_pair()`]
* [^`boost::make_tuple()`]
* [^`operator&&()`]

[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename Predicates``,`
         `typename OutIter``>`
`rtree<Value, Options, Translator, Allocator>::size_type boost::geometry::index::query``(``rtree< Value, Options, Translator, Allocator > const &` `tree``,`
                                                                                      `Predicates const &` `predicates``,`
                                                                                      `OutIter` `out_it``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index. ]]
[[`Predicates const &`][ `predicates` ][Predicates. ]]
[[`OutIter`][ `out_it` ][The output iterator, e.g. generated by std::back_inserter().]]
]
[heading Returns]
The number of values found.
[heading Example]

``
bgi::query(tree, box1, std::back_inserter(result));
bgi::query(tree, std::make_pair(bgi::intersects(poly), !bgi::within(box)), std::back_inserter(result));
bgi::query(tree, bgi::intersects(poly) && !bgi::within(box), std::back_inserter(result));
bgi::query(tree, bgi::overlaps(box) && bgi::value(my_fun), std::back_inserter(result));
bgi::query(tree, bgi::nearest(pt, 5) && bgi::intersects(box), std::back_inserter(result));
``


[heading Throws]
If Value copy constructor or copy assignment throws. 

[warning Only one [^[link group__predicates_1ga162233fd11b980853f8b8335cb70d57b nearest()]] perdicate may be passed to the query.]

[endsect]

[#group__rtree__functions_1ga35b54dcaed4e4d5fb38e9ef4b78ee3c7]
[section query(rtree<...> const &, Predicates const &, typename rtree<...>::value_type &)]
Finds value meeting passed predicates e.g. nearest to some Point and intersecting some Box. 

[heading Description]
This query function performs k-nearest neighbor searches. It allows to pass a set of predicates. The value will be returned only if all predicates are met. This query requires that one of the predicates must be one-value [^[link group__predicates_1ga162233fd11b980853f8b8335cb70d57b nearest()]] predicate.

[*Spatial predicates]

The simplest form of spatial predicate is a [^`Geometry`]. In this case Values intersecting the [^`Geometry`] are returned. More spatial predicates may be generated by one of the functions listed below: 

* [^[link group__predicates_1ga0a613a7f1d18ac33955bfdc2c5777c61 boost::geometry::index::covered_by()]], 
* [^[link group__predicates_1ga351bb3b82e019ff45adf789385b8007d boost::geometry::index::disjoint()]], 
* [^[link group__predicates_1ga7301c50e0272976b9f1434536383e6d0 boost::geometry::index::intersects()]] - default, 
* [^[link group__predicates_1ga5511236f56be1defcccbf11e742ccd88 boost::geometry::index::overlaps()]], 
* [^[link group__predicates_1gabf9c4e76dd8a09a4c476f2f8fa8a0e4d boost::geometry::index::within()]],


It is possible to negate spatial predicates: 

* [^`! `[link group__predicates_1ga0a613a7f1d18ac33955bfdc2c5777c61 boost::geometry::index::covered_by()]], 
* [^`! `[link group__predicates_1ga351bb3b82e019ff45adf789385b8007d boost::geometry::index::disjoint()]], 
* [^`! `[link group__predicates_1ga7301c50e0272976b9f1434536383e6d0 boost::geometry::index::intersects()]], 
* [^`! `[link group__predicates_1ga5511236f56be1defcccbf11e742ccd88 boost::geometry::index::overlaps()]], 
* [^`! `[link group__predicates_1gabf9c4e76dd8a09a4c476f2f8fa8a0e4d boost::geometry::index::within()]]

[*Value predicate]

This is a special kind of predicate which allows to pass a user-defined functor which checks if Value should be returned by the query. It's generated by: 

* [^[link group__predicates_1ga8acb81106fce01da72f310184ab4d9ce boost::geometry::index::value()]].

[*Nearest predicate]

This query requires that one of the predicates must be one-value [^[link group__predicates_1ga162233fd11b980853f8b8335cb70d57b nearest()]] predicate. It may be generated by [^[link group__predicates_1ga162233fd11b980853f8b8335cb70d57b nearest()]] taking only one parameter - distance predicates. 

* [^[link group__predicates_1ga162233fd11b980853f8b8335cb70d57b boost::geometry::index::nearest()]].

[*Connecting predicates]

A set of predicates may be generated by: 

* [^`std::make_pair()`]
* [^`boost::make_tuple()`]
* [^`operator&&()`]

[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename Predicates``>`
`rtree<Value, Options, Translator, Allocator>::size_type boost::geometry::index::query``(``rtree< Value, Options, Translator, Allocator > const &` `tree``,`
                                                                                      `Predicates const &` `predicates``,`
                                                                                      `typename rtree< Value, Options, Translator, Allocator >::value_type &` `value``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index. ]]
[[`Predicates const &`][ `predicates` ][Predicates. ]]
[[`typename rtree< Value, Options, Translator, Allocator >::value_type &`][ `value` ][The reference to value which will hold the result of the query.]]
]
[heading Returns]
The number of values found (1 if value was found, 0 otherwise).
[heading Example]

``
bgi::query(tree, std::make_pair(bgi::nearest(pt), bgi::within(box)), value);
bgi::query(tree, bgi::nearest(pt) && bgi::intersects(poly), value);
``


[heading Throws]
If Value copy constructor or copy assignment throws. 

[warning This query requires that one of the predicates must be one-value [^[link group__predicates_1ga162233fd11b980853f8b8335cb70d57b nearest()]] predicate.]

[endsect]

[#group__rtree__functions_1gadcec162d2391c2c9cc4215a5578d1721]
[section spatial_query(rtree<...> const &, Predicates const &, OutIter)]
Find values meeting spatial predicates. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a930bf17d595a91d8ae924383a0387920 rtree::spatial_query]] with parameters [^`(Predicates const&, OutIter)`].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename Predicates``,`
         `typename OutIter``>`
`size_t boost::geometry::index::spatial_query``(``rtree< Value, Options, Translator, Allocator > const &` `tree``,`
                                             `Predicates const &` `pred``,`
                                             `OutIter` `out_it``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index. ]]
[[`Predicates const &`][ `pred` ][The spatial predicates. ]]
[[`OutIter`][ `out_it` ][The output iterator of the result range.]]
]
[heading Returns]
The number of found values. 
[endsect]

[#group__rtree__functions_1gacabbd521b88b67a700e1246e5889d343]
[section nearest_query(rtree<...> const &, DistancesPredicates const &, Value &)]
Find the value meeting distances predicates. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a788295b315bd0ddeb93b1cc050fdf909 rtree::nearest_query]] with parameters [^`(DistancesPredicates const& dpred, value_type & v)`].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename DistancesPredicates``>`
`size_t boost::geometry::index::nearest_query``(``rtree< Value, Options, Translator, Allocator > const &` `tree``,`
                                             `DistancesPredicates const &` `dpred``,`
                                             `Value &` `v``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index. ]]
[[`DistancesPredicates const &`][ `dpred` ][The distances predicates. ]]
[[`Value &`][ `v` ][The result.]]
]
[heading Returns]
The number of found values. 
[endsect]

[#group__rtree__functions_1gaf963f417d4ab54a2782928020dd8c3ad]
[section nearest_query(rtree<...> const &, DistancesPredicates const &, Predicates const &, Value &)]
Find the value meeting distances and spatial predicates. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a788295b315bd0ddeb93b1cc050fdf909 rtree::nearest_query]] with parameters [^`(DistancesPredicates const& dpred, Predicates const& pred, value_type & v)`].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename DistancesPredicates``,`
         `typename Predicates``>`
`size_t boost::geometry::index::nearest_query``(``rtree< Value, Options, Translator, Allocator > const &` `tree``,`
                                             `DistancesPredicates const &` `dpred``,`
                                             `Predicates const &` `pred``,`
                                             `Value &` `v``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index. ]]
[[`DistancesPredicates const &`][ `dpred` ][The distances predicates. ]]
[[`Predicates const &`][ `pred` ][The spatial predicates. ]]
[[`Value &`][ `v` ][The result.]]
]
[heading Returns]
The number of found values. 
[endsect]

[#group__rtree__functions_1ga74550ecb22e4ac69a445c1a6b0be9a1b]
[section nearest_query(rtree<...> const &, DistancesPredicates const &, typename rtree<...>::size_type, OutIter)]
Find k values meeting distances predicates. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a788295b315bd0ddeb93b1cc050fdf909 rtree::nearest_query]] with parameters [^`(DistancesPredicates const & dpred, size_type k, OutIter out_it)`].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename DistancesPredicates``,`
         `typename OutIter``>`
`size_t boost::geometry::index::nearest_query``(``rtree< Value, Options, Translator, Allocator > const &` `tree``,`
                                             `DistancesPredicates const &` `dpred``,`
                                             `typename rtree< Value, Options, Translator, Allocator >::size_type` `k``,`
                                             `OutIter` `out_it``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index. ]]
[[`DistancesPredicates const &`][ `dpred` ][The distances predicates. ]]
[[`typename rtree< Value, Options, Translator, Allocator >::size_type`][ `k` ][The max number of values. ]]
[[`OutIter`][ `out_it` ][The output iterator of the result range.]]
]
[heading Returns]
The number of found values. 
[endsect]

[#group__rtree__functions_1ga8057af533a3e28e09337bab2c7a146aa]
[section nearest_query(rtree<...> const &, DistancesPredicates const &, typename rtree<...>::size_type, Predicates const &, OutIter)]
Find k values meeting distances and spatial predicates. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a788295b315bd0ddeb93b1cc050fdf909 rtree::nearest_query]] with parameters [^`(DistancesPredicates const & dpred, size_type k, Predicates const & pred, OutIter out_it)`].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename DistancesPredicates``,`
         `typename Predicates``,`
         `typename OutIter``>`
`size_t boost::geometry::index::nearest_query``(``rtree< Value, Options, Translator, Allocator > const &` `tree``,`
                                             `DistancesPredicates const &` `dpred``,`
                                             `typename rtree< Value, Options, Translator, Allocator >::size_type` `k``,`
                                             `Predicates const &` `pred``,`
                                             `OutIter` `out_it``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index. ]]
[[`DistancesPredicates const &`][ `dpred` ][The distances predicates. ]]
[[`typename rtree< Value, Options, Translator, Allocator >::size_type`][ `k` ][The max number of values. ]]
[[`Predicates const &`][ `pred` ][The spatial predicates. ]]
[[`OutIter`][ `out_it` ][The output iterator of the result range.]]
]
[heading Returns]
The number of found values. 
[endsect]

[#group__rtree__functions_1ga0c65d7b29b1edf72f1d236ccf211f63c]
[section clear(rtree<...> &)]
Remove all values from the index. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1ae6027e42d28a4bf93e74b055c79e6b09 rtree::clear()]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``>`
`void boost::geometry::index::clear``(``rtree< Value, Options, Translator, Allocator > &` `tree``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > &`][ `tree` ][The spatial index. ]]
]
[endsect]

[#group__rtree__functions_1gaec0b88a9d8b408753e3069134f1598c7]
[section size(rtree<...> const &)]
Get the number of values stored in the index. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a89561a834563f2ed6fc782bad16143fd rtree::size()]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``>`
`size_t boost::geometry::index::size``(``rtree< Value, Options, Translator, Allocator > const &` `tree``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index.]]
]
[heading Returns]
The number of values stored in the index. 
[endsect]

[#group__rtree__functions_1ga459e3d404fec7cbd66794714cbdd129e]
[section empty(rtree<...> const &)]
Query if there are no values stored in the index. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1ae889567443b0ba0dbdb975564c55804c rtree::empty()]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``>`
`bool boost::geometry::index::empty``(``rtree< Value, Options, Translator, Allocator > const &` `tree``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index.]]
]
[heading Returns]
true if there are no values in the index. 
[endsect]

[#group__rtree__functions_1gae10fbc3d536235b89aa3cb3641768bca]
[section bounds(rtree<...> const &)]
Get the box containing all stored values or an invalid box if the index has no values. 

[heading Description]
It calls [^`rtree::envelope()`].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``>`
`rtree<Value, Options, Translator, Allocator>::bounds_type const& boost::geometry::index::bounds``(``rtree< Value, Options, Translator, Allocator > const &` `tree``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index.]]
]
[heading Returns]
The box containing all stored values or an invalid box. 
[endsect]

[endsect]

