[/ Generated by doxygen_xml2qbk, don't change, will be overwritten automatically]
[/ Generated from xml/group__rtree__functions.xml]
[section:group__rtree__functions Functions related to the rtree (boost::geometry::index::)]
[heading Functions]
[table
[[Function][Description]]
[[[link group__rtree__functions_1gac0ac9ed0e01f7494a5a3059e75d3c5cc `insert(rtree<...> &, Value const &)`]][Insert a value to the index. ]]
[[[link group__rtree__functions_1gaf8f4fa09c12b96ace3bbb38823a9191b `insert(rtree<...> &, Iterator, Iterator)`]][Insert a range of values to the index. ]]
[[[link group__rtree__functions_1ga97ec330c1c021a1ac2d896a488c2eb9c `insert(rtree<...> &, Range const &)`]][Insert a range of values to the index. ]]
[[[link group__rtree__functions_1gad40492a5b99c3eebbd51901574762527 `remove(rtree<...> &, Value const &)`]][Remove a value from the container. ]]
[[[link group__rtree__functions_1ga0219361de8b15c539af3f9bd027938ce `remove(rtree<...> &, Iterator, Iterator)`]][Remove a range of values from the container. ]]
[[[link group__rtree__functions_1ga5885d6c90a91f238f72ab9b5ef24daf9 `remove(rtree<...> &, Range const &)`]][Remove a range of values from the container. ]]
[[[link group__rtree__functions_1gadcec162d2391c2c9cc4215a5578d1721 `spatial_query(rtree<...> const &, Predicates const &, OutIter)`]][Find values meeting spatial predicates. ]]
[[[link group__rtree__functions_1gacabbd521b88b67a700e1246e5889d343 `nearest_query(rtree<...> const &, DistancesPredicates const &, Value &)`]][Find the value meeting distances predicates. ]]
[[[link group__rtree__functions_1gaf963f417d4ab54a2782928020dd8c3ad `nearest_query(rtree<...> const &, DistancesPredicates const &, Predicates const &, Value &)`]][Find the value meeting distances and spatial predicates. ]]
[[[link group__rtree__functions_1ga74550ecb22e4ac69a445c1a6b0be9a1b `nearest_query(rtree<...> const &, DistancesPredicates const &, typename rtree<...>::size_type, OutIter)`]][Find k values meeting distances predicates. ]]
[[[link group__rtree__functions_1ga8057af533a3e28e09337bab2c7a146aa `nearest_query(rtree<...> const &, DistancesPredicates const &, typename rtree<...>::size_type, Predicates const &, OutIter)`]][Find k values meeting distances and spatial predicates. ]]
[[[link group__rtree__functions_1ga0c65d7b29b1edf72f1d236ccf211f63c `clear(rtree<...> &)`]][Remove all values from the index. ]]
[[[link group__rtree__functions_1gaec0b88a9d8b408753e3069134f1598c7 `size(rtree<...> const &)`]][Get the number of values stored in the index. ]]
[[[link group__rtree__functions_1ga459e3d404fec7cbd66794714cbdd129e `empty(rtree<...> const &)`]][Query if there are no values stored in the index. ]]
[[[link group__rtree__functions_1ga46aead88abd7f18f0e1eedb991bbb39d `box(rtree<...> const &)`]][Get the box containing all stored values or an invalid box if the index has no values. ]]
]

[#group__rtree__functions_1gac0ac9ed0e01f7494a5a3059e75d3c5cc]
[section insert(rtree<...> &, Value const &)]
Insert a value to the index. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1af6d5bd81e46cb4ff89277c753133664c rtree::insert(value_type const&)]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``>`
`void boost::geometry::index::insert``(``rtree< Value, Options, Translator, Allocator > &` `tree``,` `Value const &` `v``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > &`][ `tree` ][The spatial index. ]]
[[`Value const &`][ `v` ][The value which will be stored in the index. ]]
]
[endsect]

[#group__rtree__functions_1gaf8f4fa09c12b96ace3bbb38823a9191b]
[section insert(rtree<...> &, Iterator, Iterator)]
Insert a range of values to the index. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a5263a3faac7b4f0090d4ad1d44cc540d rtree::insert(Iterator, Iterator)]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename Iterator``>`
`void boost::geometry::index::insert``(``rtree< Value, Options, Translator, Allocator > &` `tree``,`
                                    `Iterator` `first``,`
                                    `Iterator` `last``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > &`][ `tree` ][The spatial index. ]]
[[`Iterator`][ `first` ][The beginning of the range of values. ]]
[[`Iterator`][ `last` ][The end of the range of values. ]]
]
[endsect]

[#group__rtree__functions_1ga97ec330c1c021a1ac2d896a488c2eb9c]
[section insert(rtree<...> &, Range const &)]
Insert a range of values to the index. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1abb624abd9268b41e815d40342b2634c2 rtree::insert(Range const&)]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename Range``>`
`void boost::geometry::index::insert``(``rtree< Value, Options, Translator, Allocator > &` `tree``,` `Range const &` `rng``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > &`][ `tree` ][The spatial index. ]]
[[`Range const &`][ `rng` ][The range of values. ]]
]
[endsect]

[#group__rtree__functions_1gad40492a5b99c3eebbd51901574762527]
[section remove(rtree<...> &, Value const &)]
Remove a value from the container. 

[heading Description]
Remove a value from the container. In contrast to the [^`std::set`] or [^`std::map erase()`] method this function removes only one value from the container.

It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1af6ca6909354a997f89411ef40ea5688a rtree::remove(value_type const&)]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``>`
`rtree<Value, Options, Translator, Allocator>::size_type boost::geometry::index::remove``(``rtree< Value, Options, Translator, Allocator > &` `tree``,` `Value const &` `v``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > &`][ `tree` ][The spatial index. ]]
[[`Value const &`][ `v` ][The value which will be removed from the index.]]
]
[heading Returns]
1 if value was removed, 0 otherwise. 
[endsect]

[#group__rtree__functions_1ga0219361de8b15c539af3f9bd027938ce]
[section remove(rtree<...> &, Iterator, Iterator)]
Remove a range of values from the container. 

[heading Description]
Remove a range of values from the container. In contrast to the [^`std::set`] or [^`std::map erase()`] method it doesn't take iterators pointing to values stored in this container. It removes values equal to these passed as a range. Furthermore this function removes only one value for each one passed in the range, not all equal values.

It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a6e9123114697d65b16ebc49cd5371fbd rtree::remove(Iterator, Iterator)]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename Iterator``>`
`rtree<Value, Options, Translator, Allocator>::size_type boost::geometry::index::remove``(``rtree< Value, Options, Translator, Allocator > &` `tree``,`
                                                                                       `Iterator` `first``,`
                                                                                       `Iterator` `last``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > &`][ `tree` ][The spatial index. ]]
[[`Iterator`][ `first` ][The beginning of the range of values. ]]
[[`Iterator`][ `last` ][The end of the range of values.]]
]
[heading Returns]
The number of removed values. 
[endsect]

[#group__rtree__functions_1ga5885d6c90a91f238f72ab9b5ef24daf9]
[section remove(rtree<...> &, Range const &)]
Remove a range of values from the container. 

[heading Description]
Remove a range of values from the container. In contrast to the [^`std::set`] or [^`std::map erase()`] method it removes values equal to these passed as a range. Furthermore this method removes only one value for each one passed in the range, not all equal values.

It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a5a57bb93b0b2d7ea1c659e925f918e9c rtree::remove(Range const&)]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename Range``>`
`rtree<Value, Options, Translator, Allocator>::size_type boost::geometry::index::remove``(``rtree< Value, Options, Translator, Allocator > &` `tree``,` `Range const &` `rng``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > &`][ `tree` ][The spatial index. ]]
[[`Range const &`][ `rng` ][The range of values.]]
]
[heading Returns]
The number of removed values. 
[endsect]

[#group__rtree__functions_1gadcec162d2391c2c9cc4215a5578d1721]
[section spatial_query(rtree<...> const &, Predicates const &, OutIter)]
Find values meeting spatial predicates. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a930bf17d595a91d8ae924383a0387920 rtree::spatial_query]] with parameters [^`(Predicates const&, OutIter)`].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename Predicates``,`
         `typename OutIter``>`
`size_t boost::geometry::index::spatial_query``(``rtree< Value, Options, Translator, Allocator > const &` `tree``,`
                                             `Predicates const &` `pred``,`
                                             `OutIter` `out_it``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index. ]]
[[`Predicates const &`][ `pred` ][The spatial predicates. ]]
[[`OutIter`][ `out_it` ][The output iterator of the result range.]]
]
[heading Returns]
The number of found values. 
[endsect]

[#group__rtree__functions_1gacabbd521b88b67a700e1246e5889d343]
[section nearest_query(rtree<...> const &, DistancesPredicates const &, Value &)]
Find the value meeting distances predicates. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a788295b315bd0ddeb93b1cc050fdf909 rtree::nearest_query]] with parameters [^`(DistancesPredicates const& dpred, value_type & v)`].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename DistancesPredicates``>`
`size_t boost::geometry::index::nearest_query``(``rtree< Value, Options, Translator, Allocator > const &` `tree``,`
                                             `DistancesPredicates const &` `dpred``,`
                                             `Value &` `v``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index. ]]
[[`DistancesPredicates const &`][ `dpred` ][The distances predicates. ]]
[[`Value &`][ `v` ][The result.]]
]
[heading Returns]
The number of found values. 
[endsect]

[#group__rtree__functions_1gaf963f417d4ab54a2782928020dd8c3ad]
[section nearest_query(rtree<...> const &, DistancesPredicates const &, Predicates const &, Value &)]
Find the value meeting distances and spatial predicates. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a788295b315bd0ddeb93b1cc050fdf909 rtree::nearest_query]] with parameters [^`(DistancesPredicates const& dpred, Predicates const& pred, value_type & v)`].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename DistancesPredicates``,`
         `typename Predicates``>`
`size_t boost::geometry::index::nearest_query``(``rtree< Value, Options, Translator, Allocator > const &` `tree``,`
                                             `DistancesPredicates const &` `dpred``,`
                                             `Predicates const &` `pred``,`
                                             `Value &` `v``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index. ]]
[[`DistancesPredicates const &`][ `dpred` ][The distances predicates. ]]
[[`Predicates const &`][ `pred` ][The spatial predicates. ]]
[[`Value &`][ `v` ][The result.]]
]
[heading Returns]
The number of found values. 
[endsect]

[#group__rtree__functions_1ga74550ecb22e4ac69a445c1a6b0be9a1b]
[section nearest_query(rtree<...> const &, DistancesPredicates const &, typename rtree<...>::size_type, OutIter)]
Find k values meeting distances predicates. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a788295b315bd0ddeb93b1cc050fdf909 rtree::nearest_query]] with parameters [^`(DistancesPredicates const & dpred, size_type k, OutIter out_it)`].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename DistancesPredicates``,`
         `typename OutIter``>`
`size_t boost::geometry::index::nearest_query``(``rtree< Value, Options, Translator, Allocator > const &` `tree``,`
                                             `DistancesPredicates const &` `dpred``,`
                                             `typename rtree< Value, Options, Translator, Allocator >::size_type` `k``,`
                                             `OutIter` `out_it``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index. ]]
[[`DistancesPredicates const &`][ `dpred` ][The distances predicates. ]]
[[`typename rtree< Value, Options, Translator, Allocator >::size_type`][ `k` ][The max number of values. ]]
[[`OutIter`][ `out_it` ][The output iterator of the result range.]]
]
[heading Returns]
The number of found values. 
[endsect]

[#group__rtree__functions_1ga8057af533a3e28e09337bab2c7a146aa]
[section nearest_query(rtree<...> const &, DistancesPredicates const &, typename rtree<...>::size_type, Predicates const &, OutIter)]
Find k values meeting distances and spatial predicates. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a788295b315bd0ddeb93b1cc050fdf909 rtree::nearest_query]] with parameters [^`(DistancesPredicates const & dpred, size_type k, Predicates const & pred, OutIter out_it)`].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``,`
         `typename DistancesPredicates``,`
         `typename Predicates``,`
         `typename OutIter``>`
`size_t boost::geometry::index::nearest_query``(``rtree< Value, Options, Translator, Allocator > const &` `tree``,`
                                             `DistancesPredicates const &` `dpred``,`
                                             `typename rtree< Value, Options, Translator, Allocator >::size_type` `k``,`
                                             `Predicates const &` `pred``,`
                                             `OutIter` `out_it``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index. ]]
[[`DistancesPredicates const &`][ `dpred` ][The distances predicates. ]]
[[`typename rtree< Value, Options, Translator, Allocator >::size_type`][ `k` ][The max number of values. ]]
[[`Predicates const &`][ `pred` ][The spatial predicates. ]]
[[`OutIter`][ `out_it` ][The output iterator of the result range.]]
]
[heading Returns]
The number of found values. 
[endsect]

[#group__rtree__functions_1ga0c65d7b29b1edf72f1d236ccf211f63c]
[section clear(rtree<...> &)]
Remove all values from the index. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1ae6027e42d28a4bf93e74b055c79e6b09 rtree::clear()]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``>`
`void boost::geometry::index::clear``(``rtree< Value, Options, Translator, Allocator > &` `tree``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > &`][ `tree` ][The spatial index. ]]
]
[endsect]

[#group__rtree__functions_1gaec0b88a9d8b408753e3069134f1598c7]
[section size(rtree<...> const &)]
Get the number of values stored in the index. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1a89561a834563f2ed6fc782bad16143fd rtree::size()]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``>`
`size_t boost::geometry::index::size``(``rtree< Value, Options, Translator, Allocator > const &` `tree``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index.]]
]
[heading Returns]
The number of values stored in the index. 
[endsect]

[#group__rtree__functions_1ga459e3d404fec7cbd66794714cbdd129e]
[section empty(rtree<...> const &)]
Query if there are no values stored in the index. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1ae889567443b0ba0dbdb975564c55804c rtree::empty()]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``>`
`bool boost::geometry::index::empty``(``rtree< Value, Options, Translator, Allocator > const &` `tree``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index.]]
]
[heading Returns]
true if there are no values in the index. 
[endsect]

[#group__rtree__functions_1ga46aead88abd7f18f0e1eedb991bbb39d]
[section box(rtree<...> const &)]
Get the box containing all stored values or an invalid box if the index has no values. 

[heading Description]
It calls [^[link classboost_1_1geometry_1_1index_1_1rtree_1adf62005332a5fa9119ff03185e0c5143 rtree::box()]].[heading Synopsis]
[pre
`template<``typename Value``,`
         `typename Options``,`
         `typename Translator``,`
         `typename Allocator``>`
`rtree<Value, Options, Translator, Allocator>::box_type boost::geometry::index::box``(``rtree< Value, Options, Translator, Allocator > const &` `tree``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`rtree< Value, Options, Translator, Allocator > const &`][ `tree` ][The spatial index.]]
]
[heading Returns]
The box containing all stored values or an invalid box. 
[endsect]

[endsect]

