[/ Generated by doxygen_xml2qbk, don't change, will be overwritten automatically]
[/ Generated from xml/group__predicates.xml]
[section:group__predicates Spatial predicates (boost::geometry::index::)]
[table
[[Function][Description]]
[[[link geometry_index.r_tree.reference.group__predicates.function0 `empty()`]][Generate empty predicate. ]]
[[[link geometry_index.r_tree.reference.group__predicates.function1 `value(ValuePredicate const &)`]][Generate value predicate. ]]
[[[link geometry_index.r_tree.reference.group__predicates.function2 `covered_by(Geometry const &)`]][Generate covered_by() predicate. ]]
[[[link geometry_index.r_tree.reference.group__predicates.function3 `disjoint(Geometry const &)`]][Generate disjoint() predicate. ]]
[[[link geometry_index.r_tree.reference.group__predicates.function4 `intersects(Geometry const &)`]][Generate intersects() predicate. ]]
[[[link geometry_index.r_tree.reference.group__predicates.function5 `overlaps(Geometry const &)`]][Generate overlaps() predicate. ]]
[[[link geometry_index.r_tree.reference.group__predicates.function6 `within(Geometry const &)`]][Generate within() predicate. ]]
]

[section:function0 empty()]
Generate empty predicate. 

[heading Synopsis]
``detail::empty boost::geometry::index::empty()``

[endsect]

[section:function1 value(ValuePredicate const &)]
Generate value predicate. 

[heading Description]
A wrapper around user-defined functor describing if Value should be returned by spatial query.[heading Synopsis]
``template<typename ValuePredicate>
detail::value<ValuePredicate> boost::geometry::index::value(ValuePredicate const & vpred)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `ValuePredicate const &` ][ `vpred` ][The functor. ]]
]
[endsect]

[section:function2 covered_by(Geometry const &)]
Generate covered_by() predicate. 

[heading Description]
Generate a predicate defining Value and Geometry relationship. Value will be returned by the query if bg::covered_by(Indexable, Geometry) returns true.[heading Synopsis]
``template<typename Geometry>
detail::covered_by<Geometry> boost::geometry::index::covered_by(Geometry const & g)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `Geometry const &` ][ `g` ][The Geometry object. ]]
]
[endsect]

[section:function3 disjoint(Geometry const &)]
Generate disjoint() predicate. 

[heading Description]
Generate a predicate defining Value and Geometry relationship. Value will be returned by the query if bg::disjoint(Indexable, Geometry) returns true.[heading Synopsis]
``template<typename Geometry>
detail::disjoint<Geometry> boost::geometry::index::disjoint(Geometry const & g)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `Geometry const &` ][ `g` ][The Geometry object. ]]
]
[endsect]

[section:function4 intersects(Geometry const &)]
Generate intersects() predicate. 

[heading Description]
Generate a predicate defining Value and Geometry relationship. Value will be returned by the query if bg::intersects(Indexable, Geometry) returns true.[heading Synopsis]
``template<typename Geometry>
detail::intersects<Geometry> boost::geometry::index::intersects(Geometry const & g)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `Geometry const &` ][ `g` ][The Geometry object. ]]
]
[endsect]

[section:function5 overlaps(Geometry const &)]
Generate overlaps() predicate. 

[heading Description]
Generate a predicate defining Value and Geometry relationship. Value will be returned by the query if bg::overlaps(Indexable, Geometry) returns true.[heading Synopsis]
``template<typename Geometry>
detail::overlaps<Geometry> boost::geometry::index::overlaps(Geometry const & g)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `Geometry const &` ][ `g` ][The Geometry object. ]]
]
[endsect]

[section:function6 within(Geometry const &)]
Generate within() predicate. 

[heading Description]
Generate a predicate defining Value and Geometry relationship. Value will be returned by the query if bg::within(Indexable, Geometry) returns true.[heading Synopsis]
``template<typename Geometry>
detail::within<Geometry> boost::geometry::index::within(Geometry const & g)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `Geometry const &` ][ `g` ][The Geometry object. ]]
]
[endsect]

[endsect]

