[/ Generated by doxygen_xml2qbk, don't change, will be overwritten automatically]
[/ Generated from xml/group__predicates.xml]
[section:group__predicates Predicates (boost::geometry::index::)]
[heading Functions]
[table
[[Function][Description]]
[[[link group__predicates_1ga0a613a7f1d18ac33955bfdc2c5777c61 `covered_by(Geometry const &)`]][Generate [^[link group__predicates_1ga0a613a7f1d18ac33955bfdc2c5777c61 covered_by()]] predicate. ]]
[[[link group__predicates_1ga351bb3b82e019ff45adf789385b8007d `disjoint(Geometry const &)`]][Generate [^[link group__predicates_1ga351bb3b82e019ff45adf789385b8007d disjoint()]] predicate. ]]
[[[link group__predicates_1ga7301c50e0272976b9f1434536383e6d0 `intersects(Geometry const &)`]][Generate [^[link group__predicates_1ga7301c50e0272976b9f1434536383e6d0 intersects()]] predicate. ]]
[[[link group__predicates_1ga5511236f56be1defcccbf11e742ccd88 `overlaps(Geometry const &)`]][Generate [^[link group__predicates_1ga5511236f56be1defcccbf11e742ccd88 overlaps()]] predicate. ]]
[[[link group__predicates_1gabf9c4e76dd8a09a4c476f2f8fa8a0e4d `within(Geometry const &)`]][Generate [^[link group__predicates_1gabf9c4e76dd8a09a4c476f2f8fa8a0e4d within()]] predicate. ]]
[[[link group__predicates_1ga8acb81106fce01da72f310184ab4d9ce `value(Fun const &)`]][Generate value predicate. ]]
[[[link group__predicates_1ga162233fd11b980853f8b8335cb70d57b `nearest(DistancePredicates const &, unsigned)`]][Generate nearest predicate. ]]
[[[link group__predicates_1ga54f507955e8dba2c928d6592d5970638 `nearest(DistancePredicates const &)`]][Generate nearest predicate. ]]
]

[#group__predicates_1ga0a613a7f1d18ac33955bfdc2c5777c61]
[section covered_by(Geometry const &)]
Generate [^[link group__predicates_1ga0a613a7f1d18ac33955bfdc2c5777c61 covered_by()]] predicate. 

[heading Description]
Generate a predicate defining Value and Geometry relationship. Value will be returned by the query if [^`bg::covered_by(Indexable, Geometry)`] returns true.[heading Synopsis]
[pre
`template<``typename Geometry``>`
`detail::covered_by<Geometry> boost::geometry::index::covered_by``(``Geometry const &` `g``)`
]

[heading Template parameter(s)]
[table
[[Parameter] [Description]]
[[`Geometry`][The Geometry type.]]
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`Geometry const &`][ `g` ][The Geometry object. ]]
]
[endsect]

[#group__predicates_1ga351bb3b82e019ff45adf789385b8007d]
[section disjoint(Geometry const &)]
Generate [^[link group__predicates_1ga351bb3b82e019ff45adf789385b8007d disjoint()]] predicate. 

[heading Description]
Generate a predicate defining Value and Geometry relationship. Value will be returned by the query if [^`bg::disjoint(Indexable, Geometry)`] returns true.[heading Synopsis]
[pre
`template<``typename Geometry``>`
`detail::disjoint<Geometry> boost::geometry::index::disjoint``(``Geometry const &` `g``)`
]

[heading Template parameter(s)]
[table
[[Parameter] [Description]]
[[`Geometry`][The Geometry type.]]
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`Geometry const &`][ `g` ][The Geometry object. ]]
]
[endsect]

[#group__predicates_1ga7301c50e0272976b9f1434536383e6d0]
[section intersects(Geometry const &)]
Generate [^[link group__predicates_1ga7301c50e0272976b9f1434536383e6d0 intersects()]] predicate. 

[heading Description]
Generate a predicate defining Value and Geometry relationship. Value will be returned by the query if [^`bg::intersects(Indexable, Geometry)`] returns true.[heading Synopsis]
[pre
`template<``typename Geometry``>`
`detail::intersects<Geometry> boost::geometry::index::intersects``(``Geometry const &` `g``)`
]

[heading Template parameter(s)]
[table
[[Parameter] [Description]]
[[`Geometry`][The Geometry type.]]
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`Geometry const &`][ `g` ][The Geometry object. ]]
]
[endsect]

[#group__predicates_1ga5511236f56be1defcccbf11e742ccd88]
[section overlaps(Geometry const &)]
Generate [^[link group__predicates_1ga5511236f56be1defcccbf11e742ccd88 overlaps()]] predicate. 

[heading Description]
Generate a predicate defining Value and Geometry relationship. Value will be returned by the query if [^`bg::overlaps(Indexable, Geometry)`] returns true.[heading Synopsis]
[pre
`template<``typename Geometry``>`
`detail::overlaps<Geometry> boost::geometry::index::overlaps``(``Geometry const &` `g``)`
]

[heading Template parameter(s)]
[table
[[Parameter] [Description]]
[[`Geometry`][The Geometry type.]]
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`Geometry const &`][ `g` ][The Geometry object. ]]
]
[endsect]

[#group__predicates_1gabf9c4e76dd8a09a4c476f2f8fa8a0e4d]
[section within(Geometry const &)]
Generate [^[link group__predicates_1gabf9c4e76dd8a09a4c476f2f8fa8a0e4d within()]] predicate. 

[heading Description]
Generate a predicate defining Value and Geometry relationship. Value will be returned by the query if [^`bg::within(Indexable, Geometry)`] returns true.[heading Synopsis]
[pre
`template<``typename Geometry``>`
`detail::within<Geometry> boost::geometry::index::within``(``Geometry const &` `g``)`
]

[heading Template parameter(s)]
[table
[[Parameter] [Description]]
[[`Geometry`][The Geometry type.]]
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`Geometry const &`][ `g` ][The Geometry object. ]]
]
[endsect]

[#group__predicates_1ga8acb81106fce01da72f310184ab4d9ce]
[section value(Fun const &)]
Generate value predicate. 

[heading Description]
A wrapper around user-defined functor describing if Value should be returned by spatial query.[heading Synopsis]
[pre
`template<``typename Fun``>`
`detail::value<Fun> boost::geometry::index::value``(``Fun const &` `fun``)`
]

[heading Template parameter(s)]
[table
[[Parameter] [Description]]
[[`Fun`][Functor type.]]
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`Fun const &`][ `fun` ][The functor. ]]
]
[endsect]

[#group__predicates_1ga162233fd11b980853f8b8335cb70d57b]
[section nearest(DistancePredicates const &, unsigned)]
Generate nearest predicate. 

[heading Description]
When nearest predicate is passed to the query, k-nearest neighbour search will be performed.

[*Distances predicates] may be a [^`Point`]. In this the case values closest to [^`Point`] are returned.

It is possible to define how distance between values and query Point is calculated. This is done by passing PointRelation. It can be generated by following functions: 

* [^[link group__distance__predicates_1gace3c7dbc60840c2a61da36e975d56636 boost::geometry::index::to_nearest()]] - default, 
* [^[link group__distance__predicates_1gaccbba95d864d8dcf8a694796c840fbe0 boost::geometry::index::to_centroid()]], 
* [^[link group__distance__predicates_1ga67dddd8a7fcaae150970e1db0401de02 boost::geometry::index::to_furthest()]].


It is possible to define distances bounds, for example that a distance must be between min_distance and max_distance. This is done by passing DistancesPredicates which can be generated by following functions: 

* [^[link group__distance__predicates_1ga1b0f969b575a94ca710b9345861f64db boost::geometry::index::unbounded()]] - default, 
* [^[link group__distance__predicates_1ga39c7c94776ab840e164848e53d376098 boost::geometry::index::min_bounded()]], 
* [^[link group__distance__predicates_1ga843735643378288b0e14e19cc9b4e079 boost::geometry::index::max_bounded()]], 
* [^[link group__distance__predicates_1ga20621ca608b1420c38182346b965f347 boost::geometry::index::bounded()]].


MinRelation and MaxRelation describes bounds and can be generated by following functions: 

* [^[link group__distance__predicates_1gace3c7dbc60840c2a61da36e975d56636 boost::geometry::index::to_nearest()]], 
* [^[link group__distance__predicates_1gaccbba95d864d8dcf8a694796c840fbe0 boost::geometry::index::to_centroid()]], 
* [^[link group__distance__predicates_1ga67dddd8a7fcaae150970e1db0401de02 boost::geometry::index::to_furthest()]].

[heading Synopsis]
[pre
`template<``typename DistancePredicates``>`
`detail::nearest<DistancePredicates> boost::geometry::index::nearest``(``DistancePredicates const &` `dpred``,` `unsigned` `k``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`DistancePredicates const &`][ `dpred` ][The distance predicates. ]]
[[`unsigned`][ `k` ][The maximum number of values to return. ]]
]
[heading Example]

``
tree.query(bgi::nearest(pt, 5), std::back_inserter(result));
tree.query(bgi::nearest(pt, 5) && bgi::intersects(box), std::back_inserter(result));
tree.query(bgi::nearest(bgi::to_centroid(pt), 5) && bgi::within(box), std::back_inserter(result));
tree.query(bgi::nearest(bgi::bounded(pt, bgi::to_furthest(10), bgi::to_nearest(20)), 5), std::back_inserter(result));
``


[warning Only one [^[link group__predicates_1ga162233fd11b980853f8b8335cb70d57b nearest()]] predicate may be used in a query. This version may be used only in queries returning a set of values - using output iterator.]

[endsect]

[#group__predicates_1ga54f507955e8dba2c928d6592d5970638]
[section nearest(DistancePredicates const &)]
Generate nearest predicate. 

[heading Description]
When nearest predicate is passed to the query, k-nearest neighbour search will be performed.

[*Distances predicates] may be a [^`Point`]. In this the case value closest to [^`Point`] is returned.

It is possible to define how distance between value and query Point is calculated. This is done by passing PointRelation. It can be generated by following functions: 

* [^[link group__distance__predicates_1gace3c7dbc60840c2a61da36e975d56636 boost::geometry::index::to_nearest()]] - default, 
* [^[link group__distance__predicates_1gaccbba95d864d8dcf8a694796c840fbe0 boost::geometry::index::to_centroid()]], 
* [^[link group__distance__predicates_1ga67dddd8a7fcaae150970e1db0401de02 boost::geometry::index::to_furthest()]].


It is possible to define distances bounds, for example that a distance must be between min_distance and max_distance. This is done by passing DistancesPredicates which can be generated by following functions: 

* [^[link group__distance__predicates_1ga1b0f969b575a94ca710b9345861f64db boost::geometry::index::unbounded()]] - default, 
* [^[link group__distance__predicates_1ga39c7c94776ab840e164848e53d376098 boost::geometry::index::min_bounded()]], 
* [^[link group__distance__predicates_1ga843735643378288b0e14e19cc9b4e079 boost::geometry::index::max_bounded()]], 
* [^[link group__distance__predicates_1ga20621ca608b1420c38182346b965f347 boost::geometry::index::bounded()]].


MinRelation and MaxRelation describes bounds and can be generated by following functions: 

* [^[link group__distance__predicates_1gace3c7dbc60840c2a61da36e975d56636 boost::geometry::index::to_nearest()]], 
* [^[link group__distance__predicates_1gaccbba95d864d8dcf8a694796c840fbe0 boost::geometry::index::to_centroid()]], 
* [^[link group__distance__predicates_1ga67dddd8a7fcaae150970e1db0401de02 boost::geometry::index::to_furthest()]].

[heading Synopsis]
[pre
`template<``typename DistancePredicates``>`
`detail::nearest_one<DistancePredicates> boost::geometry::index::nearest``(``DistancePredicates const &` `dpred``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`DistancePredicates const &`][ `dpred` ][The distance predicates. ]]
]
[heading Example]

``
tree.query(bgi::nearest(pt), value);
tree.query(bgi::nearest(pt) && bgi::intersects(box), value);
tree.query(bgi::nearest(bgi::to_centroid(pt)) && bgi::within(box), value);
tree.query(bgi::nearest(bgi::bounded(pt, bgi::to_furthest(10), bgi::to_nearest(20))), value);
``


[warning Only one [^[link group__predicates_1ga162233fd11b980853f8b8335cb70d57b nearest()]] predicate may be used in a query. This version may be used only in queries returning one value.]

[endsect]

[endsect]

