[/ Copyright Kevin Sopp 2008 - 2009.
 / Distributed under the Boost Software License, Version 1.0.
 / (See accompanying file LICENSE_1_0.txt or copy at
 / http://www.boost.org/LICENSE_1_0.txt)]

[section uniform_integer_bits reference]

[heading Synopsis]

  // <boost/mp_math/integer.hpp>
  template<class MpInt = integer<> >
  struct uniform_integer_bits
  {
    typedef MpInt input_type;
    typedef MpInt result_type;

    static const bool has_fixed_range = false;

    uniform_integer_bits(typename MpInt::size_type bits);

    result_type min() const;
    result_type max() const;

    void reset();

    template<class UniformRandomNumberGenerator>
    result_type operator()(UniformRandomNumberGenerator& urng);
  };


[h3 Members]

  uniform_integer_bits(typename MpInt::size_type x);

* [*Effects:] Constructs a `uniform_integer_bits` object. All numbers generated
by this object will be `x` bits in size.


  result_type min() const;

* [*Returns:] The least value of the distribution.


  result_type max() const;

* [*Returns:] The greatest value of the distribution.


  void reset();

* [*Effects:] Resets the state of the distribution function.


  template<class UniformRandomNumberGenerator>
  result_type operator()(UniformRandomNumberGenerator& urng);

* [*Returns:] A uniform random number `x` in the range `min <= x <= max`.


[endsect][/uniform_integer_bits reference]
