[/=============================================================================
    Copyright (C) 2011 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:vertex_property_map_gen `vertex_property_map_gen<Graph, Value>`]

[section Synopsis]
[reference__vertex_property_map_gen]
[endsect]

[section Description]
This metafunction returns a type that models the __Lvalue_Property_Map__
concept.  If the `Graph` type models the __Vertex_List_Graph__ concept and
possesses an internal __vertex_index__ property map whose value type is an
integer type, then the return type will wrap an __iterator_property_map__
around a __std_deque__ of `Value` elements; otherwise, the return type will
wrap an __associative_property_map__ around a __std_map__ that associates
vertices with `Value` objects.  This latter quality frees __BGL__ algorithms
such as __loop_erased_random_tree__ from requiring a __vertex_index__ property
map (either as an input argument or stored internally by the input graph) if
some other utility property map is not specified.

Also, unlike __iterator_property_map__ and __associative_property_map__
instances, a `vertex_property_map_gen::type` object can stand alone in a
persistent setting, e.g.:

``
template <typename Graph>
void foo(Graph const& g)
{
    using namespace boost;
    typename vertex_property_map_gen<Graph,default_color_type>::type color_map;

    // Do something with color_map.
}
``
[endsect]

[section:definition Where defined]
``
#include <__boost_graph_vertex_property_map_gen_hpp__>
``
[endsect]

[section:model_of Model of]

  * __Lvalue_Property_Map__
  * __Copy_Constructible__
  * __Assignable__

[endsect]

[section Return Type Members]
[table
    [[Name][Expression][Description]]
    [
        [Key type]
        [`key_type`]
        [Same as [^_graph_traits_<Graph>::vertex_descriptor]]
    ]
    [
        [Value type]
        [`value_type`]
        [Same as `Value`]
    ]
    [
        [Reference type]
        [`reference`]
        [Same as `Value&`]
    ]
    [
        [Category type]
        [`category`]
        [Same as `lvalue_property_map_tag`]
    ]
    [
        [Constructor]
        [`vertex_property_map_gen::type(Graph const&);`]
        [
            Constructs a `vertex_property_map_gen::type` object that will
            associate vertices of the specified graph with `Value` objects.
        ]
    ]
    [
        [Copy constructor]
        [`vertex_property_map_gen::type(type const&);`]
        [Defined by the __Copy_Constructible__ concept.]
    ]
    [
        [Assignment operator]
        [`vertex_property_map_gen::type& operator=(type const&);`]
        [Defined by the __Assignable__ concept.]
    ]
    [
        [Property access]
        [`reference operator[](key_type const&) const;`]
        [Accesses the property value of the specified vertex.]
    ]
]
[endsect]

[section:non_members Non-members]
[table
    [[Name][Expression][Description]]
    [
        [Vertex property map creation]
        [[reference__make_vertex_property_map]]
        [
            Requires the `Value` type to be explicitly passed in as a template
            parameter.  Creates and returns a `vertex_property_map_gen::type`
            object that will associate vertices of the specified graph with
            `Value` objects.
        ]
    ]
    [
        [Vertex property map creation with value]
        [[reference__make_vertex_property_map__with_value]]
        [
            Requires a `Value` object to be explicitly passed in as the second
            argument.  Creates and returns a `vertex_property_map_gen::type`
            object that will associate vertices of the specified graph with
            `Value` objects.
        ]
    ]
    [
        [Vertex predecessor map creation]
        [[reference__make_vertex_predecessor_map]]
        [
            Creates and returns a `vertex_property_map_gen::type` object that
            will associate vertices of the specified graph with each other.
        ]
    ]
]
[endsect]

[important
    The `vertex_property_map_gen` metafunction is a simple wrapper around
    either an __iterator_property_map__ or an __associative_property_map__;
    neither the constructor nor the non-member creation functions will
    initialize the objects returned the way some data structures (e.g.
    __adjacency_list__ with vertex selector `boost::vecS`) or algorithms (e.g.
    __depth_first_search__) initialize their respective property maps.
]

[endsect] [/ vertex_property_map_gen]

