;------------------------------------------------------------------------------
;  Boost.Multiprecision: 
;  Currently support for cpp_int and cpp_dec_float.
;------------------------------------------------------------------------------


boost::multiprecision::number<boost::multiprecision::backends::debug_adaptor<*>,*>{
   preview(
      #(
          $e.m_backend.debug_value
      )
   )
}

boost::multiprecision::number<boost::multiprecision::backends::cpp_int_backend<*,*,1,*,void>,*>{
   preview(
      #if($e.m_backend.m_limbs == 1) (
         #if($e.m_backend.m_sign) ( -1 * (__int64)($e.m_backend.m_wrapper.m_data[0]) ) #else ($e.m_backend.m_wrapper.m_data[0])
      ) 
      #elif(($e.m_backend.m_limbs == 2) && ($e.m_backend.m_wrapper.m_data[1] < 0x80000000)) (
         #if($e.m_backend.m_sign) ( -1 * (__int64)($e.m_backend.m_wrapper.m_data[0] | ((__int64)$e.m_backend.m_wrapper.m_data[1] << 32)) ) #else ($e.m_backend.m_wrapper.m_data[0] | ((__int64)$e.m_backend.m_wrapper.m_data[1] << 32))
      ) #else (
         #( "signbit = ", $e.m_backend.m_sign, " data = ", #array ( expr: $e.m_backend.m_wrapper.m_data[$e.m_backend.m_limbs - $i - 1], size: $e.m_backend.m_limbs ) : [$e,x] )
      )
   )

   children (
      #(
         ~raw: [$c,!],
         sign bit: $e.m_backend.m_sign,
         #array (
               expr: $e.m_backend.m_wrapper.m_data[$e.m_backend.m_limbs - $i - 1],
               size: $e.m_backend.m_limbs
         ) : [$e,x]
      )
   )
}

boost::multiprecision::number<boost::multiprecision::backends::cpp_int_backend<*,*,0,*,void>,*>{
   preview(
      #if($e.m_backend.m_limbs == 1) (
         $e.m_backend.m_wrapper.m_data[0]
      ) 
      #elif($e.m_backend.m_limbs == 2) (
         $e.m_backend.m_wrapper.m_data[0] | ((__int64)$e.m_backend.m_wrapper.m_data[1] << 32)
      ) #else (
         #array ( expr: $e.m_backend.m_wrapper.m_data[$e.m_backend.m_limbs - $i - 1], size: $e.m_backend.m_limbs ) : [$e,x]
      )
   )

   children (
      #(
         ~raw: [$c,!],
         #array (
               expr: $e.m_backend.m_wrapper.m_data[$e.m_backend.m_limbs - $i - 1],
               size: $e.m_backend.m_limbs
         ) : [$e,x]
      )
   )
}

boost::multiprecision::number<boost::multiprecision::backends::cpp_int_backend<0,0,1,*,*>,*>{
   preview(
      #if ($e.m_backend.m_internal) (
        #if($e.m_backend.m_limbs == 1) (
            #if($e.m_backend.m_sign) ( -1 * (__int64)($e.m_backend.m_data.first) ) #else($e.m_backend.m_data.first)
        ) #elif(($e.m_backend.m_limbs == 2) && ($e.m_backend.m_data.la[1] < 0x80000000)) (
            #if($e.m_backend.m_sign) ( -1 * (__int64)($e.m_backend.m_data.double_first) ) #else($e.m_backend.m_data.double_first)
        ) #else(
           #( "signbit = ", $e.m_backend.m_sign, " data = ", #array ( expr: $e.m_backend.m_data.la[$e.m_backend.m_limbs - $i - 1], size: $e.m_backend.m_limbs ) : [$e,x] )
        )
      ) #else(
        #if($e.m_backend.m_limbs == 1) (
            #if($e.m_backend.m_sign) ( -1 * (__int64)($e.m_backend.m_data.ld.data[0]) ) #else($e.m_backend.m_data.ld.data[0])
        ) #elif(($e.m_backend.m_limbs == 2) && ($e.m_backend.m_data.ld.data[1] < 0x80000000)) (
            #if($e.m_backend.m_sign) ( -1 * (__int64)($e.m_backend.m_data.ld.data[0] | ((__int64)$e.m_backend.m_data.ld.data[1] << 32)) ) #else($e.m_backend.m_data.ld.data[0] | ((__int64)$e.m_backend.m_data.ld.data[1] << 32))
        ) #else(
            #( "signbit = ", $e.m_backend.m_sign, " data = ", #array ( expr: $e.m_backend.m_data.ld.data[$e.m_backend.m_limbs - $i - 1], size: $e.m_backend.m_limbs ) : [$e,x] )
        )
      )
   )

   children (
      #if ($e.m_backend.m_internal) (
        #if($e.m_backend.m_limbs == 1) (
            #(value: $e.m_backend.m_data.first)
         ) #elif($e.m_backend.m_limbs == 1) (
            #(value: $e.m_backend.m_data.double_first)
         ) #else (
            #(
            sign bit: $e.m_backend.m_sign,
            #array (
                expr: $e.m_backend.m_data.la[$e.m_backend.m_limbs - $i - 1],
                size: $e.m_backend.m_limbs
            ) : [$e,x]
            )
         )
      ) #else (
        #(
            ~raw: [$c,!],
            sign bit: $e.m_backend.m_sign,
            #array (
                expr: $e.m_backend.m_data.ld.data[$e.m_backend.m_limbs - $i - 1],
                size: $e.m_backend.m_limbs
            ) : [$e,x]
         )
      )
   )
}

boost::multiprecision::number<boost::multiprecision::backends::cpp_dec_float<*,*,void>,*>{
   preview(
      #if($e.m_backend.fpclass == 0)(
         #if($e.m_backend.exp != 0)(
            #if($e.m_backend.neg)(
               #("-", [$e.m_backend.data._Elems[0],u], ".", [$e.m_backend.data._Elems[1],u], [$e.m_backend.data._Elems[2],u], "...e", [$e.m_backend.exp,d])
            ) #else(
               #([$e.m_backend.data._Elems[0],u], ".", [$e.m_backend.data._Elems[1],u], [$e.m_backend.data._Elems[2],u], "...e", [$e.m_backend.exp,d])
            )
         )#else(
            #if($e.m_backend.neg)(
               #("-", [$e.m_backend.data._Elems[0],u], ".", [$e.m_backend.data._Elems[1],u], [$e.m_backend.data._Elems[2],u], "...")
            ) #else(
               #([$e.m_backend.data._Elems[0],u], ".", [$e.m_backend.data._Elems[1],u], [$e.m_backend.data._Elems[2],u], "...")
            )
         )
      )#elif($e.m_backend.fpclass == 1)(
         #if($e.m_backend.neg)(
            "-INF"
         )#else(
            "+INF"
         )
      )#else(
         "NaN"
      )
   )
   children(
      #(
         sign bit: $e.m_backend.neg,
         exponent: $e.m_backend.exp,
         ~raw: [$c,!],
         #array(
            expr: $e.m_backend.data._Elems[$i],
            size: $e.m_backend.prec_elem
         ) : [$e,u]
      )
   )
}



