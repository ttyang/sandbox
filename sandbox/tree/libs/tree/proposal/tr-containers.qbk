[/
 /  Copyright (c) 2006-2009, Bernhard Reiter
 /  Copyright (c) 2006-2011, Ren√© Rivera
 /
 /  Distributed under the Boost Software License, Version 1.0.
 /  (See accompanying file LICENSE_1_0.txt or copy at
 /  http://www.boost.org/LICENSE_1_0.txt)
 /]

[section:containers Containers library [label tr.containers]]

[section:hierarchy Hierarchy containers [label tr.hierarchy]]

[section:req Hierarchy containers requirements [label tr.hierarchy.req]]

[ordered_list

[A hierarchy is an object that stores a finite set of objects, all of the same type, in a hierarchical manner. Hierarchies introduce a cursor concept for navigation instead of iterators. The library provides two kinds of native hierarchies: =binary_tree=, and =nary_tree=, along with hierarchy-yielding hierarchy adaptors =forest_tree=, and =multiway_tree=.]

[Hierarchy containers conform to the requirements of Containers (\[lib.container.requirements\]), except that the expressions in Table 1 are not required to be valid, where a and b denote values of a type X, and X is a hierarchy container class:

    [table:table1 Container requirements that are not required for hierarchy containers
        [[unsupported expression]]
        [[[^X::iterator]]]
        [[[^X::const_iterator]]]
        [[[^X::reverse_iterator]]]
        [[[^X::const_reverse_iterator]]]
        [[[^a.begin()]]]
        [[[^a.end()]]]
        [[[^a.rbegin()]]]
        [[[^a.rend()]]]
        [[[^a < b]]]
        [[[^a > b]]]
        [[[^a <= b]]]
        [[[^a >= b]]]
    ]
]

[Non-constant complexity requirements in this clause are stated in one of a number of possible different ways: unless specified otherwise, they are expressed in terms of the number of operations =n=, which stands for the total number of elements in the hierarchy; in some cases, however, they are stated in terms of another value.]

[In Table 2: =X= denotes a hierarchy class containing objects of type =T= and =a= denotes a value of type =X=.

    [table:table2 Hierarchy requirements (in addition to container)
        [[expression]
         [return type]
         [assertion/note[br]
            pre/post-condition]
         [complexity]]
        [[[^X::cursor]]
         [cursor type pointing to =T=]
         [any cursor category]
         [compile time]]
        [[[^X::const_cursor]]
         [cursor type pointing to =const T=]
         [any cursor category]
         [compile time]]
        [[[^a.root()]]
         [=iterator= for mutable =a=;[br]
            =const_iterator= for constant =a=]
         [__nbsp__]
         [constant]]
        [[[^a.croot()]]
         [=const_iterator=]
         [__nbsp__]
         [constant]]
        [[[^a.shoot()]]
         [=iterator= for mutable =a=;[br]
            =const_iterator= for constant =a=]
         [__nbsp__]
         [(Note A)]]
        [[[^a.cshoot()]]
         [=const_iterator=]
         [__nbsp__]
         [(Note A)]]
        [[[^typename X::template rebind<U>::other]]
         [=Y=]
         [For all =U= (including =T=), =Y::template rebind<T>::other= is =X=.]
         [compile time]]
    ]

Notes: Those entries marked "(Note A)" should have at worst linear complexity. See the individual hierarchy containers for specific complexity.
]

[=root()= and =croot()= return a cursor which is the on-top value for the hierarchy. =shoot()= and =cshoot()= return a cursor which is the past-the-end value that is found one past the hierarchy's rightmost element. If the hierarchy is empty, then [^root() == shoot();]]

[Copy constructors for all hierarchy types defined in this clause copy the allocator argument from their respective first parameters. All other constructors for these hierarchy types take an =Allocator&= argument (20.1.5). A copy of this argument is used for any memory allocation performed, by these constructors and by all member functions, during the lifetime of each hierarchy object. In all hierarchy types defined in this clause, the member =get_allocator()= returns a copy of the Allocator object used to construct the hierarchy.
]

[The member class template =rebind= in the table above is effectively a typedef template: if the name =Hierarchy= is bound to =SomeHierarchy<T>=, then =Hierarchy::rebind<U>::other= is the same type as =SomeHierarchy<U>=. Additionally, because of the related assertion, given =SomeHierarchy<T,R0,...,Rn>= for all template arguments present is bound to the name =Hierarchy=, then =Hierarchy::rebind<U>::other= is the same type as =SomeHierarchy<U,S0,...,Sn>= such that the types =S0= through =Sn= are the same as =R0= through =Rn=, respectively, when =U= is the same type as =T=.
]

[A hierarchy satisfying the requirements shown in Table 3 is called a /mutable hierarchy/. In Table 3, =X= denotes a hierarchy class, =a= denotes a value of =X=, =c= denotes a valid, non-on-top cursor satisfying input cursor requirements, =p= denotes a valid, non-on-top cursor to =a=, =q= denotes a valid, dereferenceable cursor to =a=, and =t= denotes a value of =X::value_type=.

    [table:table3 Mutable hierarchy requirements
        [[expression]
         [return type]
         [assertion/note[br]
            pre/post-condition]
         [complexity]]
        [[[^a.insert(p,t)]]
         [=cursor=]
         [inserts a copy of =t= before =p=]
         [(Note A)]]
        [[[^a.clear(q)]]
         [=void=]
         [deletes the subtree of =q= and the element =q= points to.[br]
            pre: =q= is dereferenceable.]
         [Should be at worst linear in the the number of elements in the subtree of =q= plus the distance to =q='s parent's =end()=.]]
        [[[^a.clear()]]
         [=void=]
         [=while (a.size()) clear(a.begin());=[br]
            post: [^a.size() == 0]]
         [(Note A)]]
    ]

Notes: Those entries marked "(Note A)" should have at worst linear complexity. See the individual hierarchy containers for specific complexity.]

[The cursor returned from =a.insert(p,t)= points to the copy of =t= inserted into =a=. Its parent cursor is the same as that of =p=.]

]

[endsect] [/req]

[section:plain Plain hierarchies [label tr.hierarchy.plain]]

[ordered_list

[A hierarchy is called plain hierarchy if its cursor and const_cursor types satisfy the requirements of a plain cursor.]

[The library provides one native kind of plain hierarchy, nary_tree, and a hierarchy adaptor that in turn yields a plain hierarchy, forest_tree.]

[For a mutable plain hierarchy, the following expressions as shown in Table 4, is additionally required to be valid:

    [table:table4 Plain hierarchy requirements
        [[expression]
         [return type]
         [assertion/note[br]
            pre/post-condition]
         [complexity]]
        [[[^a.insert(p,c)]]
         [=cursor=]
         [inserts a copy of the subtree of =c= before =p=.[br]
            pre: =c= is dereferenceable.]
         [Should be at worst linear in the the number of elements in the subtree of =c= plus the distance to =p='s parent's =end()=.]]
        [[[^a.insert_above(p,t)]]
         [=cursor=]
         [inserts a copy of =t= as child of =p='s parent and new parent of =p= and its siblings.[br]
            pre: =c= is dereferenceable.]
         [Linear in the the number =p='s siblings.]]
    ]
]

[The cursor returned from =a.insert(p,c)= points to the copy of the element that =c= points to, inserted into =a=. Its parent cursor is the same as that of =p=.]

]

[endsect] [/plain]

[section:multiway Multiway hierarchies [label tr.hierarchy.multiway]]

[ordered_list

[A hierarchy is called multiway hierarchy if its =cursor= and =const_cursor= types satisfy the requirements of a multiway cursor.]

[The library provides one native kind of multiway hierarchy, =binary_tree=, and a hierarchy adaptor that in turn yields a multiway hierarchy, =multiway_tree=.]

[For a mutable multiway hierarchy, the semantics of some expressions from Table 3 are modified as shown in Table 5.

    [table:table5 Multiway hierarchy requirements
        [[expression]
         [return type]
         [assertion/note[br]
            pre/post-condition]
         [complexity]]
        [[[^a.clear(q)]]
         [=void=]
         [deletes the subtree of =q=.[br]
If =q= is dereferenceable, the expression also deletes the element =q= points to.[br]
If =q= is past-the-end, the expression deletes the element =q='s predecessor points to.[br]
If after either of these steps =q= has only a non-empty past-the-end child, that child's children become =q='s children instead. Finally, that child is deleted.[br]
pre: =q= is internal.]
         [Should be at worst linear in the the number of elements in the subtree of =c= plus the distance to =p='s parent's =end()=.]]
    ]
]

]

[endsect] [/multiway]

[section:tree Trees [label tr.hierarchy.tree]]

[ordered_list

[
Headers =<binary_tree>=, =<nary_tree>=, =<forest_tree>=, and =<multiway_tree>=.

[*Header =<binary_tree>= synopsis]

``
namespace std {
namespace tr2 {
  template <class T, class Alloc = std::allocator<T> >
    class binary_tree;

  template <class T, class Alloc>
    bool operator==(  binary_tree<T, Alloc> const& x,
                      binary_tree<T, Alloc> const& y);
  template <class T, class Alloc>
    bool operator!=(  binary_tree<T, Alloc> const& x,
                      binary_tree<T, Alloc> const& y);
  template <class T, class Alloc>
    void swap(  binary_tree<T, Alloc>& x,
                binary_tree<T, Alloc>& y);
  namespace inorder {
  template <class Tp, class Alloc>
    inorder::iterator<binary_tree<Tp, Alloc>::cursor>
      begin(binary_tree<Tp, Alloc>& h);
  template <class Tp, class Alloc>
    inorder::iterator<binary_tree<Tp, Alloc>::const_cursor>
      cbegin(binary_tree<Tp, Alloc> const& h);
  } // namespace inorder

} // namespace tr2
} // namespace std
``

[*Header =<nary_tree>= synopsis]

``
namespace std {
namespace tr2 {
  template <class T, class Alloc = std::allocator<T> >
    class nary_tree;

  template <class T, class Alloc>
    bool operator==(  binary_tree<T, Alloc> const& x,
                      binary_tree<T, Alloc> const& y);
  template <class T, class Alloc>
    bool operator!=(  binary_tree<T, Alloc> const& x,
                      binary_tree<T, Alloc> const& y);
  template <class T, class Alloc>
  void swap(  nary_tree<T, Alloc>& x,
              nary_tree<T, Alloc>& y);
  namespace inorder {
  template <class T, class Alloc>
    inorder::iterator<binary_tree<T, Alloc>::cursor>
      begin(binary_tree<T, Alloc>& h);
  template <class T, class Alloc>
    inorder::iterator<binary_tree<T, Alloc>::const_cursor>
      cbegin(binary_tree<T, Alloc> const& h);
  } // namespace inorder
} // namespace tr2
} // namespace std
``

[*Header =<forest_tree>= synopsis]

``
namespace std {
namespace tr2 {
  template <class T, class Hierarchy = binary_tree<T> >
    class forest_tree;

  template <class T, class Hierarchy>
    bool operator==(  forest_tree<T, Hierarchy> const& x,
                      forest_tree<T, Hierarchy> const& y);
  template <class T, class Alloc>
    bool operator!=(  forest_tree<T, Hierarchy> const& x,
                      forest_tree<T, Hierarchy> const& y);
  template <class T, class Hierarchy>
  void swap(  forest_tree<T, Hierarchy>& x,
              forest_tree<T, Hierarchy>& y);
  namespace inorder {
  template <class T, class Hierarchy>
    inorder::iterator<forest_tree<T, Hierarchy>::cursor>
      begin(forest_tree<T, Hierarchy>& h);
  template <class T, class Alloc>
    inorder::iterator<forest_tree<T, Hierarchy>::const_cursor>
      cbegin(forest_tree<T, Hierarchy> const& h);
  } // namespace inorder
} // namespace tr2
} // namespace std

``

[*Header =<multiway_tree>= synopsis]

``
namespace std {
namespace tr2 {
  template <class T, class Hierarchy = nary_tree< std::vector<T> > >
    class multiway_tree;

  template <class T, class Hierarchy>
    bool operator==(  multiway_tree<T, Hierarchy> const& x,
                      multiway_tree<T, Hierarchy> const& y);
  template <class T, class Alloc>
    bool operator!=(  multiway_tree<T, Hierarchy> const& x,
                      multiway_tree<T, Hierarchy> const& y);
  template <class T, class Hierarchy>
    void swap(  multiway_tree<T, Hierarchy>& x,
                multiway_tree<T, Hierarchy>& y);
  namespace inorder {
  template <class T, class Hierarchy>
    inorder::iterator<multiway_tree<T, Hierarchy>::cursor>
      begin(multiway_tree<T, Hierarchy>& h);
  template <class T, class Alloc>
    inorder::iterator<multiway_tree<T, Hierarchy>::const_cursor>
      cbegin(multiway_tree<T, Hierarchy> const& h);
  } // namespace inorder
} // namespace tr2
} // namespace std

``
]

]

[include tr-hierarchy-bintree.qbk]
[include tr-hierarchy-narytree.qbk]

[section:adaptors Hierarchy adaptors [label tr.hierarchy.adaptors]]

[include tr-hierarchy-foresttree.qbk]
[include tr-hierarchy-multiwaytree.qbk]
[include tr-hierarchy-augment.qbk]
[include tr-hierarchy-balance.qbk]

[endsect] [/adaptors]

[endsect] [/tree]

[endsect] [/hierarchy]

[endsect] [/containers]
