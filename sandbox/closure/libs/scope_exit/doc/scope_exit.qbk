
[library Boost.ScopeExit
    [quickbook 1.5]
    [version 1.1.0]
    [copyright 2006-2012 Alexander Nasonov, Lorenzo Caminiti]
    [purpose execute arbitrary code at scope exit]
    [license
        Distributed under the Boost Software License, Version 1.0
        (see accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
    [authors [Nasonov, Alexander] [Caminiti, Lorenzo]]
    [category utility]
    [id scope_exit]
    [dirname scope_exit]
]

[def __scope_exit__ [link scope_exit ScopeExit]]
[def __Tutorial__ [link scope_exit.Tutorial Tutorial]]
[def __No_Variadic_Macros__ [link scope_exit.No_Variadic_Macros No Variadic Macros]]
[def __Reference__ [@reference.html Reference]]
[def __lambda__ [@../../../../libs/lambda/index.html Boost.Lambda]]
[def __phoenix__ [@../../../../libs/phoenix/index.html Boost.Phoenix]]
[def __typeof__ [@../../../../libs/typeof/index.html Boost.Typeof]]
[def __typeof_emulation__ [@../../../../libs/typeof/index.html typeof emulation]]
[def __typeof_REGISTER_TYPE__ [@../../../../doc/html/typeof/refe.html#typeof.regtype BOOST_TYPEOF_REGISTER_TYPE]]
[def __typeof_REGISTER_TEMPLATE__ [@../../../../doc/html/typeof/refe.html#typeof.regtemp BOOST_TYPEOF_REGISTER_TEMPLATE]]
[def __pp__ [@../../../../libs/preprocessor/index.html Boost.Preprocessor]]
[def __pp_seq__ [@../../../../libs/preprocessor/index.html Boost.Preprocessor sequence]]
[def __ptr_container__ [@../../../../libs/ptr_container/doc/ptr_container.html Boost Pointer Container Library]]
[def __multi_index__ [@../../../../libs/multi_index/doc/index.html Boost Multi-Index Containers Library]]
[def __scope_guard__ [@http://www.ddj.com/dept/cpp/184403758 ScopeGuard]]
[def __D__ [@http://www.digitalmars.com/d/index.html D]]
[def __D_scope_exit__ [@http://www.digitalmars.com/d/2.0/statement.html#ScopeGuardStatement scope(exit)]]
[def __RAII__ [@http://www.research.att.com/~bs/glossary.html#Gresource-acquisition-is-initialization RAII]]
[def __strong_guarantee__ [@http://www.research.att.com/~bs/glossary.html#Gstrong-guarantee strong guarantee]]

[import ../test/world.cpp]
[import ../test/world_seq.cpp]
[import ../test/world_commit.cpp]
[import ../test/world_commit_this.cpp]
[import ../test/world_commit_void.cpp]
[import ../test/world_all.cpp]
[import ../test/world_commit_tpl.cpp]
[import ../test/world_commit_lambda.cpp]
[import ../example/try_catch.cpp]
[import ../example/scope_guard.cpp]

['
Alexander Nasonov is the original author.
Lorenzo Caminiti added support for variadic macros, capture of `this_`, no captures, and `BOOST_SCOPE_EXIT_ALL`.
]

This library allows to execute arbitrary code when the enclosing scope exits.

[section:intro Introduction]

Nowadays, every C++ developer is familiar with the __RAII__ technique.
It binds resource acquisition and release to initialization and destruction of a variable that holds the resource.
But there are times when writing a special class for such variable is not worth the effort.

This is when the __scope_exit__ library comes into play.
Programmers can put resource acquisition directly in their code and next to it, they can write code that releases the resource using this library.
For example:
[footnote
Older versions of this library used a __pp_seq__ to specify the list of captured variable.
While maintaining full backward compatibility, it is now also possible to specify the captured variables as a comma-separated list (which is the preferred syntax).
See the __No_Variadic_Macros__ section for more details.
]

[test_world_commit]

Read the __Tutorial__ section to find out how to write programs with __scope_exit__ or jump to the __Reference__ section.

[endsect]

[section:Getting_Started Getting Started]

This section explains how to setup your system to use this library.

[section Compilers and Platforms]

The library should be usable on any compiler that supports __typeof__ except:

* MSVC 7.1 and 8.0 fail to link if a function with __scope_exit__ is included by multiple translation units.
* GCC 3.3 cannot compile __scope_exit__ inside a template (see [@http://lists.boost.org/Archives/boost/2007/02/116235.php] for more details).

The authors tested the library on GCC 3.3, 3.4, 4.1, 4.2, 4.5.3 (with and without C++11 features [^-std=c++0x]), MSVC 8.0, and Intel 10.1 under Linux, Cygwin, and Windows 7.

[endsect]

[section Installation]

This library is composed of header files only.
Therefore there is no pre-compiled object file which needs to be installed.
Programmers can simply instruct the compiler where to find the library header files (`-I` option on GCC, `/I` option on MSVC, etc) and compile code using the library.

The library implementation uses __typeof__ to automatically deduce the types of the __scope_exit__ captured variables (see the __Tutorial__ section).
In order to compile code in __typeof_emulation__ mode, all types should be properly registered with __typeof_REGISTER_TYPE__ or __typeof_REGISTER_TEMPLATE__ macros, or appropriate __typeof__ headers should be included.

When using comma-separated lists to specify captures (see the __No_Variadic_Macros__ section), make sure that the `BOOST_PP_VARIADICS` macro is defined (either automatically by __pp__ or manually using your compiler options `-D`, `/D`, etc).
[footnote
It is not sufficient for the `BOOST_NO_VARIADIC_MACROS` macro to be undefined, the `BOOST_PP_VARIADICS` macro must be defined.
]

[endsect]

[endsect]

[section:Tutorial Tutorial]

This section illustrates how to use this library.

[section Capturing Variables]

Imagine that you want to make many modifications to data members of the `world` class in the `world::add_person` function.
You start with adding a new `person` object to a vector of persons:

    void world::add_person(person const& a_person) {
        bool commit = false;

        persons_.push_back(a_person);           // (1) direct action
        ...

Some operations down the road may throw an exception and all changes to involved objects should be rolled back.
This all-or-nothing semantic is also known as __strong_guarantee__.

In particular, the last added person must be deleted from `persons_` if the function throws.
All you need is to define a delayed action (release of a resource) right after the direct action (resource acquisition).
For example (see also [@../../test/world_commit.cpp "world_commit.cpp"]):

[test_world_commit]

The block below point `(1)` is a __scope_exit__ declaration.
Unlike point `(1)`, an execution of the __scope_exit__ body will be delayed until the end of the current scope. In this case it will be executed either after point `(4)` or on any exception.

The __scope_exit__ declaration starts with the [macroref BOOST_SCOPE_EXIT] macro invocation which accepts a comma-separated list of captured variables (a __pp_seq__ is also accepted here for compilers that do not support variadic macros and for backward compatibility with older versions of this library, see the __No_Variadic_Macros__ section).
If a capture starts with the ampersand sign `&`, a reference to the captured variable will be available inside the __scope_exit__ body; otherwise, a copy of the variable will be made after the __scope_exit__ declaration at point `(1)` and only the copy will be available inside the body.
On various versions of the GCC compiler, it is necessary to use [macroref BOOST_SCOPE_EXIT_TPL] instead of [macroref BOOST_SCOPE_EXIT] within templates (see later in this section for more details).

In the example above, the variables `commit` and `persons_` are captured by reference because the final value of the `commit` variable should be used to determine whether to execute rollback actions or not and the action should modify the `persons_` object, not its copy.
This is the most common case but passing a variable by value is sometimes useful as well.

Finally, the end of the __scope_exit__ body must be marked by the [macroref BOOST_SCOPE_EXIT_END] macro which must follow the closing curly bracket `}` of the __scope_exit__ body.
On C++11 it is also possible (but not required) to use a semi-column `;` instead of the [macroref BOOST_SCOPE_EXIT_END] macro.
[footnote
The macro [macroref BOOST_SCOPE_EXIT_END] can still be used on C++11 to write portable code that can be used on both C++03 and C++11 compilers.
Using `;` instead of [macroref BOOST_SCOPE_EXIT_END] on C++03 compilers will generate a (possibly cryptic) compiler error.
]

[warning
In order to comply with the STL exception safety requirements, the __scope_exit__ body must never throw (because the library implementation executes the body within a destructor).
]

Consider a more complex example where `world::add_person` can save intermediate states at some point and roll back to the last saved state.
We use `person::evolution_` to store a version of the changes and increment it to cancel all rollback actions associated with those changes.
If we pass a current value of `evolution_` stored in the `checkpoint` variable by value, it remains unchanged within the __scope_exit__ body so we can compare it with the final value of `evolution_`.
If the latter was not incremented since we saved it, the rollback action inside the __scope_exit__ body should be executed.
For example (see also [@../../test/world.cpp "world.cpp"]):

[test_world]

When multiple __scope_exit__ blocks are declared within the same enclosing scope, the __scope_exit__ bodies are executed in the reversed order of their declarations.

[endsect]

[section Capturing The Object `this`]

Within a member function, it is also possible to capture the object `this`.
However, the special symbol `this_` must be used instead of `this` in the __scope_exit__ declaration and body to capture and access the object.
For example (see also [@../../test/world_commit_this.cpp "world_commit_this.cpp"]):

[test_world_commit_this_]

On C++11, it is possible (but not required) to directly use `this` instead of the special symbol `this_`.
[footnote
The special symbol `this_` can still be used on C++11 to write portable code that can be used on both C++03 and C++11 compilers.
Unfortunately, using `this` instead of `this_` on C++03 compilers leads to undefined behaviour (it will likely generate a compiler error but that is not guaranteed).
]
For example (see also [@../../test/world_commit_this.cpp "world_commit_this.cpp"]):

[test_world_commit_this]

It is never possible to capture the object `this_` (or `this`) by reference because C++ does not allow to take a reference to `this`.
If the enclosing member function is constant then the captured object will also be constant, otherwise the captured object will be mutable.

[endsect]

[section Capturing No Variable]

It is possible to declare a __scope_exit__ block that captures no variable.
In this case, the list of captured variables is replaced by the `void` keyword (similarly to the C syntax that allows to declare a function with no parameter using `result_type func(void);`).
[footnote
Unfortunately, it is not possible to simply invoke the __scope_exit__ macro with no parameters `BOOST_SCOPE_EXIT()` because the preprocessor cannot detect emptiness of a macro parameter when the parameter can start with a non-alphanumeric symbol (which is the case when capturing a variable by reference `&variable`).
]
For example, this can be useful when the __scope_exit__ body only needs to access global variables (see also [@../../test_world_commit_void.cpp "world_commit_void.cpp"]):

[test_world_commit_void]

This same syntax is supported for both compilers with and without variadic macro support.

[endsect]

[section Capturing All Variables (C++11 Only)]

On C++11 compliers, it is also possible to capture all the variables in scope without naming them one by one using the special macro [macroref BOOST_SCOPE_EXIT_ALL] instead of [macroref BOOST_SCOPE_EXIT].
[footnote
The [macroref BOOST_SCOPE_EXIT_ALL] macro is only defined on C++11 compilers.
Using [macroref BOOST_SCOPE_EXIT_ALL] on C++03 compilers will generate a (possibly cryptic) compiler error.
]

Following the same syntax adopted by C++11 lambdas, the [macroref BOOST_SCOPE_EXIT_ALL] macro accepts a comma-separated list of captures which must start with either `&` or `=` to capture all variables in scope respectively by reference or by value (note that no variable name is specified by these leading captures).
Additional captures of specific variables can follow the leading `&` or `=` and they will override the default reference or value captures.
For example (see also [@../../test_world_all.cpp "world_all.cpp"]):

[test_world_all]

The first __scope_exit__ declaration captures all variables in scope by reference but `checkpoint` and `this_` which are explicitly captured by value (in particular, `p` and `persons_` are captured by reference).
The second __scope_exit__ declaration instead captures all variables in scope by value but `p` which is captured by reference (in particular, `checkpoint`, `prev_id`, and `this` are captured by value).

[warning
Again, in order to comply with the STL exception safety requirements, the __scope_exit__ body must never throw.
]

[endsect]

[section GCC Template Workaround]

Various versions of the GCC compiler do not compile [macroref BOOST_SCOPE_EXIT] inside templates (see the __Reference__ section for more information).
[footnote
GCC versions compliant with C++11 do not present this issue and given that [macroref BOOST_SCOPE_EXIT_ALL] is only available on C++11 compilers, there is no need for a `BOOST_SCOPE_EXIT_ALL_TPL` macro.
]
As a workaround, [macroref BOOST_SCOPE_EXIT_TPL] should be used instead of [macroref BOOST_SCOPE_EXIT] in these cases:

[test_world_commit_tpl]

The [macroref BOOST_SCOPE_EXIT_TPL] macro has the exact same syntax of [macroref BOOST_SCOPE_EXIT].

[warning
Again, in order to comply with the STL exception safety requirements, the __scope_exit__ body must never throw.
]

[endsect]

[endsect]

[section Annex: Alternatives]

This section presents some alternatives and work related to __scope_exit__.

[section Try-Catch]

This is an example of using a badly designed `file` class. 
An instance of `file` does not close the file in its destructor, a programmer is expected to call the `close` member function explicitly.
For example (see also [@../../example/try_catch.cpp "try_catch.cpp"]):

[example_try_catch_bad]

Note the following issues with this approach:

* The `passwd` object is defined outside of the `try` block because this object is required inside the `catch` block to close the file.
* The `passwd` object is not fully constructed until after the `open`
member function returns.
* If opening throws, the `passwd.close()` should not be called, hence the call to `passwd.is_open()`.

The __scope_exit__ approach does not have any of these issues.
For example (see also [@../../example/try_catch.cpp "try_catch.cpp"]):

[example_try_catch_good]

[endsect]

[section RAII]

__RAII__ is absolutely perfect for the `file` class introduced above.
Use of a properly designed `file` class would look like:

	try {
	    file passwd("/etc/passwd");
	    // ...
	} catch(...) {
	    std::clog << "could not get user info" << std::endl;
	    throw;
	}

However, using __RAII__ to build up a __strong_guarantee__ could introduce a lot of non-reusable __RAII__ types.
For example:

	persons_.push_back(a_person);
	pop_back_if_not_commit pop_back_if_not_commit_guard(commit, persons_);

The `pop_back_if_not_commit` class is either defined out of the scope or as a local class:

	class pop_back_if_not_commit {
	    bool commit_;
	    std::vector<person>& vec_;
	    // ...
	    ~pop_back_if_not_commit() {
	        if(!commit_) vec_.pop_back();
	    }
	};

In some cases __strong_guarantee__ can be accomplished with standard utilities:

	std::auto_ptr<Person> superman_ptr(new superman());
	persons_.push_back(superman_ptr.get());
	superman_ptr.release(); // persons_ successfully took ownership

Or with specialized containers such as __ptr_container__ or __multi_index__.

[endsect]

[section Scope Guards]

Imagine that a new currency rate is introduced before performing a transaction:

[example_scope_guard_decl]
	
If the transaction does not complete, the currency must be erased from `rates`.
This can be done with __scope_guard__ and __lambda__ (or __phoenix__):
	
    using namespace boost::lambda;

    ON_BLOCK_EXIT(
        if_(currency_rate_inserted && !_1) [
            bind(
                static_cast<
                    std::map<std::string, double>::size_type 
                    (std::map<std::string, double>::*)(std::string const&)
                >(&std::map<std::string, double>::erase)
              , &rates
              , currency
            )
        ]
      , boost::cref(commit)
      );

    // ...

    commit = true;

Note the following issues with this approach:

* __lambda__ expressions are hard to write correctly (e.g., overloaded functions must be explicitly casted, as demonstrated in the example above).
* The condition in the `if_` expression refers to `commit` variable indirectly through the `_1` placeholder reducing readability.
* Setting a breakpoint inside `if_[...]` requires in-depth knowledge of __lambda__ and debugging techniques.

This code will look much better with C++11 lambdas:

    ON_BLOCK_EXIT(
        [currency_rate_inserted, &commit, &rates, &currency]() -> void
        {
            if(currency_rate_inserted && !commit) rates.erase(currency);
        }
    );
    
    // ...
    
    commit = true;

With __scope_exit__ we can simply do the following (see also [@../../example/scope_guard.cpp "scope_guard.cpp"]):

[example_scope_guard_exit]

[endsect]

[section The D Programming Language]

__scope_exit__ is similar to __D_scope_exit__ feature built into the __D__ programming language.

A curious reader may notice that the library does not implement `scope(success)` and `scope(failure)` of the __D__ language.
Unfortunately, these are not possible in C++ because failure or success conditions cannot be determined by calling `std::uncaught_exception` (see [@http://www.gotw.ca/gotw/047.htm Guru of the Week #47] for more details about `std::uncaught_exception` and if it has any good use at all).
However, this is not a big problem because these two __D__'s constructs can be expressed in terms of __D_scope_exit__ and a `bool commit` variable as explained in the __Tutorial__ section.

[endsect]

[section C++11 Lambdas]

Using C++11 lambdas, it is relatively easy to implement the __scope_exit__ construct.
For example (see also [@../../test/world_commit_lambda.cpp "world_commit_lambda.cpp"]):

[test_world_commit_lambda]

However, this library allows to program the __scope_exit__ construct in a way that is portable between C++03 and C++11 compilers.

[endsect]

[endsect]

[section:No_Variadic_Macros Annex: No Variadic Macros]

This section presents an alternative syntax for compilers without variadic macro support.

[section Sequence Syntax]

Most modern compilers support variadic macros (notably, these include GCC, MSVC, and all C++11 compilers).
However, in the rare case that programmers need to use __scope_exit__ on a complier that does not support variaidc macros, this library also allows to specify the capture list using a __pp_seq__:

    (capture1) (capture2) ...

Instead of a comma-separated list:

    capture1, capture2, ...

For example, the following syntax is accepted on all compilers with and without variadic macro support (see also [@../../test/world_seq.cpp "world_seq.cpp"]):

[test_world_seq]

Furthermore, older versions of this library used to only support the __pp_seq__ syntax so the above syntax is also supported for backward compatibility.
However, in the current version of this library and on compilers with variadic macro support, the following syntax is preferred (see also [@../../test/world.cpp "world.cpp"]):
[footnote
Note that on compilers with variadic macro support, the same [macroref BOOST_SCOPE_EXIT] macro accepts both a comma-separated list and a __pp_seq__ for specifying the capture list.
The same it true also for the [macroref BOOST_SCOPE_EXIT_TPL] and [macroref BOOST_SCOPE_EXIT_ALL] macros.
]

[test_world]

An empty capture list is always specified using `void` on compilers with and without variaidc macro support.

[endsect]

[section Examples]

The following is a list of most of the examples presented in this documentation reprogrammed using the __pp_seq__ syntax instead of comma-separated lists:
[@../../test/world_commit_seq.cpp "world_commit_seq.cpp"],
[@../../test/world_commit_this_seq.cpp "world_commit_this_seq.cpp"],
[@../../test/world_all_seq.cpp "world_all_seq.cpp"],
[@../../test/world_commit_tpl_seq.cpp "world_commit_tpl_seq.cpp"],
[@../../example/try_catch_seq.cpp "try_catch_seq.cpp"],
[@../../example/scope_guard_seq.cpp "scope_guard_seq.cpp"].

[endsect]

[endsect]


[xinclude reference.xml]

[section Acknowledgements]

['In chronological order.]

Maxim Yegorushkin for sharing code where he used a local struct to clean up resources.

Andrei Alexandrescu for pointing out the __D_scope_exit__ construct of the __D__ programming language.

Pavel Vozenilek and Maxim Yanchenko for reviews of early drafts of the library.

Steven Watanabe for his valuable ideas.

Jody Hagins for good comments that helped to significantly improve the documentation.

Richard Webb for testing the library on MSVC compiler.

Adam Butcher for a workaround to error C2355 when deducing the type of `this` on some MSVC versions.

[endsect]
