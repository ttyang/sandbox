[/=============================================================================
    Copyright (C) 2011 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:simple_assoc_node_base `simple_associative_node_base`]

[section Synopsis]
[reference__simple_associative_node_base]
[endsect]

[section Description]
The __simple_associative_node__ class template inherits its functionality from
this class template.  They differ only with regard to template parameters: the
__simple_associative_node__ class template is meant to be used directly as a
data structure, while `simple_associative_node_base` is more suitable as a base
class template from which __Tree_Node__ adaptor class templates can derive via
the __simple_associative_node_gen__ __Type_Generator__.

[important
    This component depends on __Boost_Utility_ContainerGen__, which is not yet
    a part of Boost.  For now, you must perform a Subversion checkout from the
    __SVN_Trac__.
]
[endsect]

[section:definition Where defined]
``
#include <__boost_tree_node_simple_associative_node_hpp__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Requirements][Default]]
    [
        [`Derived`]
        [The most descendant type that will inherit from this one.]
        []
        []
    ]
    [
        [`Key`]
        [The key type.]
        []
        []
    ]
    [
        [`Data`]
        [The data type.]
        []
        []
    ]
    [
        [`AssociativeContainerSelector`]
        [
            The type that determines the internal map types whose mapped types
            are the same as the pointer type.
        ]
        [
            It must be a type for which __associative_container_gen__ returns
            a valid container.
        ]
        []
    ]
]
[endsect]

[section:model_of Model of]

  * __Associative_Tree_Node__
  * __Base_Tree_Node__
  * __Cloneable_Tree_Node__

[endsect]

[section:public_bases Public Base Classes]
__shared_tree_node_base__
[endsect]

[section Members]
[table
    [[Name][Expression][Scope][Where defined]]
    [
        [Key type]
        [`typename traits::key_type`]
        [`public`]
        [__Associative_Tree_Node__]
    ]
    [
        [Data type]
        [`typename traits::data_type`]
        [`public`]
        [__Tree_Node__]
    ]
    [
        [Pointer type]
        [`pointer`]
        [`public`]
        [__Tree_Node__]
    ]
    [
        [Pointer-to-const type]
        [`const_pointer`]
        [`public`]
        [__Tree_Node__]
    ]
    [
        [Child iterator type]
        [`child_iterator`]
        [`public`]
        [__Associative_Tree_Node__]
    ]
    [
        [Immutable child iterator type]
        [`const_child_iterator`]
        [`public`]
        [__Associative_Tree_Node__]
    ]
    [
        [Default constructor]
        [`simple_associative_node_base();`]
        [`protected`]
        [__Base_Tree_Node__]
    ]
    [
        [Constructor with data]
        [
            `explicit
            simple_associative_node_base(typename traits::data_type const&);`
        ]
        [`protected`]
        [__Base_Tree_Node__]
    ]
    [
        [Clone]
        [`pointer clone() const;`]
        [`public`]
        [__Cloneable_Tree_Node__]
    ]
    [
        [Data access]
        [`typename traits::data_type const& get_data() const;`]
        [`public`]
        [__Tree_Node__]
    ]
    [
        [Data access]
        [`typename traits::data_type& get_data();`]
        [`public`]
        [__Tree_Node__]
    ]
    [
        [Parent access]
        [`const_pointer get_parent() const;`]
        [`public`]
        [__Tree_Node__]
    ]
    [
        [Parent access]
        [`pointer get_parent();`]
        [`public`]
        [__Tree_Node__]
    ]
    [
        [Child creation with data]
        [
            `pointer add_child(typename traits::key_type const&,
            typename traits::data_type const&);`
        ]
        [`public`]
        [__Associative_Tree_Node__]
    ]
    [
        [Child creation]
        [`pointer add_child(typename traits::key_type const&);`]
        [`public`]
        [__Associative_Tree_Node__]
    ]
    [
        [Child copy creation]
        [
            `pointer add_child_copy(typename traits::key_type const&,
            const_pointer const&);`
        ]
        [`public`]
        [__Associative_Tree_Node__]
    ]
    [
        [Children range begin access]
        [`const_child_iterator get_child_begin() const;`]
        [`public`]
        [__Tree_Node__]
    ]
    [
        [Children range begin access]
        [`child_iterator get_child_begin();`]
        [`public`]
        [__Tree_Node__]
    ]
    [
        [Children range past-the-end access]
        [`const_child_iterator get_child_end() const;`]
        [`public`]
        [__Tree_Node__]
    ]
    [
        [Children range past-the-end access]
        [`child_iterator get_child_end();`]
        [`public`]
        [__Tree_Node__]
    ]
    [
        [Child search]
        [
            `const_child_iterator
            find_child(typename traits::key_type const&) const;`
        ]
        [`public`]
        [__Associative_Tree_Node__]
    ]
    [
        [Child search]
        [`child_iterator find_child(typename traits::key_type const&);`]
        [`public`]
        [__Associative_Tree_Node__]
    ]
    [
        [Child search range]
        [
            [^_std_pair_<const_child_iterator,const_child_iterator>
            find_children(typename traits::key_type const&) const;]
        ]
        [`public`]
        [__Associative_Tree_Node__]
    ]
    [
        [Child search range]
        [
            [^_std_pair_<child_iterator,child_iterator>
            find_children(typename traits::key_type const&);]
        ]
        [`public`]
        [__Associative_Tree_Node__]
    ]
    [
        [Remove children]
        [`std::size_t remove_children(typename traits::key_type const&);`]
        [`public`]
        [__Associative_Tree_Node__]
    ]
    [
        [Remove all children]
        [`void remove_all_children();`]
        [`public`]
        [__Tree_Node__]
    ]
]
[endsect] [/ Members]

[endsect] [/ simple_associative_node]

