[/=============================================================================
    Copyright (C) 2011-2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:with_rb_flag_base
    `with_red_black_flag_base<Derived,BaseGenerator,T1,T2>`
]

[section Description]
The __tree_node_with_red_black_flag__ class template inherits its functionality
from this class template.  They differ only with regard to template parameters:
the __tree_node_with_red_black_flag__ class template is meant to be used
directly as a data structure, while `with_red_black_flag_base` is more suitable
as a base class template from which other __Tree_Node__ adaptor class templates
can derive via the __tree_node_with_red_black_flag_base_gen__
__Base_Type_Generator__.
[endsect]

[section:definition Where defined]
``
#include <__with_red_black_flag__header__>
``

Forward-declared:

``
#include <__with_red_black_flag__forward_header__>
``

To register under __Boost_Typeof__:

``
#include <__with_red_black_flag__typeof_header__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description]]
    [
        [`Derived`]
        [The most descendant type that will inherit from this one.]
    ]
    [
        [`BaseGenerator`]
        [
            The __Base_Type_Generator__ from whose return type
            `with_red_black_flag_base` will inherit.
        ]
    ]
    [
        [`T1`]
        [The key type if `T2` is not `void`; the user data type otherwise.]
    ]
    [
        [`T2`]
        [The user data type if not `void`; ignored otherwise.]
    ]
]
[endsect]

[section:model_of Model of]

  * __Associative_Tree_Node__ if `T2` is not `void`;
    __Non_Associative_Tree_Node__ otherwise
  * __Base_Tree_Node__
  * any other concept that the return type of `BaseGenerator` models

[endsect]

[section:public_bases Public Base Classes]
[reference__with_red_black_flag_base__bases]
[endsect]

[section:members Members]
In addition to those inherited from the return type of `BaseGenerator`, the
following members are defined:

[table
    [[Name][Definition][Scope][Description]]
    [
        [Emplacement constructor]
        [[reference__with_red_black_flag_base__emplacement_ctor]]
        [`protected`]
        [Defined by the __Tree_Node__ concept.]
    ]
    [
        [Emplacement constructor with allocator]
        [[reference__with_red_black_flag_base__emplacement_ctor_w_allocator]]
        [`protected`]
        [
            Constructs a `with_red_black_flag_base` object, initializing its
            user data with the trailing arguments.  Child nodes will be
            subsequently created using the specified allocator (or a copy if
            `const`).
        ]
    ]
    [
        [Derived copy constructor]
        [[reference__with_red_black_flag_base__derived_copy_ctor]]
        [`protected`]
        [Defined by the __Base_Tree_Node__ concept.]
    ]
    [
        [Derived copy constructor with allocator]
        [[reference__with_red_black_flag_base__derived_copy_ctor_w_allocator]]
        [`protected`]
        [
            Constructs a `with_red_black_flag_base` object as a copy of the
            specified one.  Child nodes will be subsequently created using the
            specified allocator (or a copy if `const`).
        ]
    ]
    [
        [Derived move constructor]
        [``
            with_red_black_flag_base(Derived&& source);
        ``]
        [`protected`]
        [Defined by the __Base_Tree_Node__ concept.]
    ]
    [
        [Derived move constructor with allocator]
        [``
            with_red_black_flag_base(
                Derived&& source
              , typename traits::allocator_reference allocator
            );
        ``]
        [`protected`]
        [
            Constructs a `with_red_black_flag_base` object and moves the
            contents of the specified node to the new one.  Child nodes
            will be subsequently created using the specified allocator
            (or a copy if `const`).
        ]
    ]
    [
        [Red flag query]
        [[reference__with_red_black_flag_base__key_value_operator__red]]
        [`public`]
        [
            Returns `true` if the flag is set to red, `false` if it is set to
            black.
        ]
    ]
    [
        [Black flag query]
        [[reference__with_red_black_flag_base__key_value_operator__black]]
        [`public`]
        [
            Returns `true` if the flag is set to black, `false` if it is set to
            red.
        ]
    ]
    [
        [Red flag setting]
        [[reference__with_red_black_flag_base__set_red_flag]]
        [`public`]
        [
            Sets the flag to red if the argument evaluates to `true`; sets the
            flag to black if the argument evaluates to `false`.
        ]
    ]
    [
        [Black flag setting]
        [[reference__with_red_black_flag_base__set_black_flag]]
        [`public`]
        [
            Sets the flag to black if the argument evaluates to `true`; sets
            the flag to red if the argument evaluates to `false`.
        ]
    ]
]
[endsect]

[section:non_members Non-members]
In addition to those inherited from the return type of `BaseGenerator`, the
following non-members are defined.

[table
    [[Name][Definition][Where defined]]
    [
        [Red flag key-value read-only access]
        [[reference__with_red_black_flag_base__at_red_flag_key]]
        [__Tree_Node__]
    ]
    [
        [Black flag key-value read-only access]
        [[reference__with_red_black_flag_base__at_black_flag_key]]
        [__Tree_Node__]
    ]
    [
        [Red flag key-value modification]
        [[reference__with_red_black_flag_base__put__red]]
        [__Tree_Node__]
    ]
    [
        [Black flag key-value modification]
        [[reference__with_red_black_flag_base__put__black]]
        [__Tree_Node__]
    ]
]
[endsect]

[endsect] [/ with_red_black_flag_base]

