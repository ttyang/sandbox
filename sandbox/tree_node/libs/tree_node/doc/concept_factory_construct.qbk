[/=============================================================================
    Copyright (C) 2011 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:factory_constructible Factory-Constructible Tree Node]

[section Description]
Models of this concept allow the __tree_node_factory__ facade to create objects
of their instantiated types.  In practice, models of this concept must either
declare their respective constructors in `public` scope or declare the
__tree_node_factory__ to be a `friend struct`.
[endsect]

[section Refinement of]
__Tree_Node__
[endsect]

[variablelist Notation
    [
        [`Node`]
        [A type that models the [*Factory-Constructible Tree Node] concept.]
    ]
    [
        [`node`]
        [An object of type `Node*`.]
    ]
    [
        [`data`]
        [An object of type `Node::traits::data_type const&`.]
    ]
]

[section:types Associated Types]
No additional types beyond those defined in the __Tree_Node__ concept.
[endsect]

[section:expressions Valid Expressions and Semantics]
In addition to the expressions defined in the __Tree_Node__ concept, the
following expressions must be valid.

[table
    [[Name][Expression][Return Type][Semantics][__Runtime_Complexity__]]
    [
        [Heap-allocated default construction]
        [`new Node()`]
        [`Node*`]
        [Default-constructs a `Node` object on the heap.]
        [Constant]
    ]
    [
        [Heap-allocated construction with data]
        [`new Node(data)`]
        [`Node*`]
        [
            Constructs a `Node` object on the heap that stores the specified
            data.
        ]
        [Constant]
    ]
    [
        [Pointer conversion]
        [`Node::pointer(node)`]
        [`Node::pointer`]
        [
            Converts the specified raw pointer.  If `Node::pointer` is the same
            as `Node*`, then the conversion is trivial; however, if the pointer
            type is a __tr1_shared_ptr__, then the conversion is necessary.
        ]
        [Constant]
    ]
]
[endsect] [/ Valid Expressions and Semantics]

[section Models]

  * __raw_binary_node__
  * __raw_node__
  * __simple_node__
  * __raw_associative_node__
  * __simple_associative_node__
  * __tree_node_with_child_range_access__
  * __tree_node_with_depth__

[endsect]

[endsect] [/ Factory-Constructible Tree Node]

