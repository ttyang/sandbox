[library tree_node
    [quickbook 1.5]
    [version 0.1]
    [authors [Enage, Cromwell D.]]
    [copyright 2011 Cromwell D. Enage]
    [purpose Low-level tree node framework]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[/ General links.]
[def __Runtime_Complexity__ [@http://en.wikipedia.org/wiki/Amortized_analysis Runtime Complexity]]

[/ General concept links.]
[def __Default_Constructible__ [@http://www.sgi.com/tech/stl/DefaultConstructible.html [*Default Constructible]]]
[def __Trivial_Iterator__ [@http://www.sgi.com/tech/stl/trivial.html [*Trivial Iterator]]]
[def __Input_Iterator__ [@http://www.sgi.com/tech/stl/InputIterator.html [*Input Iterator]]]
[def __Forward_Iterator__ [@http://www.sgi.com/tech/stl/ForwardIterator.html [*Forward Iterator]]]
[def __Reverse_Iterator__ [@http://www.sgi.com/tech/stl/ReverseIterator.html [*Reverse Iterator]]]
[def __Bidirectional_Iterator__ [@http://www.sgi.com/tech/stl/BidirectionalIterator.html [*Bidirectional Iterator]]]
[def __Container__ [@http://www.sgi.com/tech/stl/Container.html [*Container]]]
[def __Unary_Function__ [@http://www.sgi.com/tech/stl/UnaryFunction.html [*Unary Function]]]

[/ STL reference links.]
[def __std_pair__ [@http://www.sgi.com/tech/stl/pair.html `std::pair`]]
[def _std_pair_ [@http://www.sgi.com/tech/stl/pair.html std::pair]]

[/ Boost library and installation links.]
[def __Build__ [@boost:more/getting_started.html Build]]
[def __build__ [@boost:more/getting_started.html build]]
[def __Boost_Test__ [@boost:libs/test/doc/index.html [*Boost.Test]]]
[def __SVN_Trac__ [@http://svn.boost.org/ SVN Trac]]
[def __Boost_Utility_ContainerGen__ [@http://svn.boost.org/svn/boost/sandbox/utility-container_gen/libs/utility/container_gen/doc/html/index.html [*Boost.Utility.ContainerGen]]]

[/ Boost concept links.]
[def __Copy_Constructible__ [@boost:libs/utility/CopyConstructible.html [*Copy Constructible]]]
[def __Assignable__ [@boost:libs/utility/Assignable.html [*Assignable]]]
[def __Boolean_Integral_Constant__ [@boost:libs/mpl/doc/refmanual/integral-constant.html [*Boolean Integral Constant]]]

[/ Boost reference links in text.]

[/ Boost reference links in code.]
[def __tr1_enable_shared_from_this__ [@boost:libs/smart_ptr/enable_shared_from_this.html `std::tr1::enable_shared_from_this`]]
[def __mpl_true__ [@boost:libs/mpl/doc/refmanual/bool.html `boost::mpl::true_`]]
[def _mpl_true_ [@boost:libs/mpl/doc/refmanual/bool.html boost::mpl::true_]]
[def __mpl_false__ [@boost:libs/mpl/doc/refmanual/bool.html `boost::mpl::false_`]]
[def _mpl_false_ [@boost:libs/mpl/doc/refmanual/bool.html boost::mpl::false_]]
[def _mpl_equal_to_ [@boost:libs/mpl/doc/refmanual/equal_to.html boost::mpl::equal_to]]
[def _enable_if_ [@boost:libs/utility/enable_if.html `enable_if`]]
[def __container_gen__ [@http://svn.boost.org/svn/boost/sandbox/utility-container_gen/libs/utility/container_gen/doc/html/container_gen/reference/container_gen.html `container_gen`]]
[def __associative_container_gen__ [@http://svn.boost.org/svn/boost/sandbox/utility-container_gen/libs/utility/container_gen/doc/html/container_gen/reference/associative_container_gen.html `associative_container_gen`]]

[/ Boost.TreeNode header and source file links.]
[def __boost_tree_node_raw_binary_node_hpp__ [@../../../../boost/tree_node/raw_binary_node.hpp boost/tree_node/raw_binary_node.hpp]]
[def __boost_tree_node_raw_node_hpp__ [@../../../../boost/tree_node/raw_node.hpp boost/tree_node/raw_node.hpp]]
[def __boost_tree_node_simple_node_hpp__ [@../../../../boost/tree_node/simple_node.hpp boost/tree_node/simple_node.hpp]]
[def __boost_tree_node_raw_associative_node_hpp__ [@../../../../boost/tree_node/raw_associative_node.hpp boost/tree_node/raw_associative_node.hpp]]
[def __boost_tree_node_simple_associative_node_hpp__ [@../../../../boost/tree_node/simple_associative_node.hpp boost/tree_node/simple_associative_node.hpp]]
[def __boost_tree_node_breadth_first_iterator_hpp__ [@../../../../boost/tree_node/breadth_first_iterator.hpp boost/tree_node/breadth_first_iterator.hpp]]
[def __boost_tree_node_pre_order_iterator_hpp__ [@../../../../boost/tree_node/pre_order_iterator.hpp boost/tree_node/pre_order_iterator.hpp]]
[def __boost_tree_node_post_order_iterator_hpp__ [@../../../../boost/tree_node/post_order_iterator.hpp boost/tree_node/post_order_iterator.hpp]]
[def __boost_tree_node_depth_first_iterator_hpp__ [@../../../../boost/tree_node/depth_first_iterator.hpp boost/tree_node/depth_first_iterator.hpp]]
[def __boost_tree_node_in_order_iterator_hpp__ [@../../../../boost/tree_node/in_order_iterator.hpp boost/tree_node/in_order_iterator.hpp]]
[def __boost_tree_node_traversal_state_hpp__ [@../../../../boost/tree_node/traversal_state.hpp boost/tree_node/traversal_state.hpp]]
[def __example_default_unconstructible_type_hpp__ [@../../example/default_unconstructible_type.hpp example/default_unconstructible_type.hpp]]
[def __example_default_unconstructible_type_cpp__ [@../../example/default_unconstructible_type.cpp example/default_unconstructible_type.cpp]]
[def __example_show_functions_hpp__ [@../../example/show_functions.hpp example/show_functions.hpp]]
[def __example_show_functions_cpp__ [@../../example/show_functions.cpp example/show_functions.cpp]]
[def __example_showcase_iterators_hpp__ [@../../example/showcase_iterators.hpp example/showcase_iterators.hpp]]
[def __example_raw_binary_node_cpp__ [@../../example/raw_binary_node.cpp example/raw_binary_node.cpp]]
[def __example_raw_node_cpp__ [@../../example/raw_node.cpp example/raw_node.cpp]]
[def __example_simple_node_cpp__ [@../../example/simple_node.cpp example/simple_node.cpp]]
[def __example_raw_associative_node_cpp__ [@../../example/raw_associative_node.cpp example/raw_associative_node.cpp]]
[def __example_simple_associative_node_cpp__ [@../../example/simple_associative_node.cpp example/simple_associative_node.cpp]]

[/ Boost.TreeNode concept links.]
[def __Tree_Node__ [link tree_node.concepts.tree_node [*Tree Node]]]
[def __Associative_Tree_Node__ [link tree_node.concepts.associative_tree_node [*Associative Tree Node]]]
[def __Non_Associative_Tree_Node__ [link tree_node.concepts.non_assoc_tree_node [*Non-Associative Tree Node]]]
[def __Binary_Tree_Node__ [link tree_node.concepts.binary_tree_node [*Binary Tree Node]]]
[def __N_ary_Tree_Node__ [link tree_node.concepts.nary_tree_node [*N-ary Tree Node]]]
[def __Tree_Node_Iterator__ [link tree_node.concepts.tree_node_iterator [*Tree Node Iterator]]]
[def __Full_Tree_Node_Iterator__ [link tree_node.concepts.full_tree_node_iterator [*Full Tree Node Iterator]]]
[def __Tree_Node_Descendant_Iterator__ [link tree_node.concepts.tree_node_desc_iterator [*Tree Node Descendant Iterator]]]

[/ Boost.TreeNode reference links.]
[def __raw_binary_node__ [link tree_node.reference.raw_binary_node `raw_binary_node`]]
[def _raw_binary_node_ [link tree_node.reference.raw_binary_node raw_binary_node]]
[def __raw_node__ [link tree_node.reference.raw_node `raw_node`]]
[def _raw_node_ [link tree_node.reference.raw_node raw_node]]
[def __simple_node__ [link tree_node.reference.simple_node `simple_node`]]
[def _simple_node_ [link tree_node.reference.simple_node simple_node]]
[def __raw_associative_node__ [link tree_node.reference.raw_associative_node `raw_associative_node`]]
[def _raw_associative_node_ [link tree_node.reference.raw_associative_node raw_associative_node]]
[def __simple_associative_node__ [link tree_node.reference.simple_associative_node `simple_associative_node`]]
[def _simple_associative_node_ [link tree_node.reference.simple_associative_node simple_associative_node]]
[def __breadth_first_iterator__ [link tree_node.reference.breadth_first_iterator `breadth_first_iterator`]]
[def __make_breadth_first_iterator__ [link tree_node.reference.breadth_first_iterator `make_breadth_first_iterator()`]]
[def __make_breadth_first_descendant_iterator__ [link tree_node.reference.breadth_first_iterator `make_breadth_first_descendant_iterator()`]]
[def _breadth_first_iterator_ [link tree_node.reference.breadth_first_iterator breadth_first_iterator]]
[def __pre_order_iterator__ [link tree_node.reference.pre_order_iterator `pre_order_iterator`]]
[def __make_pre_order_iterator__ [link tree_node.reference.pre_order_iterator `make_pre_order_iterator()`]]
[def __make_pre_order_descendant_iterator__ [link tree_node.reference.pre_order_iterator `make_pre_order_descendant_iterator()`]]
[def _pre_order_iterator_ [link tree_node.reference.pre_order_iterator pre_order_iterator]]
[def __post_order_iterator__ [link tree_node.reference.post_order_iterator `post_order_iterator`]]
[def __make_post_order_iterator__ [link tree_node.reference.post_order_iterator `make_post_order_iterator()`]]
[def __make_post_order_descendant_iterator__ [link tree_node.reference.post_order_iterator `make_post_order_descendant_iterator()`]]
[def _post_order_iterator_ [link tree_node.reference.post_order_iterator post_order_iterator]]
[def __depth_first_iterator__ [link tree_node.reference.depth_first_iterator `depth_first_iterator`]]
[def __make_depth_first_iterator__ [link tree_node.reference.depth_first_iterator `make_depth_first_iterator()`]]
[def __make_depth_first_descendant_iterator__ [link tree_node.reference.depth_first_iterator `make_depth_first_descendant_iterator()`]]
[def _depth_first_iterator_ [link tree_node.reference.depth_first_iterator depth_first_iterator]]
[def __in_order_iterator__ [link tree_node.reference.in_order_iterator `in_order_iterator`]]
[def __make_in_order_forward_iterator__ [link tree_node.reference.in_order_iterator `make_in_order_forward_iterator()`]]
[def __make_in_order_reverse_iterator__ [link tree_node.reference.in_order_iterator `make_in_order_reverse_iterator()`]]
[def _in_order_iterator_ [link tree_node.reference.in_order_iterator in_order_iterator]]
[def __traversal_state__ [link tree_node.reference.traversal_state `traversal_state`]]
[def _traversal_state_ [link tree_node.reference.traversal_state traversal_state]]

[/ Autogenerate concept and reference documentation directly from code.]
[/ Bypass Doxygen.]
[import ../../../boost/tree_node/raw_binary_node.hpp]
[import ../../../boost/tree_node/raw_node.hpp]
[import ../../../boost/tree_node/simple_node.hpp]
[import ../../../boost/tree_node/raw_associative_node.hpp]
[import ../../../boost/tree_node/simple_associative_node.hpp]
[import ../../../boost/tree_node/breadth_first_iterator.hpp]
[import ../../../boost/tree_node/pre_order_iterator.hpp]
[import ../../../boost/tree_node/post_order_iterator.hpp]
[import ../../../boost/tree_node/depth_first_iterator.hpp]
[import ../../../boost/tree_node/in_order_iterator.hpp]
[import ../../../boost/tree_node/traversal_state.hpp]
[import ../example/default_unconstructible_type.hpp] [/ example__default_unconstructible_type]
[import ../example/default_unconstructible_type.cpp] [/ example__default_unconstructible_type__definitions]
[import ../example/raw_binary_node.cpp]
[import ../example/raw_node.cpp]
[import ../example/simple_node.cpp]
[import ../example/raw_associative_node.cpp]
[import ../example/simple_associative_node.cpp]

[/ index.html Start]

[heading Rationale]
Over the course of reimplementing a decision tree learning algorithm to use
modern C++ techniques, the need for a generic tree library became evident.  The
in-house data structures in use at the time were undergoing modification as
well.  It was found that the core operations occurred at the node level rather
than at the tree level, which stored only high-level algorithms.  Efforts went
underway to retrofit these algorithms to use iterators and to further factor
out generic data structures from the decision tree components and other
application-specific utilities.  This library represents the Boostified
culmination of these efforts.

[/ index.html End]

[include concepts.qbk]
[include reference.qbk]

