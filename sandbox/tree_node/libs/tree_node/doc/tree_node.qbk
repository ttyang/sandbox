[library tree_node
    [quickbook 1.5]
    [version 0.3]
    [authors [Enage, Cromwell D.]]
    [copyright 2011-2012 Cromwell D. Enage]
    [purpose Low-level tree node framework]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[/ General links.]
[def __Runtime_Complexity__ [@http://en.wikipedia.org/wiki/Amortized_analysis Runtime Complexity]]

[/ General concept links.]
[def __Default_Constructible__ [@http://www.sgi.com/tech/stl/DefaultConstructible.html [*Default Constructible]]]
[def __Trivial_Iterator__ [@http://www.sgi.com/tech/stl/trivial.html [*Trivial Iterator]]]
[def __Input_Iterator__ [@http://www.sgi.com/tech/stl/InputIterator.html [*Input Iterator]]]
[def __Forward_Iterator__ [@http://www.sgi.com/tech/stl/ForwardIterator.html [*Forward Iterator]]]
[def __Reverse_Iterator__ [@http://www.sgi.com/tech/stl/ReverseIterator.html [*Reverse Iterator]]]
[def __Bidirectional_Iterator__ [@http://www.sgi.com/tech/stl/BidirectionalIterator.html [*Bidirectional Iterator]]]
[def __Container__ [@http://www.sgi.com/tech/stl/Container.html [*Container]]]
[def __Unary_Function__ [@http://www.sgi.com/tech/stl/UnaryFunction.html [*Unary Function]]]
[def __Equality_Comparable__ [@http://www.sgi.com/tech/stl/EqualityComparable.html [*Equality Comparable]]]
[def __Less_Than_Comparable__ [@http://www.sgi.com/tech/stl/LessThanComparable.html [*Less-Than Comparable]]]

[/ STL reference links.]
[def __std_pair__ [@http://www.sgi.com/tech/stl/pair.html `std::pair`]]
[def _std_pair_ [@http://www.sgi.com/tech/stl/pair.html std::pair]]

[/ Boost library and installation links.]
[def __Boost_Range__ [@boost:libs/range/doc/html/index.html [*Boost.Range]]]
[def __Build__ [@boost:more/getting_started.html Build]]
[def __build__ [@boost:more/getting_started.html build]]
[def __Boost_Test__ [@boost:libs/test/doc/index.html [*Boost.Test]]]
[def __SVN_Trac__ [@http://svn.boost.org/ SVN Trac]]
[def __Boost_Utility_ContainerGen__ [@http://svn.boost.org/svn/boost/sandbox/utility-container_gen/libs/utility/container_gen/doc/html/index.html [*Boost.Utility.ContainerGen]]]

[/ Boost concept links.]
[def __Copy_Constructible__ [@boost:libs/utility/CopyConstructible.html [*Copy Constructible]]]
[def __Assignable__ [@boost:libs/utility/Assignable.html [*Assignable]]]
[def __Movable__ [@boost:doc/html/move.html [*Movable]]]
[def __Boolean_Integral_Constant__ [@boost:libs/mpl/doc/refmanual/integral-constant.html [*Boolean Integral Constant]]]
[def __Metafunction_Class__ [@boost:libs/mpl/doc/refmanual/metafunction-class.html [*Metafunction Class]]]
[def __Binary_Metafunction_Class__ [@boost:libs/mpl/doc/refmanual/metafunction-class.html [*Binary Metafunction Class]]]
[def __Trinary_Metafunction_Class__ [@boost:libs/mpl/doc/refmanual/metafunction-class.html [*Trinary Metafunction Class]]]

[/ Boost reference links in text.]

[/ Boost reference links in code.]
[def __mpl_true__ [@boost:libs/mpl/doc/refmanual/bool.html `boost::mpl::true_`]]
[def _mpl_true_ [@boost:libs/mpl/doc/refmanual/bool.html boost::mpl::true_]]
[def __mpl_false__ [@boost:libs/mpl/doc/refmanual/bool.html `boost::mpl::false_`]]
[def _mpl_false_ [@boost:libs/mpl/doc/refmanual/bool.html boost::mpl::false_]]
[def _mpl_apply_wrap2_ [@boost:libs/mpl/doc/refmanual/apply-wrap.html boost::mpl::apply_wrap2]]
[def _mpl_apply_wrap3_ [@boost:libs/mpl/doc/refmanual/apply-wrap.html boost::mpl::apply_wrap3]]
[def _mpl_equal_to_ [@boost:libs/mpl/doc/refmanual/equal_to.html boost::mpl::equal_to]]
[def _enable_if_ [@boost:libs/utility/enable_if.html `enable_if`]]
[def __container_gen__ [@http://svn.boost.org/svn/boost/sandbox/utility-container_gen/libs/utility/container_gen/doc/html/container_gen/reference/container_gen.html `container_gen`]]
[def __associative_container_gen__ [@http://svn.boost.org/svn/boost/sandbox/utility-container_gen/libs/utility/container_gen/doc/html/container_gen/reference/associative_container_gen.html `associative_container_gen`]]

[/ Boost.TreeNode header and source file links.]
[def __boost_tree_node_base_hpp__ [@../../../../boost/tree_node/base.hpp boost/tree_node/base.hpp]]
[def __boost_tree_node_binary_node_hpp__ [@../../../../boost/tree_node/binary_node.hpp boost/tree_node/binary_node.hpp]]
[def __boost_tree_node_nary_node_hpp__ [@../../../../boost/tree_node/nary_node.hpp boost/tree_node/nary_node.hpp]]
[def __boost_tree_node_associative_node_hpp__ [@../../../../boost/tree_node/associative_node.hpp boost/tree_node/associative_node.hpp]]
[def __boost_tree_node_with_depth_hpp__ [@../../../../boost/tree_node/with_depth.hpp boost/tree_node/with_depth.hpp]]
[def __boost_tree_node_with_position_hpp__ [@../../../../boost/tree_node/with_position.hpp boost/tree_node/with_position.hpp]]
[def __boost_tree_node_with_red_black_flag_hpp__ [@../../../../boost/tree_node/with_red_black_flag.hpp boost/tree_node/with_red_black_flag.hpp]]
[def __boost_tree_node_breadth_first_iterator_hpp__ [@../../../../boost/tree_node/breadth_first_iterator.hpp boost/tree_node/breadth_first_iterator.hpp]]
[def __boost_tree_node_breadth_first_desc_iterator_hpp__ [@../../../../boost/tree_node/breadth_first_iterator.hpp boost/tree_node/breadth_first_desc_iterator.hpp]]
[def __boost_tree_node_pre_order_iterator_hpp__ [@../../../../boost/tree_node/pre_order_iterator.hpp boost/tree_node/pre_order_iterator.hpp]]
[def __boost_tree_node_pre_order_desc_iterator_hpp__ [@../../../../boost/tree_node/pre_order_iterator.hpp boost/tree_node/pre_order_desc_iterator.hpp]]
[def __boost_tree_node_post_order_iterator_hpp__ [@../../../../boost/tree_node/post_order_iterator.hpp boost/tree_node/post_order_iterator.hpp]]
[def __boost_tree_node_post_order_desc_iterator_hpp__ [@../../../../boost/tree_node/post_order_iterator.hpp boost/tree_node/post_order_desc_iterator.hpp]]
[def __boost_tree_node_in_order_iterator_hpp__ [@../../../../boost/tree_node/in_order_iterator.hpp boost/tree_node/in_order_iterator.hpp]]
[def __boost_tree_node_depth_first_iterator_hpp__ [@../../../../boost/tree_node/depth_first_iterator.hpp boost/tree_node/depth_first_iterator.hpp]]
[def __boost_tree_node_depth_first_desc_iterator_hpp__ [@../../../../boost/tree_node/depth_first_iterator.hpp boost/tree_node/depth_first_desc_iterator.hpp]]
[def __boost_tree_node_traversal_state_hpp__ [@../../../../boost/tree_node/traversal_state.hpp boost/tree_node/traversal_state.hpp]]
[def __boost_tree_node_algorithm_dereference_iterator_hpp__ [@../../../../boost/tree_node/algorithm/dereference_iterator.hpp boost/tree_node/algorithm/dereference_iterator.hpp]]
[def __boost_tree_node_algorithm_equal_hpp__ [@../../../../boost/tree_node/algorithm/equal.hpp boost/tree_node/algorithm/equal.hpp]]
[def __boost_tree_node_algorithm_lexicographical_compare_hpp__ [@../../../../boost/tree_node/algorithm/lexicographical_compare.hpp boost/tree_node/algorithm/lexicographical_compare.hpp]]
[def __example_default_unconstruct_type_hpp__ [@../../example/default_unconstruct_type.hpp example/default_unconstruct_type.hpp]]
[def __example_default_unconstruct_type_cpp__ [@../../example/default_unconstruct_type.cpp example/default_unconstruct_type.cpp]]
[def __example_show_functions_hpp__ [@../../example/show_functions.hpp example/show_functions.hpp]]
[def __example_show_functions_cpp__ [@../../example/show_functions.cpp example/show_functions.cpp]]
[def __example_showcase_iterators_hpp__ [@../../example/showcase_iterators.hpp example/showcase_iterators.hpp]]
[def __example_showcase_desc_iterators_hpp__ [@../../example/showcase_desc_iterators.hpp example/showcase_desc_iterators.hpp]]
[def __example_binary_node_cpp__ [@../../example/binary_node.cpp example/binary_node.cpp]]
[def __example_nary_node_cpp__ [@../../example/nary_node.cpp example/nary_node.cpp]]
[def __example_associative_node_cpp__ [@../../example/associative_node.cpp example/associative_node.cpp]]

[/ Boost.TreeNode concept links.]
[def __Tree_Node__ [link tree_node.concepts.tree_node [*Tree Node]]]
[def __Base_Tree_Node__ [link tree_node.concepts.base_tree_node [*Base Tree Node]]]
[def __Associative_Tree_Node__ [link tree_node.concepts.associative_tree_node [*Associative Tree Node]]]
[def __Non_Associative_Tree_Node__ [link tree_node.concepts.non_assoc_tree_node [*Non-Associative Tree Node]]]
[def __Binary_Tree_Node__ [link tree_node.concepts.binary_tree_node [*Binary Tree Node]]]
[def __N_ary_Tree_Node__ [link tree_node.concepts.nary_tree_node [*N-ary Tree Node]]]
[def __Type_Generator__ [link tree_node.concepts.type_generator [*Type Generator]]]
[def __Tree_Node_Iterator__ [link tree_node.concepts.tree_node_iterator [*Tree Node Iterator]]]
[def __Full_Tree_Node_Iterator__ [link tree_node.concepts.full_tree_node_iterator [*Full Tree Node Iterator]]]
[def __Tree_Node_Descendant_Iterator__ [link tree_node.concepts.tree_node_desc_iterator [*Tree Node Descendant Iterator]]]

[/ Boost.TreeNode reference links.]
[def __tree_node_base__ [link tree_node.reference.tree_node_base `tree_node_base`]]
[def _tree_node_base_ [link tree_node.reference.tree_node_base tree_node_base]]
[def __binary_node_base__ [link tree_node.reference.binary_node_base `binary_node_base`]]
[def _binary_node_base_ [link tree_node.reference.binary_node_base binary_node_base]]
[def __binary_node__ [link tree_node.reference.binary_node `binary_node`]]
[def _binary_node_ [link tree_node.reference.binary_node binary_node]]
[def __binary_node_gen__ [link tree_node.reference.binary_node_gen `binary_node_gen`]]
[def _binary_node_gen_ [link tree_node.reference.binary_node_gen binary_node_gen]]
[def __nary_node_base__ [link tree_node.reference.nary_node_base `nary_node_base`]]
[def _nary_node_base_ [link tree_node.reference.nary_node_base nary_node_base]]
[def __nary_node__ [link tree_node.reference.nary_node `nary_node`]]
[def _nary_node_ [link tree_node.reference.nary_node nary_node]]
[def __nary_node_gen__ [link tree_node.reference.nary_node_gen `nary_node_gen`]]
[def _nary_node_gen_ [link tree_node.reference.nary_node_gen nary_node_gen]]
[def __associative_node_base__ [link tree_node.reference.associative_node_base `associative_node_base`]]
[def _associative_node_base_ [link tree_node.reference.associative_node_base associative_node_base]]
[def __associative_node__ [link tree_node.reference.associative_node `associative_node`]]
[def _associative_node_ [link tree_node.reference.associative_node associative_node]]
[def __associative_node_gen__ [link tree_node.reference.associative_node_gen `associative_node_gen`]]
[def _associative_node_gen_ [link tree_node.reference.associative_node_gen associative_node_gen]]
[def __tree_node_with_depth_base__ [link tree_node.reference.with_depth_base `with_depth_base`]]
[def _tree_node_with_depth_base_ [link tree_node.reference.with_depth_base with_depth_base]]
[def __tree_node_with_depth__ [link tree_node.reference.with_depth `with_depth`]]
[def _tree_node_with_depth_ [link tree_node.reference.with_depth with_depth]]
[def __tree_node_with_depth_gen__ [link tree_node.reference.with_depth_gen `with_depth_gen`]]
[def _tree_node_with_depth_gen_ [link tree_node.reference.with_depth_gen with_depth_gen]]
[def __tree_node_with_position_base__ [link tree_node.reference.with_position_base `with_position_base`]]
[def _tree_node_with_position_base_ [link tree_node.reference.with_position_base with_position_base]]
[def __tree_node_with_position__ [link tree_node.reference.with_position `with_position`]]
[def _tree_node_with_position_ [link tree_node.reference.with_position with_position]]
[def __tree_node_with_position_gen__ [link tree_node.reference.with_position_gen `with_position_gen`]]
[def _tree_node_with_position_gen_ [link tree_node.reference.with_position_gen with_position_gen]]
[def __tree_node_with_red_black_flag_base__ [link tree_node.reference.with_rb_flag_base `with_red_black_flag_base`]]
[def _tree_node_with_red_black_flag_base_ [link tree_node.reference.with_rb_flag_base with_red_black_flag_base]]
[def __tree_node_with_red_black_flag__ [link tree_node.reference.with_rb_flag `with_red_black_flag`]]
[def _tree_node_with_red_black_flag_ [link tree_node.reference.with_rb_flag with_red_black_flag]]
[def __tree_node_with_red_black_flag_gen__ [link tree_node.reference.with_rb_flag `with_red_black_flag_gen`]]
[def _tree_node_with_red_black_flag_gen_ [link tree_node.reference.with_rb_flag with_red_black_flag_gen]]
[def __breadth_first_iterator__ [link tree_node.reference.breadth_first_iterator `breadth_first_iterator`]]
[def _breadth_first_iterator_ [link tree_node.reference.breadth_first_iterator breadth_first_iterator]]
[def __breadth_first_descendant_iterator__ [link tree_node.reference.breadth_first_desc_iter `breadth_first_descendant_iterator`]]
[def _breadth_first_descendant_iterator_ [link tree_node.reference.breadth_first_desc_iter breadth_first_descendant_iterator]]
[def __pre_order_iterator__ [link tree_node.reference.pre_order_iterator `pre_order_iterator`]]
[def _pre_order_iterator_ [link tree_node.reference.pre_order_iterator pre_order_iterator]]
[def __pre_order_descendant_iterator__ [link tree_node.reference.pre_order_desc_iter `pre_order_descendant_iterator`]]
[def _pre_order_descendant_iterator_ [link tree_node.reference.pre_order_desc_iter pre_order_descendant_iterator]]
[def __post_order_iterator__ [link tree_node.reference.post_order_iterator `post_order_iterator`]]
[def _post_order_iterator_ [link tree_node.reference.post_order_iterator post_order_iterator]]
[def __post_order_descendant_iterator__ [link tree_node.reference.post_order_desc_iter `post_order_descendant_iterator`]]
[def _post_order_descendant_iterator_ [link tree_node.reference.post_order_desc_iter post_order_descendant_iterator]]
[def __in_order_iterator__ [link tree_node.reference.in_order_iterator `in_order_iterator`]]
[def _in_order_iterator_ [link tree_node.reference.in_order_iterator in_order_iterator]]
[def __depth_first_iterator__ [link tree_node.reference.depth_first_iterator `depth_first_iterator`]]
[def _depth_first_iterator_ [link tree_node.reference.depth_first_iterator depth_first_iterator]]
[def __depth_first_descendant_iterator__ [link tree_node.reference.depth_first_desc_iter `depth_first_descendant_iterator`]]
[def _depth_first_descendant_iterator_ [link tree_node.reference.depth_first_desc_iter depth_first_descendant_iterator]]
[def __traversal_state__ [link tree_node.reference.traversal_state `traversal_state`]]
[def _traversal_state_ [link tree_node.reference.traversal_state traversal_state]]
[def __dereference_iterator__ [link tree_node.reference.dereference_iterator `dereference_iterator()`]]
[def __tree_node_equal__ [link tree_node.reference.equal `equal()`]]
[def __tree_node_strictly_equal__ [link tree_node.reference.strictly_equal `strictly_equal()`]]
[def __tree_node_lexicographical_compare__ [link tree_node.reference.lexicographical_compare `lexicographical_compare()`]]
[def __tree_node_strict_lexicographical_compare__ [link tree_node.reference.strict_lexicograph_comp `strict_lexicographical_compare()`]]

[/ Autogenerate concept and reference documentation directly from code.]
[/ Bypass Doxygen.]
[import ../../../boost/tree_node/base.hpp]
[import ../../../boost/tree_node/binary_node.hpp]
[import ../../../boost/tree_node/nary_node.hpp]
[import ../../../boost/tree_node/associative_node.hpp]
[import ../../../boost/tree_node/with_depth.hpp]
[import ../../../boost/tree_node/with_position.hpp]
[import ../../../boost/tree_node/with_red_black_flag.hpp]
[import ../../../boost/tree_node/breadth_first_iterator.hpp]
[import ../../../boost/tree_node/breadth_first_desc_iterator.hpp]
[import ../../../boost/tree_node/pre_order_iterator.hpp]
[import ../../../boost/tree_node/pre_order_desc_iterator.hpp]
[import ../../../boost/tree_node/post_order_iterator.hpp]
[import ../../../boost/tree_node/post_order_desc_iterator.hpp]
[import ../../../boost/tree_node/in_order_iterator.hpp]
[import ../../../boost/tree_node/depth_first_iterator.hpp]
[import ../../../boost/tree_node/depth_first_desc_iterator.hpp]
[import ../../../boost/tree_node/traversal_state.hpp]
[import ../../../boost/tree_node/algorithm/dereference_iterator.hpp]
[import ../../../boost/tree_node/algorithm/equal.hpp]
[import ../../../boost/tree_node/algorithm/lexicographical_compare.hpp]
[import ../example/default_unconstruct_type.hpp]
[import ../example/default_unconstruct_type.cpp]
[import ../example/show_functions.hpp]
[import ../example/show_functions.cpp]
[import ../example/showcase_iterators.hpp]
[import ../example/showcase_desc_iterators.hpp]
[import ../example/binary_node.cpp]
[import ../example/nary_node.cpp]
[import ../example/associative_node.cpp]

[/ index.html Start]

[heading Rationale]
Over the course of reimplementing a decision tree learning algorithm to use
modern C++ techniques, the need for a generic tree library became evident.  The
in-house data structures in use at the time were undergoing modification as
well.  It was found that the core operations occurred at the node level rather
than at the tree level, which stored only high-level algorithms.  Efforts went
underway to retrofit these algorithms to use iterators and to further factor
out generic data structures from the decision tree components and other
application-specific utilities.  This library represents the Boostified
culmination of these efforts.

[/ index.html End]

[include concepts.qbk]
[include reference.qbk]
[include changelog.qbk]

