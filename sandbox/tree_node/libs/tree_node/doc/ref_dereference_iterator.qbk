[/=============================================================================
    Copyright (C) 2011-2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:dereference_iterator `dereference_iterator()`]

[section Function Synopsis]
[reference__tree_node__dereference_iterator]
[endsect]

[section Function Description]
This function takes in a __Tree_Node_Iterator__ and returns the __Tree_Node__
to which it currently points.  In terms of genericity, this function is
necessary not only because it handles both __Full_Tree_Node_Iterator__ and
__Tree_Node_Descendant_Iterator__ models, but because the iterator interface of
associative __Boost_Pointer_Container__ types is different from that of their
standard library counterparts.
[endsect]

[section:result_of Return Type Metafunction Synopsis]
[reference__tree_node__result_of__dereference_iterator]
[endsect]

[section Return Type Metafunction Description]
Let `Itr` be a __Tree_Node_Iterator__ model.

``
    typedef dereference_iterator<Itr>::type r;
``

[*Return type:] A __Fusion_Sequence__ of __half_runtime_pairs__ of key types
and their matching value types as defined by the specified node type.
[endsect]

[section:definition Where defined]
``
#include <__dereference_iterator__header__>
``
[endsect]

[endsect] [/ dereference_iterator]

