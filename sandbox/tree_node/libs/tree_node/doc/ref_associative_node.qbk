[/=============================================================================
    Copyright (C) 2011-2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:associative_node `associative_node<Key,Data,Selector>`]

[section Description]
This class template is suitable for classes or algorithms that need to map keys
to child nodes in a tree node data structure.  Objects of this type can be
stored by value, and their children can be accessed by their associated keys
for fast lookup.

If the user data type models the __Fusion_Associative_Sequence__ concept, then
each of the elements within can be also be obtained through key-value access
and set through key-value modification as defined by the __Tree_Node__ concept;
more specifically, for some object `node` of type `Node` such that `Node` is a
template instantiation of `associative_node`, then for any type `Key` such that
[^_fusion_has_key_<Key>(get<_data_key_>(node))] returns `true`, so does
[^_has_key_<Key>(node)].
[endsect]

[section:definition Where defined]
``
#include <__associative_node__header__>
``

Forward-declared:

``
#include <__associative_node__forward_header__>
``

To register under __Boost_Typeof__:

``
#include <__associative_node__typeof_header__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Requirements][Default]]
    [
        [`Key`]
        [
            The type of a key object to be associated with a child of a
            `associative_node`.
        ]
        []
        []
    ]
    [
        [`Data`]
        [The type of the user data to be stored in an `associative_node`.]
        []
        []
    ]
    [
        [`Selector`]
        [The type that determines the child container type.]
        [
          * [^_is_recursive_selector_<Selector>] must return __mpl_true__.
          * [^_is_associative_selector_<Selector>] must return __mpl_true__.
        ]
        [__ptr_mapS__]
    ]
]
[endsect]

[section:model_of Model of]

  * __Associative_Tree_Node__
  * __Reversible_Tree_Node__ if
    [^_container_gen_<Selector,Key,associative_node>::type]
    returns a __Reversible_Container__ model
  * __Default_Constructible__ if `Data` is __Default_Constructible__
  * __Copy_Constructible__ if `Data` is __Copy_Constructible__
  * __Assignable__ if `Data` is __Copy_Constructible__ and __Movable__
  * __Movable__ if `Data` is __Movable__

[endsect]

[section:public_bases Public Base Classes]
[reference__associative_node__bases]
[endsect]

[section:members Public Members]
[table
    [[Name][Definition][Where defined]]
    [
        [Super type]
        [[reference__associative_node__super_t]]
        [__Tree_Node__]
    ]
    [
        [
            Key type, data type, iterator range type, immutable iterator
            range type, allocator type, allocator reference type
        ]
        [[reference__associative_node__traits]]
        [__Associative_Tree_Node__]
    ]
    [
        [Pointer type]
        [[reference__associative_node__pointer]]
        [__Tree_Node__]
    ]
    [
        [Pointer-to-const type]
        [[reference__associative_node__const_pointer]]
        [__Tree_Node__]
    ]
    [
        [Iterator type]
        [[reference__associative_node__iterator]]
        [__Associative_Tree_Node__]
    ]
    [
        [Immutable iterator type]
        [[reference__associative_node__const_iterator]]
        [__Associative_Tree_Node__]
    ]
    [
        [Reverse iterator type]
        [[reference__associative_node__reverse_iterator]]
        [__Reversible_Tree_Node__]
    ]
    [
        [Immutable reverse iterator type]
        [[reference__associative_node__const_reverse_iterator]]
        [__Reversible_Tree_Node__]
    ]
    [
        [Emplacement constructor]
        [[reference__associative_node__emplacement_ctor]]
        [__Tree_Node__]
    ]
    [
        [Emplacement constructor with allocator]
        [[reference__associative_node__emplacement_ctor_w_allocator]]
        [`associative_node`]
    ]
    [
        [Copy constructor]
        [``
            associative_node(associative_node const& copy);
        ``]
        [__Copy_Constructible__]
    ]
    [
        [Copy constructor with allocator]
        [``
            associative_node(
                associative_node const& copy
              , typename traits::allocator_reference allocator
            );
        ``]
        [`associative_node`]
    ]
    [
        [Move constructor]
        [``
            associative_node(associative_node&& source);
        ``]
        [__Movable__]
    ]
    [
        [Move constructor with allocator]
        [``
            associative_node(
                associative_node&& source
              , typename traits::allocator_reference allocator
            );
        ``]
        [`associative_node`]
    ]
    [
        [Copy assignment operator]
        [``
            associative_node& operator=(associative_node const&);
        ``]
        [__Assignable__]
    ]
    [
        [Move assignment operator]
        [``
            associative_node& operator=(associative_node&&);
        ``]
        [__Movable__]
    ]
    [
        [Parent access]
        [[reference__associative_node_base__get_parent_ptr__const]]
        [__Tree_Node__]
    ]
    [
        [Parent access]
        [[reference__associative_node_base__get_parent_ptr]]
        [__Tree_Node__]
    ]
    [
        [Child creation]
        [[reference__associative_node_base__emplace]]
        [__Associative_Tree_Node__]
    ]
    [
        [Child copy creation]
        [[reference__associative_node_base__insert]]
        [__Associative_Tree_Node__]
    ]
    [
        [Children range begin access]
        [[reference__associative_node_base__cbegin]]
        [__Tree_Node__]
    ]
    [
        [Children range begin access]
        [[reference__associative_node_base__begin]]
        [__Tree_Node__]
    ]
    [
        [Children range past-the-end access]
        [[reference__associative_node_base__cend]]
        [__Tree_Node__]
    ]
    [
        [Children range past-the-end access]
        [[reference__associative_node_base__end]]
        [__Tree_Node__]
    ]
    [
        [Children reverse range begin access]
        [[reference__associative_node_base__crbegin]]
        [__Reversible_Tree_Node__]
    ]
    [
        [Children reverse range begin access]
        [[reference__associative_node_base__rbegin]]
        [__Reversible_Tree_Node__]
    ]
    [
        [Children reverse range past-the-end access]
        [[reference__associative_node_base__crend]]
        [__Reversible_Tree_Node__]
    ]
    [
        [Children reverse range past-the-end access]
        [[reference__associative_node_base__rend]]
        [__Reversible_Tree_Node__]
    ]
    [
        [Children range size query]
        [[reference__associative_node_base__size]]
        [__Tree_Node__]
    ]
    [
        [Child search]
        [[reference__associative_node_base__find__const]]
        [__Associative_Tree_Node__]
    ]
    [
        [Child search]
        [[reference__associative_node_base__find]]
        [__Associative_Tree_Node__]
    ]
    [
        [Child search range]
        [[reference__associative_node_base__equal_range__const]]
        [__Associative_Tree_Node__]
    ]
    [
        [Child search range]
        [[reference__associative_node_base__equal_range]]
        [__Associative_Tree_Node__]
    ]
    [
        [Remove children]
        [[reference__associative_node_base__erase]]
        [__Associative_Tree_Node__]
    ]
    [
        [Leaf node query]
        [[reference__associative_node_base__empty]]
        [__Tree_Node__]
    ]
    [
        [Remove all children]
        [[reference__associative_node_base__clear]]
        [__Tree_Node__]
    ]
]
[endsect] [/ Members]

[section:non_members Non-Members]
Same as those defined in __associative_node_base__.
[endsect]

[section Example]
<__example_associative_node_cpp__>
[endsect]

[section Test]
<__test_associative_node_cpp__>
[endsect]

[endsect] [/ associative_node]

