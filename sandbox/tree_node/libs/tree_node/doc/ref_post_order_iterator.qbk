[/=============================================================================
    Copyright (C) 2011 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:post_order_iterator `post_order_iterator`]

[section Synopsis]
[reference__post_order_iterator]
[endsect]

[section Description]
This iterator traverses the specified root node and all its descendants in
post-order fashion, e.g. given the following tree representation:

``
      A
      |
  C---+---B
  |       |
+-+-+   +-+-+
|   |   |   |
D   E   F   G
``

If this iterator is a __Full_Tree_Node_Iterator__, then it will traverse the
tree nodes in the following order:

``
D E C F G B A
``

If this iterator is a __Tree_Node_Descendant_Iterator__, then it will traverse
the tree nodes in the following order:

``
D E C F G B
``
[endsect]

[section:definition Where defined]
``
#include <__boost_tree_node_post_order_iterator_hpp__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Requirements][Default]]
    [
        [`NodePointer`]
        [The type of a pointer to a tree node.]
        [
            It must model the __Trivial_Iterator__ concept, and its value type
            must model the __Tree_Node__ concept.
        ]
        []
    ]
    [
        [`MimicsChildIterator`]
        [
            The type that determines whether this `post_order_iterator` will
            iterate only through the descendants of a node or will also include
            the node in its traversal.
        ]
        [It must model the __Boolean_Integral_Constant__ concept.]
        []
    ]
]
[endsect]

[section:model_of Model of]

  * __Full_Tree_Node_Iterator__ if `MimicsChildIterator::value` is `false`
  * __Tree_Node_Descendant_Iterator__ if `MimicsChildIterator::value` is `true`
  * __Default_Constructible__
  * __Copy_Constructible__
  * __Assignable__

[endsect]

[section:public_bases Public Base Classes]
None.
[endsect]

[section Members]
[table
    [[Name][Expression][Where defined]]
    [
        [Value type]
        [`value_type`]
        [__Tree_Node_Iterator__]
    ]
    [
        [Reference type]
        [`reference`]
        [__Forward_Iterator__]
    ]
    [
        [Pointer type]
        [`pointer`]
        [__Forward_Iterator__]
    ]
    [
        [Distance type]
        [`distance`]
        [__Forward_Iterator__]
    ]
    [
        [Iterator category]
        [`iterator_category`]
        [__Forward_Iterator__]
    ]
    [
        [Default constructor]
        [`post_order_iterator();`]
        [__Default_Constructible__]
    ]
    [
        [Constructor from im/mutable node]
        [`post_order_iterator(NodePointer const&);`]
        [__Tree_Node_Iterator__]
    ]
    [
        [Conversion constructor]
        [``
            template <typename NP, typename MCI>
            post_order_iterator(post_order_iterator<NP,MCI> const&);
        ``]
        [`post_order_iterator`]
    ]
    [
        [Copy constructor]
        [`post_order_iterator(post_order_iterator const&);`]
        [__Copy_Constructible__]
    ]
    [
        [Assignment operator]
        [`post_order_iterator& operator=(post_order_iterator const&);`]
        [__Assignable__]
    ]
    [
        [Dereference operator]
        [`reference operator*() const;`]
        [__Forward_Iterator__]
    ]
    [
        [Indirection operator]
        [`pointer operator->() const;`]
        [__Forward_Iterator__]
    ]
    [
        [Pre-increment operator]
        [`post_order_iterator& operator++();`]
        [__Forward_Iterator__]
    ]
    [
        [Post-increment operator]
        [`post_order_iterator operator++(int);`]
        [__Forward_Iterator__]
    ]
    [
        [Traversal state conversion operator]
        [`operator _traversal_state_() const;`]
        [__Tree_Node_Iterator__]
    ]
]
[endsect] [/ Members]

[section:non_members Non-members]
[table
    [[Name][Expression][Description]]
    [
        [Iterator creation]
        [[reference__make_post_order_iterator]]
        [
            Constructs and returns a `post_order_iterator` that will iterate
            through the specified node and its descendants.
        ]
    ]
    [
        [Descendant iterator creation]
        [[reference__make_post_order_descendant_iterator]]
        [
            Constructs and returns a `post_order_iterator` that will iterate
            through the descendants of the specified node.
        ]
    ]
    [
        [Iteration]
        [[reference__post_order_iterate]]
        [
            Iterates through the specified node and its descendants in
            post-order fashion, passing each node pointer dereferenced to
            the specified __Unary_Function__ object.
        ]
    ]
    [
        [Descendant iteration]
        [[reference__post_order_iterate_descendants]]
        [
            Iterates through the descendants of the specified node in
            post-order fashion, passing each element dereferenced to
            the specified __Unary_Function__ object.
        ]
    ]
    [
        [Equality]
        [[reference__post_order_iterator__operator_equals]]
        [Defined by the __Input_Iterator__ concept.]
    ]
    [
        [Inequality]
        [[reference__post_order_iterator__operator_not_equal]]
        [Defined by the __Input_Iterator__ concept.]
    ]
]
[endsect] [/ Non-members]

[endsect] [/ post_order_iterator]

