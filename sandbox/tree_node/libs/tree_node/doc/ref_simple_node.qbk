[/=============================================================================
    Copyright (C) 2011 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:simple_node `simple_node`]

[section Synopsis]
[reference__simple_node]
[endsect]

[section Description]
This class template is suitable for classes or algorithms that require a tree
node data structure that can handle an arbitrary number of children and must
be exposed to external code.  Objects of this type must be stored by
`simple_node::pointer` and can only be instantiated through the
__tree_node_factory__ facade or the `clone()` method.

[important
    This component depends on __Boost_Utility_ContainerGen__, which is not yet
    a part of Boost.  For now, you must perform a Subversion checkout from the
    __SVN_Trac__.
]
[endsect]

[section:definition Where defined]
``
#include <__boost_tree_node_simple_node_hpp__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Requirements][Default]]
    [
        [`T`]
        [The type of the object to be stored in a `simple_node`.]
        []
        []
    ]
    [
        [`Selector`]
        [
            The type that determines the internal container types whose value
            types are the same as the pointer type.
        ]
        [
            It must be a type for which __container_gen__ returns a valid
            container.
        ]
        [`dequeS`]
    ]
]
[endsect]

[section:model_of Model of]

  * __N_ary_Tree_Node__
  * __Factory_Constructible_Tree_Node__
  * __Cloneable_Tree_Node__

[endsect]

[section:public_bases Public Base Classes]
__simple_node_base__
[endsect]

[section:members Public Members]
[table
    [[Name][Expression][Where defined]]
    [
        [Data type]
        [`typename traits::data_type`]
        [__Tree_Node__]
    ]
    [
        [Pointer type]
        [`pointer`]
        [__Tree_Node__]
    ]
    [
        [Pointer-to-const type]
        [`const_pointer`]
        [__Tree_Node__]
    ]
    [
        [Child iterator type]
        [`child_iterator`]
        [__Non_Associative_Tree_Node__]
    ]
    [
        [Immutable child iterator type]
        [`const_child_iterator`]
        [__Non_Associative_Tree_Node__]
    ]
    [
        [Clone]
        [`pointer clone() const;`]
        [__Cloneable_Tree_Node__]
    ]
    [
        [Data access]
        [`typename traits::data_type const& get_data() const;`]
        [__Tree_Node__]
    ]
    [
        [Data access]
        [`typename traits::data_type& get_data();`]
        [__Tree_Node__]
    ]
    [
        [Parent access]
        [`const_pointer get_parent() const;`]
        [__Tree_Node__]
    ]
    [
        [Parent access]
        [`pointer get_parent();`]
        [__Tree_Node__]
    ]
    [
        [Child creation with data]
        [`pointer add_child(typename traits::data_type const&);`]
        [__N_ary_Tree_Node__]
    ]
    [
        [Child creation]
        [`pointer add_child();`]
        [__N_ary_Tree_Node__]
    ]
    [
        [Child copy creation]
        [`pointer add_child_copy(const_pointer const&);`]
        [__N_ary_Tree_Node__]
    ]
    [
        [Children range begin access]
        [`const_child_iterator get_child_begin() const;`]
        [__Tree_Node__]
    ]
    [
        [Children range begin access]
        [`child_iterator get_child_begin();`]
        [__Tree_Node__]
    ]
    [
        [Children range past-the-end access]
        [`const_child_iterator get_child_end() const;`]
        [__Tree_Node__]
    ]
    [
        [Children range past-the-end access]
        [`child_iterator get_child_end();`]
        [__Tree_Node__]
    ]
    [
        [Remove all children]
        [`void remove_all_children();`]
        [__Tree_Node__]
    ]
]
[endsect] [/ Members]

[section Example]
<__example_simple_node_cpp__>
[endsect]

[endsect] [/ simple_node]

