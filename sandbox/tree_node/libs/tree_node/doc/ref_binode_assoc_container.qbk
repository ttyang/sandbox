[/=============================================================================
    Copyright (C) 2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:binode_assoc_container
    `binode_associative_container<
        NodeGenerator
      , T1
      , T2
      , IsMultipleAssociative
      , CompareSelector
      , Balancer
    >`
]

[section Description]
TODO.
[endsect]

[section:definition Where defined]
``
#include <__binode_associative_container__header__>
``

Forward-declared:

``
#include <__binode_associative_container__forward_header__>
``

To register under __Boost_Typeof__:

``
#include <__binode_associative_container__typeof_header__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Default]]
    [
        [`NodeGenerator`]
        [
            A __Node_Type_Generator__ that takes in the value type and returns
            a __Binary_Tree_Node__ model.
        ]
        []
    ]
    [
        [`T1`]
        [The key type.]
        []
    ]
    [
        [`T2`]
        [The mapped type; ignored if `void`.]
        []
    ]
    [
        [`IsMultipleAssociative`]
        [
            A __Boolean_Integral_Constant__ that determines whether this type
            will model the __Multiple_Sorted_Associative_Container__ concept or
            the __Unique_Sorted_Associative_Container__ concept.
        ]
        []
    ]
    [
        [`CompareSelector`]
        [
            A __Unary_Metafunction_Class__ that takes in the value type and
            returns a __Strict_Weak_Ordering__ model.
        ]
        []
    ]
    [
        [`Balancer`]
        [TODO.]
        []
    ]
]
[endsect]

[section:model_of Model of]

  * __Simple_Associative_Container__ if `T2` is `void`,
    __Pair_Associative_Container__ otherwise
  * __Multiple_Sorted_Associative_Container__ if `IsMultipleAssociative`
    evaluates to __mpl_true__, __Unique_Sorted_Associative_Container__
    otherwise
  * __Indexable_Container__ if the value associated with __count_key__ exists
    for the return type of `NodeGenerator`
  * __Default_Constructible__ if `T` is __Default_Constructible__
  * __Copy_Constructible__ if `T` is __Copy_Constructible__
  * __Assignable__ if `T` is __Copy_Constructible__ and __Movable__
  * __Movable__ if `T` is __Movable__

[endsect]

[section:members Public Members]
[table
    [[Name][Definition][Where defined]]
    [
        [Key type]
        [[reference__binode_associative_container__key_type]]
        [__Associative_Container__]
    ]
    [
        [Value type]
        [[reference__binode_associative_container__value_type]]
        [__Associative_Container__]
    ]
    [
        [Reference type]
        [[reference__binode_associative_container__reference]]
        [__Container__]
    ]
    [
        [Reference-to-const type]
        [[reference__binode_associative_container__const_reference]]
        [__Container__]
    ]
    [
        [Pointer type]
        [[reference__binode_associative_container__pointer]]
        [__Container__]
    ]
    [
        [Pointer-to-const type]
        [[reference__binode_associative_container__const_pointer]]
        [__Container__]
    ]
    [
        [Node type]
        [[reference__binode_associative_container__node]]
        [`binode_associative_container`]
    ]
]

Also, given:
[reference__binode_associative_container__transform_function]

[table
    [[Name][Definition][Where defined]]
    [
        [Iterator type]
        [[reference__binode_associative_container__iterator]]
        [__Container__]
    ]
    [
        [Immutable iterator type]
        [[reference__binode_associative_container__const_iterator]]
        [__Container__]
    ]
    [
        [Reverse iterator type]
        [[reference__binode_associative_container__reverse_iterator]]
        [__Reversible_Container__]
    ]
    [
        [Immutable reverse iterator type]
        [[reference__binode_associative_container__const_reverse_iterator]]
        [__Reversible_Container__]
    ]
    [
        [Size type]
        [[reference__binode_associative_container__size_type]]
        [__Container__]
    ]
    [
        [Key compare type]
        [[reference__binode_associative_container__key_compare]]
        [__Associative_Container__]
    ]
    [
        [Value compare type]
        [[reference__binode_associative_container__value_compare]]
        [__Associative_Container__]
    ]
    [
        [Allocator type]
        [[reference__binode_associative_container__allocator_type]]
        [`binode_associative_container`]
    ]
    [
        [Default constructor]
        [[reference__binode_associative_container__default_ctor]]
        [__Default_Constructible__]
    ]
    [
        [Constructor with allocator]
        [[reference__binode_associative_container__ctor_w_alloc]]
        [`binode_associative_container`]
    ]
    [
        [Copy constructor]
        [[reference__binode_associative_container__copy_ctor]]
        [__Copy_Constructible__]
    ]
    [
        [Copy constructor with allocator]
        [[reference__binode_associative_container__copy_ctor_w_alloc]]
        [`binode_associative_container`]
    ]
    [
        [Move constructor]
        [``
            binode_associative_container(
                binode_associative_container&& source
            );
        ``]
        [__Movable__]
    ]
    [
        [Move constructor with allocator]
        [``
            binode_associative_container(
                binode_associative_container&& source
              , allocator_type const& allocator
            );
        ``]
        [`binode_associative_container`]
    ]
    [
        [Copy assignment operator]
        [[reference__binode_associative_container__copy_assign]]
        [__Assignable__]
    ]
    [
        [Move assignment operator]
        [``
            binode_associative_container&
                operator=(binode_associative_container&& source);
        ``]
        [__Movable__]
    ]
    [
        [Destructor]
        [[reference__binode_associative_container__dtor]]
        [`binode_associative_container`]
    ]
    [
        [Root node read-only access]
        [[reference__binode_associative_container__data]]
        [`binode_associative_container`]
    ]
    [
        [Beginning of read-only range]
        [[reference__binode_associative_container__cbegin]]
        [__Container__]
    ]
    [
        [Beginning of range]
        [[reference__binode_associative_container__begin]]
        [__Container__]
    ]
    [
        [End of read-only range]
        [[reference__binode_associative_container__cend]]
        [__Container__]
    ]
    [
        [End of range]
        [[reference__binode_associative_container__end]]
        [__Container__]
    ]
    [
        [Beginning of read-only reverse range]
        [[reference__binode_associative_container__crbegin]]
        [__Reversible_Container__]
    ]
    [
        [Beginning of reverse range]
        [[reference__binode_associative_container__rbegin]]
        [__Reversible_Container__]
    ]
    [
        [End of read-only reverse range]
        [[reference__binode_associative_container__crend]]
        [__Reversible_Container__]
    ]
    [
        [End of reverse range]
        [[reference__binode_associative_container__rend]]
        [__Reversible_Container__]
    ]
    [
        [Key-value read-only access]
        [[reference__binode_associative_container__cfind]]
        [__Associative_Container__]
    ]
    [
        [Key-value access]
        [[reference__binode_associative_container__find]]
        [__Associative_Container__]
    ]
    [
        [Beginning of key-value range read-only access]
        [[reference__binode_associative_container__lower_bound__const]]
        [__Sorted_Associative_Container__]
    ]
    [
        [Beginning of key-value range access]
        [[reference__binode_associative_container__lower_bound]]
        [__Sorted_Associative_Container__]
    ]
    [
        [End of key-value range read-only access]
        [[reference__binode_associative_container__upper_bound__const]]
        [__Sorted_Associative_Container__]
    ]
    [
        [End of key-value range access]
        [[reference__binode_associative_container__upper_bound]]
        [__Sorted_Associative_Container__]
    ]
    [
        [Key-value range read-only access]
        [[reference__binode_associative_container__equal_range__const]]
        [__Associative_Container__]
    ]
    [
        [Key-value range access]
        [[reference__binode_associative_container__equal_range]]
        [__Associative_Container__]
    ]
    [
        [Key-value insertion]
        [[reference__binode_associative_container__insert]]
        [__Associative_Container__]
    ]
    [
        [Key-value emplacement]
        [[reference__binode_associative_container__emplace]]
        [__Associative_Container__]
    ]
    [
        [Key erasure]
        [[reference__binode_associative_container__erase]]
        [__Sequence__]
    ]
    [
        [Empty container query]
        [[reference__binode_associative_container__empty]]
        [__Container__]
    ]
    [
        [Remove all elements]
        [[reference__binode_associative_container__clear]]
        [__Sequence__]
    ]
    [
        [Size query]
        [[reference__binode_associative_container__size]]
        [__Container__]
    ]
    [
        [Element read-only access]
        [[reference__binode_associative_container__index_operator__const]]
        [__Indexable_Container__]
    ]
    [
        [Element access]
        [[reference__binode_associative_container__index_operator]]
        [__Indexable_Container__]
    ]
]
[endsect] [/ Members]

[section Test]
<__test_containers_cpp__>
[endsect]

[endsect] [/ binode_associative_container]

