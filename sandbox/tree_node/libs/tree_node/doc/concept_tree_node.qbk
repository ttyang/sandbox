[/=============================================================================
    Copyright (C) 2011-2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:tree_node Tree Node]

[section Description]
All tree node implementations that this library provides model this concept:
a structure that maintains information about its data and its immediate
parent-child relationships.  However, in practice, a full-fledged tree node
data structure or adaptor consists of four components: a __Base_Tree_Node__
model that defines the functionality, a __Base_Type_Generator__ that returns
the __Base_Tree_Node__ model from which adaptor types can also inherit, a
[*Tree Node] model that inherits from the base type and is better suited for
external usage, and a __Node_Type_Generator__ that returns the [*Tree Node]
model.
[endsect]

[variablelist Notation
    [[`Node`][A type that models the [*Tree Node] concept.]]
    [[`node`][An object of type `Node::pointer`.]]
    [[`const_node`][An object of type `Node::const_pointer`.]]
    [
        [`args...`]
        [
            Arguments to be forwarded to the appropriate
            `Node::traits::data_type` constructor.
        ]
    ]
]

[section:types Associated Types]
[table
    [[Name][Expression][Description][Requirements]]
    [
        [Super type]
        [`Node::super_t`]
        [The type from which `Node` inherits its functionality.]
        [
            It must either be [^_tree_node_base_<Node>] or model the
            __Base_Tree_Node__ concept.
        ]
    ]
    [
        [Data type]
        [`Node::traits::data_type`]
        [The type of user data stored in a tree node.]
        []
    ]
    [
        [Pointer type]
        [`Node::pointer`]
        [The type of a pointer to a `Node` object.]
        [
            It must model the __Trivial_Iterator__ concept, it must point to
            a mutable object, and it must be implicitly convertible to
            `Node::const_pointer`.
        ]
    ]
    [
        [Pointer-to-const type]
        [`Node::const_pointer`]
        [The type of a pointer to a `Node const` object.]
        [
            It must model the __Trivial_Iterator__ concept, and it must /not/
            point to a mutable object.
        ]
    ]
    [
        [Iterator type]
        [`Node::iterator`]
        [
            The type of iterator used to iterate through the children of a
            `Node` object.
        ]
        [
            It must model the __Input_Iterator__ concept, and it must be
            convertible to `Node::const_iterator`.
        ]
    ]
    [
        [Immutable iterator type]
        [`Node::const_iterator`]
        [
            The type of iterator used to iterate through the children of a
            `Node const` object.
        ]
        [
            It must model the __Input_Iterator__ concept, and it must /not/
            point to a mutable object.
        ]
    ]
    [
        [Size type]
        [`Node::size_type`]
        [
            The type of unsigned integer used to represent the number of
            children of a `Node const` object.
        ]
        []
    ]
]
[endsect]

[section:expressions Valid Expressions and Semantics]
[table
    [
        [Name]
        [Expression]
        [Return Type]
        [Semantics]
        [Type Requirements]
        [__Runtime_Complexity__]
    ]
    [
        [Emplacement constructor]
        [`Node(args...)`]
        []
        [
            Constructs a `Node` object that initializes its user data with the
            specified arguments.
        ]
        []
        []
    ]
    [
        [Data read-only access]
        [``
            get<_data_key_>(const_node)
            get(const_node, _data_key_())
        ``]
        [`Node::traits::data_type const&`]
        [Returns the user data stored in the tree node.]
        []
        [Constant]
    ]
    [
        [Data access]
        [``
            get<_data_key_>(node)
            get(node, _data_key_())
        ``]
        [`Node::traits::data_type&`]
        [Returns the user data stored in the tree node.]
        []
        [Constant]
    ]
    [
        [Data modification]
        [`put(node, _data_key_(), data)`]
        [`void`]
        [Sets the user data to be stored in the tree node.]
        [The type of `data` must be convertible to `Node::traits::data_type`.]
        [Constant]
    ]
    [
        [Key-value read-only access]
        [``
            get<Key>(const_node)
            get(const_node, Key())
        ``]
        [``
            _result_of__at_key_<Node const,Key>::type
        ``]
        [
            Returns the value that the tree node associates with the specified
            key.
        ]
        [
            [^_result_of__has_key_<Node,Key>] must be equivalent to
            __mpl_true__.
        ]
        [Constant]
    ]
    [
        [Key-value access]
        [``
            get<Key>(node)
            get(node, Key())
        ``]
        [``
            _result_of__at_key_<Node,Key>::type
        ``]
        [
            Returns the value that the tree node associates with the specified
            key.
        ]
        [
            [^_result_of__has_key_<Node,Key>] must be equivalent to
            __mpl_true__.
        ]
        [Constant]
    ]
    [
        [Key-value modification]
        [`put(node, Key(), value)`]
        [`void`]
        [
            Sets the value to be associated with the specified key type in the
            tree node.
        ]
        [
            [^_result_of__has_key_<Node,Key>] must be equivalent to
            __mpl_true__, and the type of `value` must be convertible to
            [^_result_of__value_at_key_<Node,Key>::type].
        ]
        [Constant]
    ]
    [
        [Parent access]
        [`const_node->get_parent_ptr()`]
        [`Node::const_pointer`]
        [
            Returns a pointer to the parent of the tree node, or a null pointer
            if the node is the root.
        ]
        []
        [Constant]
    ]
    [
        [Parent access]
        [`node->get_parent_ptr()`]
        [`Node::pointer`]
        [
            Returns a pointer to the parent of the tree node, or a null pointer
            if the node is the root.
        ]
        []
        [Constant]
    ]
    [
        [Children range begin access]
        [`const_node->begin()`]
        [`Node::const_iterator`]
        [
            Returns an iterator pointing to the beginning of the range of
            children of the tree node.  If the range is empty, then the
            iterator points past-the-end.
        ]
        []
        [Constant]
    ]
    [
        [Children range begin access]
        [`node->begin()`]
        [`Node::iterator`]
        [
            Returns an iterator pointing to the beginning of the range of
            children of the tree node.  If the range is empty, then the
            iterator points past-the-end.
        ]
        []
        [Constant]
    ]
    [
        [Children range past-the-end access]
        [`const_node->end()`]
        [`Node::const_iterator`]
        [
            Returns an iterator pointing past the end of the range of children
            of the tree node.
        ]
        []
        [Constant]
    ]
    [
        [Children range past-the-end access]
        [`node->end()`]
        [`Node::iterator`]
        [
            Returns an iterator pointing past the end of the range of children
            of the tree node.
        ]
        []
        [Constant]
    ]
    [
        [Children range size query]
        [`const_node->size()`]
        [`Node::size_type`]
        [Returns the number of children of the tree node.]
        []
        [Linear with respect to the number of children]
    ]
    [
        [Leaf node query]
        [`const_node->empty()`]
        [`bool`]
        [
            Equivalent to `const_node->begin() == const_node->end()`, but may
            be more efficient in certain cases.
        ]
        []
        [Linear with respect to the number of children]
    ]
    [
        [Remove all descendants]
        [`node->clear()`]
        [`void`]
        [Removes all children and their descendants from the tree node.]
        []
        [Linear with respect to the number of children and their descendants]
    ]
]
[endsect] [/ Valid Expressions and Semantics]

[section Models]

  * __binary_node__
  * __binary_node_base__
  * __nary_node__
  * __nary_node_base__
  * __associative_node__
  * __associative_node_base__
  * __tree_node_with_accumulation__
  * __tree_node_with_accumulation_base__
  * __tree_node_with_count__
  * __tree_node_with_count_base__
  * __tree_node_with_height__
  * __tree_node_with_height_base__
  * __tree_node_with_position__
  * __tree_node_with_position_base__
  * __tree_node_with_red_black_flag__
  * __tree_node_with_red_black_flag_base__

[endsect]

[endsect] [/ Tree Node]

