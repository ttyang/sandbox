[/=============================================================================
    Copyright (C) 2011 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:depth_first_iterator `depth_first_iterator`]

[section Synopsis]
[reference__depth_first_iterator]
[endsect]

[section Description]
This iterator traverses the specified root node and all its descendants in
depth-first fashion, e.g. given the following tree representation:

``
      A
      |
  C---+---B
  |       |
+-+-+   +-+-+
|   |   |   |
D   E   F   G
``

If this iterator is a __Full_Tree_Node_Iterator__, then it will traverse the
tree nodes in the following order:

``
A  pre_order_traversal
C  pre_order_traversal
D  pre_order_traversal
D  post_order_traversal
E  pre_order_traversal
E  post_order_traversal
C  post_order_traversal
B  pre_order_traversal
F  pre_order_traversal
F  post_order_traversal
G  pre_order_traversal
G  post_order_traversal
B  post_order_traversal
A  post_order_traversal
``

If this iterator is a __Tree_Node_Descendant_Iterator__, then it will traverse
the tree nodes in the following order:

``
C  pre_order_traversal
D  pre_order_traversal
D  post_order_traversal
E  pre_order_traversal
E  post_order_traversal
C  post_order_traversal
B  pre_order_traversal
F  pre_order_traversal
F  post_order_traversal
G  pre_order_traversal
G  post_order_traversal
B  post_order_traversal
``

The traversal state conversion operator of this iterator will yield each value
in the column on the right at the appropriate iteration.

This iterator is ideal for algorithms that need to perform both preprocessing
and postprocessing of a tree node, e.g. the copy constructors of the
__raw_node__ and __raw_associative_node__ implementations.
[endsect]

[section:definition Where defined]
``
#include <__boost_tree_node_depth_first_iterator_hpp__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Requirements][Default]]
    [
        [`NodePointer`]
        [The type of a pointer to a tree node.]
        [
            It must model the __Trivial_Iterator__ concept, and its value type
            must model the __Tree_Node__ concept.
        ]
        []
    ]
    [
        [`MimicsChildIterator`]
        [
            The type that determines whether this `depth_first_iterator` will
            iterate only through the descendants of a node or will also include
            the node in its traversal.
        ]
        [It must model the __Boolean_Integral_Constant__ concept.]
        []
    ]
]
[endsect]

[section:model_of Model of]

  * __Full_Tree_Node_Iterator__ if `MimicsChildIterator::value` is `false`
  * __Tree_Node_Descendant_Iterator__ if `MimicsChildIterator::value` is `true`
  * __Default_Constructible__
  * __Copy_Constructible__
  * __Assignable__

[endsect]

[section:public_bases Public Base Classes]
None.
[endsect]

[section Members]
[table
    [[Name][Expression][Description]]
    [
        [Value type]
        [`value_type`]
        [Defined in the __Tree_Node_Iterator__ concept.]
    ]
    [
        [Reference type]
        [`reference`]
        [Defined in the __Forward_Iterator__ concept.]
    ]
    [
        [Pointer type]
        [`pointer`]
        [Defined in the __Forward_Iterator__ concept.]
    ]
    [
        [Distance type]
        [`difference_type`]
        [Defined in the __Forward_Iterator__ concept.]
    ]
    [
        [Iterator category]
        [`iterator_category`]
        [Defined in the __Forward_Iterator__ concept.]
    ]
    [
        [Default constructor]
        [`depth_first_iterator();`]
        [Defined in the __Default_Constructible__ concept.]
    ]
    [
        [Constructor from im/mutable node]
        [`depth_first_iterator(NodePointer const&);`]
        [Defined in the __Tree_Node_Iterator__ concept.]
    ]
    [
        [Conversion constructor]
        [``
            template <typename NP, typename MCI>
            depth_first_iterator(depth_first_iterator<NP,MCI> const&);
        ``]
        [
            Constructs a `depth_first_iterator` object that will point to the
            same element that the specified iterator points to.
        ]
    ]
    [
        [Copy constructor]
        [`depth_first_iterator(depth_first_iterator const&);`]
        [Defined in the __Copy_Constructible__ concept.]
    ]
    [
        [Assignment operator]
        [`depth_first_iterator& operator=(depth_first_iterator const&);`]
        [Defined in the __Assignable__ concept.]
    ]
    [
        [Dereference operator]
        [`reference operator*() const;`]
        [Defined in the __Forward_Iterator__ concept.]
    ]
    [
        [Indirection operator]
        [`pointer operator->() const;`]
        [Defined in the __Forward_Iterator__ concept.]
    ]
    [
        [Pre-increment operator]
        [`depth_first_iterator& operator++();`]
        [Defined in the __Forward_Iterator__ concept.]
    ]
    [
        [Post-increment operator]
        [`depth_first_iterator operator++(int);`]
        [Defined in the __Forward_Iterator__ concept.]
    ]
    [
        [Traversal state conversion operator]
        [`operator _traversal_state_() const;`]
        [
            Returns `pre_order_traversal` if this iterator has not yet examined
            the children of the current node, `post_order_traversal` if this
            iterator has examined all of the children of the current node, or
            `no_traversal` if this iterator is not dereferenceable.
        ]
    ]
]
[endsect] [/ Members]

[section:non_members Non-members]
[table
    [[Name][Expression][Description]]
    [
        [Iterator creation]
        [``
            template <typename NodePointer>
            depth_first_iterator<NodePointer,_mpl_false_>
                make_depth_first_iterator(NodePointer const& node);
        ``]
        [
            Constructs and returns a `depth_first_iterator` that will iterate
            through the specified node and its descendants.
        ]
    ]
    [
        [Descendant iterator creation]
        [``
            template <typename NodePointer>
            depth_first_iterator<NodePointer,_mpl_true_>
                make_depth_first_descendant_iterator(NodePointer const& node);
        ``]
        [
            Constructs and returns a `depth_first_iterator` that will iterate
            through the descendants of the specified node.
        ]
    ]
    [
        [Iteration]
        [``
            template <typename NodePointer, typename UnaryFunction>
            void
                depth_first_iterate(
                    NodePointer const& node
                  , UnaryFunction function
                );
        ``]
        [
            Iterates through the specified node and its descendants in
            depth-first fashion, passing each node pointer dereferenced to
            the specified __Unary_Function__ object.
        ]
    ]
    [
        [Descendant iteration]
        [``
            template <typename NodePointer, typename UnaryFunction>
            void
                depth_first_iterate_descendants(
                    NodePointer const& node
                  , UnaryFunction function
                );
        ``]
        [
            Iterates through the descendants of the specified node in
            depth-first fashion, passing each element dereferenced to
            the specified __Unary_Function__ object.
        ]
    ]
    [
        [Equality]
        [``
            template <typename NP1, typename NP2, typename MCI1, typename MCI2>
            typename _enable_if_<_mpl_equal_to_<MCI1,MCI2>,bool>::type
                operator==(
                    depth_first_iterator<NP1,MCI1> const&
                  , depth_first_iterator<NP2,MCI2> const&
                );
        ``]
        [Defined by the __Input_Iterator__ concept.]
    ]
    [
        [Inequality]
        [``
            template <typename NP1, typename NP2, typename MCI1, typename MCI2>
            typename _enable_if_<_mpl_equal_to_<MCI1,MCI2>,bool>::type
                operator!=(
                    depth_first_iterator<NP1,MCI1> const&
                  , depth_first_iterator<NP2,MCI2> const&
                );
        ``]
        [Defined by the __Input_Iterator__ concept.]
    ]
]
[endsect] [/ Non-members]

[endsect] [/ depth_first_iterator]

