[/=============================================================================
    Copyright (C) 2011 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:raw_binary_node_base `raw_binary_node_base`]

[section Synopsis]
[reference__raw_binary_node_base]
[endsect]

[section Description]
The __raw_binary_node__ class template inherits its functionality from this
class template.  They differ only with regard to template parameters: the
__raw_binary_node__ class template is meant to be used directly as a data
structure, while `raw_binary_node_base` is more suitable as a base class
template from which __Tree_Node__ adaptor class templates can derive via
the __raw_binary_node_gen__ __Type_Generator__.
[endsect]

[section:definition Where defined]
``
#include <__boost_tree_node_raw_binary_node_hpp__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Requirements][Default]]
    [
        [`Derived`]
        [The most descendant type that will inherit from this one.]
        []
        []
    ]
    [
        [`T`]
        [The data type.]
        []
        []
    ]
]
[endsect]

[section:model_of Model of]

  * __Binary_Tree_Node__
  * __Base_Tree_Node__
  * __Cloneable_Tree_Node__
  * __Default_Constructible__ if `T` is __Default_Constructible__
  * __Copy_Constructible__
  * __Assignable__ if `T` is __Assignable__

[endsect]

[section:public_bases Public Base Classes]
__tree_node_base__
[endsect]

[section:members Public Members]
[table
    [[Name][Expression][Where defined]]
    [
        [Data type]
        [`typename traits::data_type`]
        [__Tree_Node__]
    ]
    [
        [Pointer type]
        [`pointer`]
        [__Tree_Node__]
    ]
    [
        [Pointer-to-const type]
        [`const_pointer`]
        [__Tree_Node__]
    ]
    [
        [Child iterator type]
        [`child_iterator`]
        [__Non_Associative_Tree_Node__]
    ]
    [
        [Immutable child iterator type]
        [`const_child_iterator`]
        [__Non_Associative_Tree_Node__]
    ]
    [
        [Default constructor]
        [`raw_binary_node_base();`]
        [__Default_Constructible__]
    ]
    [
        [Constructor with data]
        [`explicit raw_binary_node_base(typename traits::data_type const&);`]
        [__Base_Tree_Node__]
    ]
    [
        [Copy constructor]
        [`raw_binary_node_base(raw_binary_node_base const&);`]
        [__Copy_Constructible__]
    ]
    [
        [Assignment operator]
        [`raw_binary_node_base& operator=(raw_binary_node_base const&);`]
        [__Assignable__]
    ]
    [
        [Clone]
        [`pointer clone() const;`]
        [__Cloneable_Tree_Node__]
    ]
    [
        [Data access]
        [`typename traits::data_type const& get_data() const;`]
        [__Tree_Node__]
    ]
    [
        [Data access]
        [`typename traits::data_type& get_data();`]
        [__Tree_Node__]
    ]
    [
        [Parent access]
        [`const_pointer get_parent() const;`]
        [__Tree_Node__]
    ]
    [
        [Parent access]
        [`pointer get_parent();`]
        [__Tree_Node__]
    ]
    [
        [Left child creation with data]
        [`pointer add_left_child(typename traits::data_type const&);`]
        [__Binary_Tree_Node__]
    ]
    [
        [Left child creation]
        [`pointer add_left_child();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Left child copy creation]
        [`pointer add_left_child_copy(const_pointer const&);`]
        [__Binary_Tree_Node__]
    ]
    [
        [Right child creation with data]
        [`pointer add_right_child(typename traits::data_type const&);`]
        [__Binary_Tree_Node__]
    ]
    [
        [Right child creation]
        [`pointer add_right_child();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Right child copy creation]
        [`pointer add_right_child_copy(const_pointer const&);`]
        [__Binary_Tree_Node__]
    ]
    [
        [Left child access]
        [`const_pointer get_left_child() const;`]
        [__Binary_Tree_Node__]
    ]
    [
        [Left child access]
        [`pointer get_left_child();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Right child access]
        [`const_pointer get_right_child() const;`]
        [__Binary_Tree_Node__]
    ]
    [
        [Right child access]
        [`pointer get_right_child();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Children range begin access]
        [`const_child_iterator get_child_begin() const;`]
        [__Tree_Node__]
    ]
    [
        [Children range begin access]
        [`child_iterator get_child_begin();`]
        [__Tree_Node__]
    ]
    [
        [Children range past-the-end access]
        [`const_child_iterator get_child_end() const;`]
        [__Tree_Node__]
    ]
    [
        [Children range past-the-end access]
        [`child_iterator get_child_end();`]
        [__Tree_Node__]
    ]
    [
        [Rotate left]
        [`pointer rotate_left();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Rotate right]
        [`pointer rotate_right();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Remove left child]
        [`void remove_left_child();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Remove right child]
        [`void remove_right_child();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Remove all children]
        [`void remove_all_children();`]
        [__Tree_Node__]
    ]
]
[endsect] [/ Members]

[endsect] [/ raw_binary_node_base]

