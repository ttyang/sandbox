[/=============================================================================
    Copyright (C) 2011-2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:nary_node_base_gen `nary_node_base_gen<Selector>`]

[section Synopsis]
[reference__nary_node_base_gen]
[endsect]

[section Description]
TODO.
[endsect]

[section:definition Where defined]
``
#include <__nary_node__header__>
``
[endsect]

[section:model_of Model of]
__Base_Type_Generator__
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Requirements][Default]]
    [
        [`Selector`]
        [
            The type that determines the child container type of
            __nary_node_base__.
        ]
        [[^_is_recursive_selector_<Selector>] must return __mpl_true__.]
        [__ptr_dequeS__]
    ]
]
[endsect]

[section:expressions Expression Semantics]
Let `Derived` be the type that will inherit from __nary_node_base__.
Let `T` be the user data type.
Let `Selector` be a valid `nary_node_gen` template argument.

``
    typedef _mpl_apply_wrap2_<nary_node_base_gen<Selector>,Derived,T>::type r;
``

[*Return type:] [^_nary_node_base_<Derived,T,Selector>]

[endsect]

[section Complexity]
Compile time.
[endsect]

[endsect] [/ nary_node_base_gen]

