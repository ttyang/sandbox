[/=============================================================================
    Copyright (C) 2011 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:raw_associative_node `raw_associative_node`]

[section Synopsis]
[reference__raw_associative_node]
[endsect]

[section Description]
This class template is suitable for classes or algorithms that need to map keys
to child nodes in a tree node data structure that does not need to be exposed
to external code.  Objects of this type can be stored by value, and their
children can be accessed by their associated keys for fast lookup.

[important
    This component depends on __Boost_Utility_ContainerGen__, which is not yet
    a part of Boost.  For now, you must perform a Subversion checkout from the
    __SVN_Trac__.
]
[endsect]

[section:definition Where defined]
``
#include <__boost_tree_node_raw_associative_node_hpp__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Requirements][Default]]
    [
        [`Key`]
        [
            The type of a key object to be associated with a child of a
            `raw_associative_node`.
        ]
        []
        []
    ]
    [
        [`Data`]
        [The type of the object to be stored in a `raw_associative_node`.]
        []
        []
    ]
    [
        [`AssociativeContainerSelector`]
        [
            The type that determines the internal map types whose mapped types
            are the same as the pointer type.
        ]
        [
            It must be a type for which __associative_container_gen__ returns
            a valid container.
        ]
        [`mapS`]
    ]
]
[endsect]

[section:model_of Model of]

  * __Associative_Tree_Node__
  * __Default_Constructible__ if `Data` is __Default_Constructible__
  * __Copy_Constructible__
  * __Assignable__ if `Data` is __Assignable__

[endsect]

[section:public_bases Public Base Classes]
None.
[endsect]

[section Members]
[table
    [[Name][Expression][Where defined]]
    [
        [Key type]
        [`key_type`]
        [__Associative_Tree_Node__]
    ]
    [
        [Data type]
        [`data_type`]
        [__Tree_Node__]
    ]
    [
        [Pointer type]
        [`pointer`]
        [__Tree_Node__]
    ]
    [
        [Pointer-to-const type]
        [`const_pointer`]
        [__Tree_Node__]
    ]
    [
        [Child iterator type]
        [`child_iterator`]
        [__Associative_Tree_Node__]
    ]
    [
        [Immutable child iterator type]
        [`const_child_iterator`]
        [__Associative_Tree_Node__]
    ]
    [
        [Default constructor]
        [`raw_associative_node();`]
        [__Default_Constructible__]
    ]
    [
        [Constructor with data]
        [`explicit raw_associative_node(data_type const&);`]
        [`raw_associative_node`]
    ]
    [
        [Copy constructor]
        [`raw_associative_node(raw_associative_node const&);`]
        [__Copy_Constructible__]
    ]
    [
        [Assignment operator]
        [`raw_associative_node& operator=(raw_associative_node const&);`]
        [__Assignable__]
    ]
    [
        [Data access]
        [`data_type const& get_data() const;`]
        [__Tree_Node__]
    ]
    [
        [Data access]
        [`data_type& get_data();`]
        [__Tree_Node__]
    ]
    [
        [Parent access]
        [`const_pointer get_parent() const;`]
        [__Tree_Node__]
    ]
    [
        [Parent access]
        [`pointer get_parent();`]
        [__Tree_Node__]
    ]
    [
        [Child creation with data]
        [`pointer add_child(key_type const&, data_type const&);`]
        [__Associative_Tree_Node__]
    ]
    [
        [Child creation]
        [`pointer add_child(key_type const&);`]
        [__Associative_Tree_Node__]
    ]
    [
        [Child copy creation]
        [`pointer add_child_copy(key_type const&, const_pointer const&);`]
        [__Associative_Tree_Node__]
    ]
    [
        [Children range begin access]
        [`const_child_iterator get_child_begin() const;`]
        [__Tree_Node__]
    ]
    [
        [Children range begin access]
        [`child_iterator get_child_begin();`]
        [__Tree_Node__]
    ]
    [
        [Children range past-the-end access]
        [`const_child_iterator get_child_end() const;`]
        [__Tree_Node__]
    ]
    [
        [Children range past-the-end access]
        [`child_iterator get_child_end();`]
        [__Tree_Node__]
    ]
    [
        [Children range]
        [
            [^_std_pair_<const_child_iterator,const_child_iterator>
            get_children() const;]
        ]
        [__Tree_Node__]
    ]
    [
        [Children range]
        [
            [^_std_pair_<child_iterator,child_iterator>
            get_children();]
        ]
        [__Tree_Node__]
    ]
    [
        [Child search]
        [`const_child_iterator find_child(key_type const&) const;`]
        [__Associative_Tree_Node__]
    ]
    [
        [Child search]
        [`child_iterator find_child(key_type const&);`]
        [__Associative_Tree_Node__]
    ]
    [
        [Child search range]
        [
            [^_std_pair_<const_child_iterator,const_child_iterator>
            find_children(key_type const&) const;]
        ]
        [__Associative_Tree_Node__]
    ]
    [
        [Child search range]
        [
            [^_std_pair_<child_iterator,child_iterator>
            find_children(key_type const&);]
        ]
        [__Associative_Tree_Node__]
    ]
    [
        [Remove children]
        [`std::size_t remove_children(key_type const&);`]
        [__Associative_Tree_Node__]
    ]
    [
        [Remove all children]
        [`void remove_all_children();`]
        [__Tree_Node__]
    ]
]
[endsect] [/ Members]

[section Example]
<__example_raw_associative_node_cpp__>
[endsect]

[endsect] [/ raw_associative_node]

