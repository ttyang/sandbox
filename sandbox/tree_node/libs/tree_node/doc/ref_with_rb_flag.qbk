[/=============================================================================
    Copyright (C) 2011-2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:with_rb_flag `with_red_black_flag<BaseGenerator,T1,T2>`]

[section Description]
In addition to the other operations it inherits from the return type of
`BaseGenerator`, this __Tree_Node__ adaptor provides access to a flag that
indicates whether the node is red or black.
[endsect]

[section:definition Where defined]
``
#include <__with_red_black_flag__header__>
``

Forward-declared:

``
#include <__with_red_black_flag__forward_header__>
``

To register under __Boost_Typeof__:

``
#include <__with_red_black_flag__typeof_header__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Default]]
    [
        [`BaseGenerator`]
        [
            The __Base_Type_Generator__ model from whose return type
            `with_red_black_flag` will ultimately inherit.
        []
    ]
    [
        [`T1`]
        [The key type if `T2` is specified; the user data type otherwise.]
        []
    ]
    [
        [`T2`]
        [The user data type if specified; ignored otherwise.]
        [`void`]
    ]
]
[endsect]

[section:model_of Model of]

  * __Associative_Tree_Node__ if `T2` is specified;
    __Non_Associative_Tree_Node__ otherwise
  * any other concept that the return type of `BaseGenerator` models

[endsect]

[section:public_bases Public Base Classes]
[reference__with_red_black_flag__bases]
[endsect]

[section:members Public Members]
In addition to those inherited from __tree_node_with_red_black_flag_base__ and
from the return type of `BaseGenerator`, the following members are defined:

[table
    [[Name][Definition][Where defined]]
    [
        [Emplacement constructor]
        [[reference__with_red_black_flag__emplacement_ctor]]
        [__Tree_Node__]
    ]
    [
        [Emplacement constructor with allocator]
        [[reference__with_red_black_flag__emplacement_ctor_w_allocator]]
        [`with_red_black_flag`]
    ]
    [
        [Copy constructor]
        [``
            with_red_black_flag(with_red_black_flag const& copy);
        ``]
        [__Copy_Constructible__]
    ]
    [
        [Copy constructor with allocator]
        [``
            with_red_black_flag(
                with_red_black_flag const& copy
              , typename traits::allocator_reference allocator
            );
        ``]
        [`with_red_black_flag`]
    ]
    [
        [Move constructor]
        [``
            with_red_black_flag(with_red_black_flag&& source);
        ``]
        [__Movable__]
    ]
    [
        [Move constructor with allocator]
        [``
            with_red_black_flag(
                with_red_black_flag&& source
              , typename traits::allocator_reference allocator
            );
        ``]
        [`with_red_black_flag`]
    ]
    [
        [Copy assignment operator]
        [``
            with_red_black_flag& operator=(with_red_black_flag const& copy);
        ``]
        [__Assignable__]
    ]
    [
        [Move assignment operator]
        [``
            with_red_black_flag& operator=(with_red_black_flag&& source);
        ``]
        [__Movable__]
    ]
]
[endsect]

[section:non_members Non-members]
Same as those inherited from __tree_node_with_red_black_flag_base__ and from
the return type of `BaseGenerator`.
[endsect]

[endsect] [/ with_red_black_flag]

