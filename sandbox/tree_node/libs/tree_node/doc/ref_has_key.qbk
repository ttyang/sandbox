[/=============================================================================
    Copyright (C) 2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:has_key `has_key()`]

[section Function Synopsis]
[reference__tree_node__has_key]
[endsect]

[section Function Description]
This function returns `true` if the matching value exists in the specified
node--that is, if `get(node, Key())` and `get<Key>(node)` are well-formed
expressions--`false` otherwise.
[endsect]

[section:result_of Return Type Metafunction Synopsis]
[reference__tree_node__result_of__has_key]
[endsect]

[section Return Type Metafunction Description]
Let `Node` be a (possibly `const`-qualified) __Tree_Node__ model.

``
    typedef result_of::has_key<Node> r;
``

[*Return type:] __mpl_true__ if, in any `Node node`, the matching value
exists--that is, if `get(node, Key())` and `get<Key>(node)` are well-formed
expressions--__mpl_false__ otherwise.
[endsect]

[section:definition Where defined]
``
#include <__has_key__header__>
``
[endsect]

[endsect] [/ has_key]

