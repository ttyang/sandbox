[/=============================================================================
    Copyright (C) 2011 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:raw_binary_node `raw_binary_node`]

[section Synopsis]
[reference__raw_binary_node]
[endsect]

[section Description]
This class template is suitable for classes or algorithms that require a
binary tree node data structure but do not need to expose it to external
code.  Objects of this type can be stored by value.
[endsect]

[section:definition Where defined]
``
#include <__boost_tree_node_raw_binary_node_hpp__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Requirements][Default]]
    [
        [`T`]
        [The type of the object to be stored in a `raw_binary_node`.]
        []
        []
    ]
]
[endsect]

[section:model_of Model of]

  * __Binary_Tree_Node__
  * __Default_Constructible__ if `T` is __Default_Constructible__
  * __Copy_Constructible__
  * __Assignable__ if `T` is __Assignable__

[endsect]

[section:public_bases Public Base Classes]
None.
[endsect]

[section Members]
[table
    [[Name][Expression][Where defined]]
    [
        [Data type]
        [`data_type`]
        [__Tree_Node__]
    ]
    [
        [Pointer type]
        [`pointer`]
        [__Tree_Node__]
    ]
    [
        [Pointer-to-const type]
        [`const_pointer`]
        [__Tree_Node__]
    ]
    [
        [Child iterator type]
        [`child_iterator`]
        [__Non_Associative_Tree_Node__]
    ]
    [
        [Immutable child iterator type]
        [`const_child_iterator`]
        [__Non_Associative_Tree_Node__]
    ]
    [
        [Default constructor]
        [`raw_binary_node();`]
        [__Default_Constructible__]
    ]
    [
        [Constructor with data]
        [`explicit raw_binary_node(data_type const&);`]
        [`raw_binary_node`]
    ]
    [
        [Copy constructor]
        [`raw_binary_node(raw_binary_node const&);`]
        [__Copy_Constructible__]
    ]
    [
        [Assignment operator]
        [`raw_binary_node& operator=(raw_binary_node const&);`]
        [__Assignable__]
    ]
    [
        [Data access]
        [`data_type const& get_data() const;`]
        [__Tree_Node__]
    ]
    [
        [Data access]
        [`data_type& get_data();`]
        [__Tree_Node__]
    ]
    [
        [Parent access]
        [`const_pointer get_parent() const;`]
        [__Tree_Node__]
    ]
    [
        [Parent access]
        [`pointer get_parent();`]
        [__Tree_Node__]
    ]
    [
        [Left child creation with data]
        [`pointer add_left_child(data_type const&);`]
        [__Binary_Tree_Node__]
    ]
    [
        [Left child creation]
        [`pointer add_left_child();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Left child copy creation]
        [`pointer add_left_child_copy(const_pointer const&);`]
        [__Binary_Tree_Node__]
    ]
    [
        [Right child creation with data]
        [`pointer add_right_child(data_type const&);`]
        [__Binary_Tree_Node__]
    ]
    [
        [Right child creation]
        [`pointer add_right_child();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Right child copy creation]
        [`pointer add_right_child_copy(const_pointer const&);`]
        [__Binary_Tree_Node__]
    ]
    [
        [Left child access]
        [`const_pointer get_left_child() const;`]
        [__Binary_Tree_Node__]
    ]
    [
        [Left child access]
        [`pointer get_left_child();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Right child access]
        [`const_pointer get_right_child() const;`]
        [__Binary_Tree_Node__]
    ]
    [
        [Right child access]
        [`pointer get_right_child();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Children range begin access]
        [`const_child_iterator get_child_begin() const;`]
        [__Tree_Node__]
    ]
    [
        [Children range begin access]
        [`child_iterator get_child_begin();`]
        [__Tree_Node__]
    ]
    [
        [Children range past-the-end access]
        [`const_child_iterator get_child_end() const;`]
        [__Tree_Node__]
    ]
    [
        [Children range past-the-end access]
        [`child_iterator get_child_end();`]
        [__Tree_Node__]
    ]
    [
        [Children range]
        [
            [^_std_pair_<const_child_iterator,const_child_iterator>
            get_children() const;]
        ]
        [__Tree_Node__]
    ]
    [
        [Children range]
        [
            [^_std_pair_<child_iterator,child_iterator>
            get_children();]
        ]
        [__Tree_Node__]
    ]
    [
        [Rotate left]
        [`pointer rotate_left();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Rotate right]
        [`pointer rotate_right();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Remove left child]
        [`void remove_left_child();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Remove right child]
        [`void remove_right_child();`]
        [__Binary_Tree_Node__]
    ]
    [
        [Remove all children]
        [`void remove_all_children();`]
        [__Tree_Node__]
    ]
]
[endsect] [/ Members]

[section Example]
<__example_raw_binary_node_cpp__>
[endsect]

[endsect] [/ raw_binary_node]

