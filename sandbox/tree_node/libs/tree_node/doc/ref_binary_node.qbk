[/=============================================================================
    Copyright (C) 2011-2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:binary_node `binary_node<T,Size,AllocatorSelector>`]

[section Description]
This class template is suitable for classes or algorithms that require a
binary tree node data structure.  Objects of this type can be stored by value.

If the user data type models the __Fusion_Associative_Sequence__ concept, then
each of the elements within can be also be obtained through key-value access
and set through key-value modification as defined by the __Tree_Node__ concept;
more specifically, for some object `node` of type `Node` such that `Node` is a
template instantiation of `binary_node`, then for any type `Key` such that
[^_fusion_has_key_<Key>(get<_data_key_>(node))] returns `true`, so does
[^_has_key_<Key>(node)].
[endsect]

[section:definition Where defined]
``
#include <__binary_node__header__>
``

Forward-declared:

``
#include <__binary_node__forward_header__>
``

To register under __Boost_Typeof__:

``
#include <__binary_node__typeof_header__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Default]]
    [
        [`T`]
        [The type of the user data to be stored in a `binary_node`.]
        []
    ]
    [
        [`Size`]
        [The size type.]
        [`uint32_t`]
    ]
    [
        [`AllocatorSelector`]
        [
            A __Unary_Metafunction_Class__ that takes in `binary_node` and
            returns either an allocator model or a mutable reference to one.
        ]
        [__std_allocator_selector__]
    ]
]
[endsect]

[section:model_of Model of]

  * __Binary_Tree_Node__
  * __Default_Constructible__ if `T` is __Default_Constructible__
  * __Copy_Constructible__ if `T` is __Copy_Constructible__
  * __Assignable__ if `T` is __Copy_Constructible__ and __Movable__
  * __Movable__ if `T` is __Movable__

[endsect]

[section:public_bases Public Base Classes]
[reference__binary_node__bases]
[endsect]

[section:members Public Members]
[table
    [[Name][Definition][Where defined]]
    [
        [Super type]
        [[reference__binary_node__super_t]]
        [__Tree_Node__]
    ]
    [
        [Data type, allocator type, allocator reference type]
        [[reference__binary_node__traits]]
        [__Tree_Node__]
    ]
    [
        [Pointer type]
        [[reference__binary_node__pointer]]
        [__Tree_Node__]
    ]
    [
        [Pointer-to-const type]
        [[reference__binary_node__const_pointer]]
        [__Tree_Node__]
    ]
    [
        [Iterator type]
        [[reference__binary_node__iterator]]
        [__Non_Associative_Tree_Node__]
    ]
    [
        [Immutable iterator type]
        [[reference__binary_node__const_iterator]]
        [__Non_Associative_Tree_Node__]
    ]
    [
        [Reverse iterator type]
        [[reference__binary_node__reverse_iterator]]
        [__Reversible_Tree_Node__]
    ]
    [
        [Immutable reverse iterator type]
        [[reference__binary_node__const_reverse_iterator]]
        [__Reversible_Tree_Node__]
    ]
    [
        [Size type]
        [[reference__binary_node__size_type]]
        [__Tree_Node__]
    ]
    [
        [Emplacement constructor]
        [[reference__binary_node__emplacement_ctor]]
        [__Tree_Node__]
    ]
    [
        [Emplacement constructor with allocator]
        [[reference__binary_node__emplacement_ctor_w_allocator]]
        [`binary_node`]
    ]
    [
        [Copy constructor]
        [``
            binary_node(binary_node const& copy);
        ``]
        [__Copy_Constructible__]
    ]
    [
        [Copy constructor with allocator]
        [``
            binary_node(
                binary_node const& copy
              , typename traits::allocator_reference allocator
            );
        ``]
        [`binary_node`]
    ]
    [
        [Move constructor]
        [``
            binary_node(binary_node&& source);
        ``]
        [__Movable__]
    ]
    [
        [Move constructor with allocator]
        [``
            binary_node(
                binary_node&& source
              , typename traits::allocator_reference allocator
            );
        ``]
        [`binary_node`]
    ]
    [
        [Copy assignment operator]
        [``
            binary_node& operator=(binary_node const&);
        ``]
        [__Assignable__]
    ]
    [
        [Move assignment operator]
        [``
            binary_node& operator=(binary_node&&);
        ``]
        [__Movable__]
    ]
    [
        [Parent access]
        [[reference__binary_node_base__get_parent_ptr__const]]
        [__Tree_Node__]
    ]
    [
        [Parent access]
        [[reference__binary_node_base__get_parent_ptr]]
        [__Tree_Node__]
    ]
    [
        [Left child creation]
        [[reference__binary_node_base__emplace_left]]
        [__Binary_Tree_Node__]
    ]
    [
        [Left child copy creation]
        [[reference__binary_node_base__insert_left]]
        [__Binary_Tree_Node__]
    ]
    [
        [Right child creation]
        [[reference__binary_node_base__emplace_right]]
        [__Binary_Tree_Node__]
    ]
    [
        [Right child copy creation]
        [[reference__binary_node_base__insert_right]]
        [__Binary_Tree_Node__]
    ]
    [
        [Left child access]
        [[reference__binary_node_base__get_left_child_ptr__const]]
        [__Binary_Tree_Node__]
    ]
    [
        [Left child access]
        [[reference__binary_node_base__get_left_child_ptr]]
        [__Binary_Tree_Node__]
    ]
    [
        [Right child access]
        [[reference__binary_node_base__get_right_child_ptr__const]]
        [__Binary_Tree_Node__]
    ]
    [
        [Right child access]
        [[reference__binary_node_base__get_right_child_ptr]]
        [__Binary_Tree_Node__]
    ]
    [
        [Children range begin access]
        [[reference__binary_node_base__cbegin]]
        [__Tree_Node__]
    ]
    [
        [Children range begin access]
        [[reference__binary_node_base__begin]]
        [__Tree_Node__]
    ]
    [
        [Children range past-the-end access]
        [[reference__binary_node_base__cend]]
        [__Tree_Node__]
    ]
    [
        [Children range past-the-end access]
        [[reference__binary_node_base__end]]
        [__Tree_Node__]
    ]
    [
        [Children reverse range begin access]
        [[reference__binary_node_base__crbegin]]
        [__Reversible_Tree_Node__]
    ]
    [
        [Children reverse range begin access]
        [[reference__binary_node_base__rbegin]]
        [__Reversible_Tree_Node__]
    ]
    [
        [Children reverse range past-the-end access]
        [[reference__binary_node_base__crend]]
        [__Reversible_Tree_Node__]
    ]
    [
        [Children reverse range past-the-end access]
        [[reference__binary_node_base__rend]]
        [__Reversible_Tree_Node__]
    ]
    [
        [Children range size query]
        [[reference__binary_node_base__size]]
        [__Tree_Node__]
    ]
    [
        [Rotate left]
        [[reference__binary_node_base__rotate_left]]
        [__Binary_Tree_Node__]
    ]
    [
        [Rotate right]
        [[reference__binary_node_base__rotate_right]]
        [__Binary_Tree_Node__]
    ]
    [
        [Remove left child]
        [[reference__binary_node_base__erase_left]]
        [__Binary_Tree_Node__]
    ]
    [
        [Remove right child]
        [[reference__binary_node_base__erase_right]]
        [__Binary_Tree_Node__]
    ]
    [
        [Leaf node query]
        [[reference__binary_node_base__empty]]
        [__Tree_Node__]
    ]
    [
        [Remove all children]
        [[reference__binary_node_base__clear]]
        [__Tree_Node__]
    ]
]
[endsect] [/ Members]

[section:non_members Non-Members]
Same as those defined in __binary_node_base__.
[endsect]

[section Example]
<__example_binary_node_cpp__>
[endsect]

[section Test]
<__test_binary_node_cpp__>
[endsect]

[endsect] [/ binary_node]

