[/=============================================================================
    Copyright (C) 2011-2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:with_rb_flag_gen `with_red_black_flag_gen<BaseGenerator>`]

[section Synopsis]
[reference__with_red_black_flag_gen]
[endsect]

[section Description]
TODO.
[endsect]

[section:definition Where defined]
``
#include <__with_red_black_flag__header__>
``
[endsect]

[section:model_of Model of]
__Node_Type_Generator__
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Default]]
    [
        [`BaseGenerator`]
        [
            The __Base_Type_Generator__ from whose return type
            __tree_node_with_red_black_flag__ will ultimately inherit.
        ]
        []
    ]
]
[endsect]

[section:expressions Expression Semantics]
Let `Key` be the key type.
Let `Data` be the user data type.
Let `BaseGenerator` be a valid `with_red_black_flag_gen` template argument.

``
    typedef _mpl_apply_wrap2_<
        with_red_black_flag_gen<BaseGenerator>
      , Key
      , Data
    >::type r;
``

[*Return type:]
[^_tree_node_with_red_black_flag_<BaseGenerator,Key,Data>]

``
    typedef _mpl_apply_wrap1_<
        with_red_black_flag_gen<BaseGenerator>
      , Data
    >::type r;
``

[*Return type:]
[^_tree_node_with_red_black_flag_<BaseGenerator,Data,void>]

[endsect]

[section Complexity]
Compile time.
[endsect]

[endsect] [/ with_red_black_flag_gen]

