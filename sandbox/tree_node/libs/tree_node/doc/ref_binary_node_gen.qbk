[/=============================================================================
    Copyright (C) 2011-2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:binary_node_gen `binary_node_gen<Size,AllocatorSelector>`]

[section Synopsis]
[reference__binary_node_gen]
[endsect]

[section Description]
TODO.
[endsect]

[section:definition Where defined]
``
#include <__binary_node__header__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Default]]
    [
        [`Size`]
        [The size type of the return type of this metafunction class.]
        [`uint32_t`]
    ]
    [
        [`AllocatorSelector`]
        [
            A __Unary_Metafunction_Class__ that takes in the return type of
            this metafunction class and returns either an allocator model or a
            mutable reference to one.
        ]
        [__std_allocator_selector__]
    ]
]
[endsect]

[section:model_of Model of]
__Node_Type_Generator__
[endsect]

[section:expressions Expression Semantics]
Let `T` be the user data type.

``
    typedef _mpl_apply_wrap1_<binary_node_gen<Size,AllocatorSelector>,T>::type
            r;
``

[*Return type:] [^_binary_node_<T,Size,AllocatorSelector>]

[endsect]

[section Complexity]
Compile time.
[endsect]

[endsect] [/ binary_node_gen]

