[/=============================================================================
    Copyright (C) 2011-2013 Cromwell D. Enage

    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
    [@http://www.boost.org/LICENSE_1_0.txt])
=============================================================================/]

[section:with_height `with_height<BaseGenerator,T1,T2,Height>`]

[section Description]
The [*height] of a tree node can be defined as the magnitude of the difference
between its ply and that of its deepest descendant.  In addition to the
operations it inherits from the return type of `BaseGenerator`, this
__Tree_Node__ adaptor provides constant-time access to the height of the node
by updating this information after structural modifications have been
performed.
[endsect]

[section:definition Where defined]
``
#include <__with_height__header__>
``

Forward-declared:

``
#include <__with_height__forward_header__>
``

To register under __Boost_Typeof__:

``
#include <__with_height__typeof_header__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Default]]
    [
        [`BaseGenerator`]
        [
            The __Base_Type_Generator__ from whose return type `with_height`
            will ultimately inherit.
        ]
        []
    ]
    [
        [`T1`]
        [The key type if `T2` is not `void`; the user data type otherwise.]
        []
    ]
    [
        [`T2`]
        [The user data type if not `void`; ignored otherwise.]
        [`void`]
    ]
    [
        [`Height`]
        [The height type.]
        [`std::size_t`]
    ]
]
[endsect]

[section:model_of Model of]

  * __Associative_Tree_Node__ if `T2` is not `void`;
    __Non_Associative_Tree_Node__ otherwise
  * any other concept that the return type of `BaseGenerator` models

[endsect]

[section:public_bases Public Base Classes]
[reference__with_height__bases]
[endsect]

[section:members Public Members]
In addition to those inherited from __tree_node_with_height_base__ and from the
return type of `BaseGenerator`, the following members are defined:

[table
    [[Name][Definition][Where defined]]
    [
        [Emplacement constructor]
        [[reference__with_height__emplacement_ctor]]
        [__Tree_Node__]
    ]
    [
        [Emplacement constructor with allocator]
        [[reference__with_height__emplacement_ctor_w_allocator]]
        [`with_height`]
    ]
    [
        [Copy constructor]
        [``
            with_height(with_height const& copy);
        ``]
        [__Copy_Constructible__]
    ]
    [
        [Copy constructor with allocator]
        [``
            with_height(
                with_height const& copy
              , typename traits::allocator_reference allocator
            );
        ``]
        [`with_height`]
    ]
    [
        [Move constructor]
        [``
            with_height(with_height&& source);
        ``]
        [__Movable__]
    ]
    [
        [Move constructor with allocator]
        [``
            with_height(
                with_height&& source
              , typename traits::allocator_reference allocator
            );
        ``]
        [`with_height`]
    ]
    [
        [Copy assignment operator]
        [``
            with_height& operator=(with_height const& copy);
        ``]
        [__Assignable__]
    ]
    [
        [Move assignment operator]
        [``
            with_height& operator=(with_height&& source);
        ``]
        [__Movable__]
    ]
]
[endsect]

[section:non_members Non-members]
Same as those inherited from __tree_node_with_height_base__ and from the return
type of `BaseGenerator`.
[endsect]

[endsect] [/ with_height]

