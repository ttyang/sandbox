[article Bidirectional Grid Graph
    [quickbook 1.5]
    [copyright 2012 Cromwell Enage]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[def __Runtime_Complexity__ [@http://en.wikipedia.org/wiki/Amortized_analysis Runtime Complexity]]
[def __Grid_Graph__ [@GridGraph.html [*Grid Graph]]]
[def __Bidirectional_Graph__ [@boost:libs/graph/doc/BidirectionalGraph.html [*Bidirectional Graph]]]
[def _typeof_ [@boost:doc/html/typeof/refe.html BOOST_TYPEOF]]
[def _initialized_value_ [@boost:libs/utility/value_init.htm#initialized_value boost::initialized_value]]
[def _graph_traits_ [@boost:libs/graph/doc/graph_traits.html boost::graph_traits]]
[def _edge_key_trait_ [@edge_key_trait.html boost::edge_key_trait]]
[def _vertex_coordinate_trait_ [@vertex_coordinate_trait.html boost::vertex_coordinate_trait]]
[def __zeta_grid_graph__ [@zeta_grid_graph.html `boost::zeta_grid_graph`]]
[def __bitset_grid_graph__ [@bitset_grid_graph.html `boost::bitset_grid_graph`]]
[def __bitruncated_cubic_honeycomb_graph__ [@btrnc_cubic_hcomb_graph.html `boost::bitruncated_cubic_honeycomb_graph`]]
[def __upsilon_grid_graph__ [@upsilon_grid_graph.html `boost::upsilon_grid_graph`]]

[section Description]
Models of this concept represent grid structures by matching their vertices to
the corresponding grid points.  Only vertices that are next to each other
according to the grid structure have in-edges to and from each other.
[endsect]

[section Refinement of]

  * __Grid_Graph__
  * __Bidirectional_Graph__

[endsect]

[variablelist Notation
    [[`Graph`][A type that models the [*Bidirectional Grid Graph] concept.]]
    [[`const_graph`][An object of type `Graph const&`.]]
    [
        [`v`]
        [
            An object of type [^_graph_traits_<Graph>::vertex_descriptor]
            `const&`.
        ]
    ]
    [[`key`][An object of type [^_edge_key_trait_<Graph>::type] `const&`.]]
    [[`distance`][An unsigned integer type.]]
]

[section:types Associated Types]
None beyond those defined by the __Grid_Graph__ and __Bidirectional_Graph__
concepts.
[endsect]

[section:expressions Valid Expressions and Semantics]
In addition to the expressions defined in the __Grid_Graph__ and
__Bidirectional_Graph__ concepts, the following expressions must be valid.

[table
    [
        [Name]
        [Expression]
        [Return Type]
        [Semantics]
        [__Runtime_Complexity__]
    ]
    [
        [Previous vertex]
        [``
            const_graph.previous(v, key, distance)
        ``]
        [``
            _graph_traits_<Graph>::vertex_descriptor
        ``]
        [
            Equivalent to, but more efficient than:
        ``
            _graph_traits_<Graph>::vertex_descriptor u = v;

            for (
                _typeof_(distance) d = _initialized_value_;
                d < distance;
                ++d
            )
            {
                u = const_graph.previous(u, key);
            }

            return u;
        ``
        ]
        [
            Linear with respect to the in-degree of `v`; amortized constant
            with respect to `distance`
        ]
    ]
]
[endsect]

[section Models]

  * __zeta_grid_graph__
  * __bitset_grid_graph__
  * __bitruncated_cubic_honeycomb_graph__
  * __upsilon_grid_graph__

[endsect]

