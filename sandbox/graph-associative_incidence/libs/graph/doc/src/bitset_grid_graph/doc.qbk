[article bitset_grid_graph
    [quickbook 1.5]
    [copyright 2012 Cromwell Enage]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[def __SVN_Trac__ [@http://svn.boost.org/ SVN Trac]]
[def __Boost_ContainerGen__ [@http://svn.boost.org/svn/boost/sandbox/container_gen/libs/container_gen/doc/html/ [*Boost.ContainerGen]]]
[def __MPL_Integral_Constant__ [@boost:libs/mpl/doc/refmanual/integral-constant.html [*MPL Integral Constant]]]
[def __Unary_Metafunction_Class__ [@boost:libs/mpl/doc/refmanual/metafunction-class.html [*Unary Metafunction Class]]]
[def __Graph__ [@boost:libs/graph/doc/Graph.html [*Graph]]]
[def __Incidence_Graph__ [@boost:libs/graph/doc/IncidenceGraph.html [*Incidence Graph]]]
[def __Bidirectional_Graph__ [@boost:libs/graph/doc/BidirectionalGraph.html [*Bidirectional Graph]]]
[def __Associative_Incidence_Graph__ [@AssociativeIncidenceGraph.html [*Associative Incidence Graph]]]
[def __Bidirectional_Associative_Incidence_Graph__ [@BidirAssocIncidenceGraph.html [*Bidirectional Associative Incidence Graph]]]
[def __Grid_Graph__ [@GridGraph.html [*Grid Graph]]]
[def __Bidirectional_Grid_Graph__ [@BidirectionalGridGraph.html [*Bidirectional Grid Graph]]]
[def __Indexable_Incidence_Graph__ [@IndexableIncidenceGraph.html [*Indexable Incidence Graph]]]
[def __Bidirectional_Indexable_Incidence_Graph__ [@BidirIndexIncidenceGraph.html [*Bidirectional Indexable Incidence Graph]]]
[def __Vertex_List_Graph__ [@boost:libs/graph/doc/VertexListGraph.html [*Vertex List Graph]]]
[def __Edge_List_Graph__ [@boost:libs/graph/doc/EdgeListGraph.html [*Edge List Graph]]]
[def __Adjacency_Graph__ [@boost:libs/graph/doc/AdjacencyGraph.html [*Adjacency Graph]]]
[def __Adjacency_Matrix__ [@boost:libs/graph/doc/AdjacencyMatrix.html [*Adjacency Matrix]]]
[def __Property_Graph__ [@boost:libs/graph/doc/PropertyGraph.html [*Property Graph]]]
[def __Default_Constructible__ [@http://www.sgi.com/tech/stl/DefaultConstructible.html [*Default Constructible]]]
[def __Copy_Constructible__ [@boost:libs/utility/CopyConstructible.html [*Copy Constructible]]]
[def __Assignable__ [@boost:libs/utility/Assignable.html [*Assignable]]]
[def _std_pair_ [@http://www.sgi.com/tech/stl/pair.html std::pair]]
[def _std_tr1_array_ [@boost:doc/html/boost_tr1/subject_list.html#boost_tr1.subject_list.array std::tr1::array]]
[def _property_map_ [@boost:libs/graph/doc/property_map.html property_map]]
[def _graph_traits_ [@boost:libs/graph/doc/graph_traits.html graph_traits]]
[def __std_allocator_selector__ [@http://svn.boost.org/svn/boost/sandbox/container_gen/libs/container_gen/doc/html/container_gen/reference/selectors.html `boost::std_allocator_selector`]]
[def _edge_key_trait_ [@edge_key_trait.html edge_key_trait]]
[def _vertex_dimension_trait_ [@vertex_dimension_trait.html vertex_dimension_trait]]
[def __boost_graph_bitset_grid_graph_fwd_hpp__ [@../../../boost/graph/bitset_grid_graph_fwd.hpp boost/graph/bitset_grid_graph_fwd.hpp]]
[def __boost_graph_bitset_grid_graph_hpp__ [@../../../boost/graph/bitset_grid_graph.hpp boost/graph/bitset_grid_graph.hpp]]

[section Description]
BGL representation of a multi-dimensional grid whose vertices are bitsets.  Two
vertices are considered adjacent to each other if their disjunction contains
exactly one bit on.  The position of this bit is the edge key that each of the
adjacent vertices associates with the other.  Therefore, a `bitset_grid_graph`
has as many edge keys as each vertex has bits; this bit count also represents
the number of dimensions.

In each dimension, a `bitset_grid_graph` has length `2` (`true` and `false`)
and wraps around.

This data structure is an *implicit graph*, which means that its vertices and
edges take up no internal memory.
[endsect]

[important
    This component depends on __Boost_ContainerGen__, which is not yet a part
    of Boost.  For now, you must perform a Subversion checkout from the
    __SVN_Trac__.
]

[section:declaration Where Declared]
``
#include <__boost_graph_bitset_grid_graph_fwd_hpp__>
``
[endsect]

[section:definition Where Defined]
``
#include <__boost_graph_bitset_grid_graph_hpp__>
``
[endsect]

[section:tpl_param Template Parameters]
[table
    [[Parameter][Description][Requirements][Default]]
    [
        [`BitCount`]
        [Compile-time representation of the number of bits in each vertex.]
        [
            It must model the __MPL_Integral_Constant__ concept, and its value
            must not be less than `2`.
        ]
        []
    ]
    [
        [`VertexIndex`]
        [The type used to represent the number of vertices in this graph.]
        [It must be an unsigned integer type.]
        [``
            typename _graph_traits_<bitset_grid_graph>::degree_size_type
        ``]
    ]
    [
        [`EdgeIndex`]
        [The type used to represent the number of vertices in this graph.]
        [It must be an unsigned integer type.]
        [``
            typename _graph_traits_<bitset_grid_graph>::vertices_size_type
        ``]
    ]
    [
        [`AllocSel`]
        [
            A metafunction class that takes in the value type of `BitCount`
            and returns an allocator model.
        ]
        [It must model the __Unary_Metafunction_Class__ concept.]
        [__std_allocator_selector__]
    ]
]
[endsect]

[section:model_of Model of]

  * __Bidirectional_Grid_Graph__
  * __Bidirectional_Indexable_Incidence_Graph__
  * __Vertex_List_Graph__
  * __Edge_List_Graph__
  * __Adjacency_Graph__
  * __Adjacency_Matrix__
  * __Property_Graph__
  * __Default_Constructible__
  * __Copy_Constructible__
  * __Assignable__

[endsect]

[section:public_bases Public Base Classes]
None.
[endsect]

[section Members]
[table
    [[Name][Definition][Where defined]]
    [
        [Default constructor]
        [``
        bitset_grid_graph();
        ``]
        [__Default_Constructible__]
    ]
    [
        [Copy constructor]
        [``
        bitset_grid_graph(bitset_grid_graph const& copy);
        ``]
        [__Copy_Constructible__]
    ]
    [
        [Assignment operator]
        [``
        bitset_grid_graph& operator=(bitset_grid_graph const& copy);
        ``]
        [__Assignable__]
    ]
    [
        [Dimension count]
        [``
        typename _vertex_dimension_trait_<bitset_grid_graph>::type
            dimensions() const;
        ``]
        [__Grid_Graph__]
    ]
    [
        [Dimension length]
        [``
        boost::uint8_t
            length(
                typename _vertex_dimension_trait_<
                    bitset_grid_graph
                >::type const& dimension
            ) const;
        ``]
        [__Grid_Graph__]
    ]
    [
        [Dimension wraparound query]
        [``
        bool
            wrapped(
                typename _vertex_dimension_trait_<
                    bitset_grid_graph
                >::type const& dimension
            ) const;
        ``]
        [__Grid_Graph__]
    ]
    [
        [Next vertex]
        [``
        template <typename Distance>
        typename _graph_traits_<bitset_grid_graph>::vertex_descriptor
            next(
                typename _graph_traits_<
                    bitset_grid_graph
                >::vertex_descriptor const& vertex
              , typename _edge_key_trait_<bitset_grid_graph>::type const& key
              , Distance const& distance
            ) const;
        ``]
        [__Grid_Graph__]
    ]
    [
        [Previous vertex]
        [``
        template <typename Distance>
        typename _graph_traits_<bitset_grid_graph>::vertex_descriptor
            previous(
                typename _graph_traits_<
                    bitset_grid_graph
                >::vertex_descriptor const& vertex
              , typename _edge_key_trait_<bitset_grid_graph>::type const& key
              , Distance const& distance
            ) const;
        ``]
        [__Bidirectional_Grid_Graph__]
    ]
    [
        [Next vertex]
        [``
        typename _graph_traits_<bitset_grid_graph>::vertex_descriptor
            next(
                typename _graph_traits_<
                    bitset_grid_graph
                >::vertex_descriptor const& vertex
              , typename _edge_key_trait_<bitset_grid_graph>::type const& key
            ) const;
        ``]
        [__Associative_Incidence_Graph__]
    ]
    [
        [Previous vertex]
        [``
        typename _graph_traits_<bitset_grid_graph>::vertex_descriptor
            previous(
                typename _graph_traits_<
                    bitset_grid_graph
                >::vertex_descriptor const& vertex
              , typename _edge_key_trait_<bitset_grid_graph>::type const& key
            ) const;
        ``]
        [__Bidirectional_Associative_Incidence_Graph__]
    ]
]
[endsect]

[section Non-members]
[table
    [[Name][Definition][Where defined]]
    [
        [Null vertex]
        [``
        typename _graph_traits_<bitset_grid_graph>::vertex_descriptor
            typename _graph_traits_<bitset_grid_graph>::null_vertex();
        ``]
        [__Graph__]
    ]
    [
        [Edge key count]
        [``
        typename _graph_traits_<bitset_grid_graph>::degree_size_type
            num_edge_keys(bitset_grid_graph const& graph);
        ``]
        [__Associative_Incidence_Graph__]
    ]
    [
        [Edge key indexed access]
        [``
        typename _edge_key_trait_<bitset_grid_graph>::type
            edge_key(
                typename _graph_traits_<
                    bitset_grid_graph
                >::degree_size_type const& index
              , bitset_grid_graph const& graph
            );
        ``]
        [__Associative_Incidence_Graph__]
    ]
    [
        [Vertex range]
        [``
        _std_pair_<
            typename _graph_traits_<bitset_grid_graph>::vertex_iterator
          , typename _graph_traits_<bitset_grid_graph>::vertex_iterator
        >
            vertices(bitset_grid_graph const& graph);
        ``]
        [__Vertex_List_Graph__]
    ]
    [
        [Vertex count]
        [``
        typename _graph_traits_<bitset_grid_graph>::vertices_size_type const&
            num_vertices(bitset_grid_graph const& graph);
        ``]
        [__Vertex_List_Graph__]
    ]
    [
        [Vertex indexed access]
        [``
        typename _graph_traits_<bitset_grid_graph>::vertex_descriptor
            vertex(
                typename _graph_traits_<
                    bitset_grid_graph
                >::vertices_size_type const& index
              , bitset_grid_graph const& graph
            );
        ``]
        [bitset_grid_graph]
    ]
    [
        [Edge range]
        [``
        _std_pair_<
            typename _graph_traits_<bitset_grid_graph>::edge_iterator
          , typename _graph_traits_<bitset_grid_graph>::edge_iterator
        >
            edges(bitset_grid_graph const& graph);
        ``]
        [__Edge_List_Graph__]
    ]
    [
        [Edge count]
        [``
        typename _graph_traits_<bitset_grid_graph>::edges_size_type const&
            num_edges(bitset_grid_graph const& graph);
        ``]
        [__Edge_List_Graph__]
    ]
    [
        [Edge indexed access]
        [``
        typename _graph_traits_<bitset_grid_graph>::edge_descriptor
            edge_at(
                typename _graph_traits_<
                    bitset_grid_graph
                >::edges_size_type const& index
              , zeta_grid_graph const& graph
            );
        ``]
        [bitset_grid_graph]
    ]
    [
        [Vertex out-edge range]
        [``
        _std_pair_<
            typename _graph_traits_<bitset_grid_graph>::out_edge_iterator
          , typename _graph_traits_<bitset_grid_graph>::out_edge_iterator
        >
            out_edges(
                typename _graph_traits_<
                    bitset_grid_graph
                >::vertex_descriptor const& v
              , bitset_grid_graph const& graph
            );
        ``]
        [__Incidence_Graph__]
    ]
    [
        [Vertex out-degree]
        [``
        typename _graph_traits_<bitset_grid_graph>::degree_size_type
            out_degree(
                typename _graph_traits_<
                    bitset_grid_graph
                >::vertex_descriptor const& v
              , bitset_grid_graph const& graph
            );
        ``]
        [__Incidence_Graph__]
    ]
    [
        [Vertex out-edge indexed access]
        [``
        typename _graph_traits_<bitset_grid_graph>::edge_descriptor
            out_edge_at(
                typename _graph_traits_<
                    bitset_grid_graph
                >::vertex_descriptor const& v
              , typename _graph_traits_<
                    bitset_grid_graph
                >::degree_size_type const& index
              , bitset_grid_graph const& graph
            );
        ``]
        [__Indexable_Incidence_Graph__]
    ]
    [
        [Vertex adjacency range]
        [``
        _std_pair_<
            typename _graph_traits_<bitset_grid_graph>::adjacency_iterator
          , typename _graph_traits_<bitset_grid_graph>::adjacency_iterator
        >
            adjacent_vertices(
                typename _graph_traits_<
                    bitset_grid_graph
                >::vertex_descriptor const& v
              , bitset_grid_graph const& graph
            );
        ``]
        [__Adjacency_Graph__]
    ]
    [
        [Vertex in-edge range]
        [``
        _std_pair_<
            typename _graph_traits_<bitset_grid_graph>::in_edge_iterator
          , typename _graph_traits_<bitset_grid_graph>::in_edge_iterator
        >
            in_edges(
                typename _graph_traits_<
                    bitset_grid_graph
                >::vertex_descriptor const& v
              , bitset_grid_graph const& graph
            );
        ``]
        [__Bidirectional_Graph__]
    ]
    [
        [Vertex in-degree]
        [``
        typename _graph_traits_<bitset_grid_graph>::degree_size_type
            in_degree(
                typename _graph_traits_<
                    bitset_grid_graph
                >::vertex_descriptor const& v
              , bitset_grid_graph const& graph
            );
        ``]
        [__Bidirectional_Graph__]
    ]
    [
        [Vertex degree]
        [``
        typename _graph_traits_<bitset_grid_graph>::degree_size_type
            degree(
                typename _graph_traits_<
                    bitset_grid_graph
                >::vertex_descriptor const& v
              , bitset_grid_graph const& graph
            );
        ``]
        [__Bidirectional_Graph__]
    ]
    [
        [Vertex in-edge indexed access]
        [``
        typename _graph_traits_<bitset_grid_graph>::edge_descriptor
            in_edge_at(
                typename _graph_traits_<
                    bitset_grid_graph
                >::vertex_descriptor const& v
              , typename _graph_traits_<
                    bitset_grid_graph
                >::degree_size_type const& index
              , bitset_grid_graph const& graph
            );
        ``]
        [__Bidirectional_Indexable_Incidence_Graph__]
    ]
    [
        [Direct edge access]
        [``
        _std_pair_<
            typename _graph_traits_<bitset_grid_graph>::edge_descriptor
          , bool
        >
            edge(
                typename _graph_traits_<
                    bitset_grid_graph
                >::vertex_descriptor const& u
              , typename _graph_traits_<
                    bitset_grid_graph
                >::vertex_descriptor const& v
              , bitset_grid_graph const& graph
            );
        ``]
        [__Adjacency_Matrix__]
    ]
    [
        [Vertex index property map access]
        [``
        typename _property_map_<bitset_grid_graph,vertex_index_t>::type
            get(vertex_index_t, bitset_grid_graph const& graph);
        ``]
        [__Property_Graph__]
    ]
    [
        [Vertex index access]
        [``
        typename _graph_traits_<bitset_grid_graph>::vertices_size_type
            get(
                vertex_index_t
              , bitset_grid_graph const& graph
              , typename _graph_traits_<
                    bitset_grid_graph
                >::vertex_descriptor const& v
            );
        ``]
        [__Property_Graph__]
    ]
    [
        [Edge index property map access]
        [``
        typename _property_map_<bitset_grid_graph,edge_index_t>::type
            get(edge_index_t, bitset_grid_graph const& graph);
        ``]
        [__Property_Graph__]
    ]
    [
        [Edge index access]
        [``
        typename _graph_traits_<bitset_grid_graph>::edges_size_type
            get(
                edge_index_t
              , bitset_grid_graph const& graph
              , typename _graph_traits_<
                    bitset_grid_graph
                >::edge_descriptor const& e
            );
        ``]
        [__Property_Graph__]
    ]
]
[endsect]

