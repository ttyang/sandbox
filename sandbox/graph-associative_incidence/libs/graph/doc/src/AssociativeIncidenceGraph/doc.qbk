[article Associative Incidence Graph
    [quickbook 1.5]
    [copyright 2012 Cromwell Enage]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[def __Runtime_Complexity__ [@http://en.wikipedia.org/wiki/Amortized_analysis Runtime Complexity]]
[def __Incidence_Graph__ [@boost:libs/graph/doc/IncidenceGraph.html [*Incidence Graph]]]
[def _graph_traits_ [@boost:libs/graph/doc/graph_traits.html boost::graph_traits]]
[def _edge_key_trait_ [@edge_key_trait.html boost::edge_key_trait]]
[def __zeta_grid_graph__ [@zeta_grid_graph.html `boost::zeta_grid_graph`]]
[def __bitset_grid_graph__ [@bitset_grid_graph.html `boost::bitset_grid_graph`]]
[def __bitruncated_cubic_honeycomb_graph__ [@btrnc_cubic_hcomb_graph.html `boost::bitruncated_cubic_honeycomb_graph`]]
[def __upsilon_grid_graph__ [@upsilon_grid_graph.html `boost::upsilon_grid_graph`]]

[section Description]
Models of this concept provide key-based access to their out-edges and adjacent
vertices.  This access can be useful to graph algorithms that traverse edges
according to a specific criterion, e.g. direction.
[endsect]

[section Refinement of]
__Incidence_Graph__
[endsect]

[variablelist Notation
    [[`Graph`][A type that models the [*Associative Incidence Graph] concept.]]
    [[`const_graph`][An object of type `Graph const&`.]]
    [
        [`v`]
        [
            An object of type [^_graph_traits_<Graph>::vertex_descriptor]
            `const&`.
        ]
    ]
    [
        [`degree`]
        [
            An object of type [^_graph_traits_<Graph>::degree_size_type]
            `const&`.
        ]
    ]
    [[`key`][An object of type [^_edge_key_trait_<Graph>::type] `const&`.]]
]

[section:types Associated Types]
One new type is introduced.

[table
    [[Name][Expression][Description][Requirements]]
    [
        [Edge key type]
        [``
            _edge_key_trait_<Graph>::type
        ``]
        [The type of a key with which a vertex will associate an out-edge.]
        [Model-specific.]
    ]
]

In addition, the requirements for the edge parallel category type are
strengthened: it must be convertible to `disallow_parallel_edge_tag`.

[endsect]

[section:expressions Valid Expressions and Semantics]
In addition to the expressions defined in the __Incidence_Graph__ concept, the
following expressions must be valid.

[table
    [
        [Name]
        [Expression]
        [Return Type]
        [Semantics]
        [__Runtime_Complexity__]
    ]
    [
        [Next vertex]
        [``
            const_graph.next(v, key)
        ``]
        [``
            _graph_traits_<Graph>::vertex_descriptor
        ``]
        [
            Returns the target vertex of the out-edge from `v` that is
            associated with `key`, or `v` if no such out-edge exists.
        ]
        [Linear with respect to the out-degree of `v`]
    ]
    [
        [Edge key count]
        [``
            boost::num_edge_keys(const_graph)
        ``]
        [``
            _graph_traits_<Graph>::degree_size_type
        ``]
        [
            Returns the number of distinct edge keys that the graph will
            recognize.
        ]
        [Amortized constant]
    ]
    [
        [Edge key indexed access]
        [``
            boost::edge_key(degree, const_graph)
        ``]
        [``
            _edge_key_trait_<Graph>::type
        ``]
        [Returns the `degree`-th edge key that the graph will recognize.]
        [Amortized constant with respect to edge key count]
    ]
]
[endsect]

[section Models]

  * __zeta_grid_graph__
  * __bitset_grid_graph__
  * __bitruncated_cubic_honeycomb_graph__
  * __upsilon_grid_graph__

[endsect]

