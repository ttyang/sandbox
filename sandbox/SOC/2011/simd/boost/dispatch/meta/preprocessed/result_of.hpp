    
    template<class F > struct result_of<F(), typename boost::enable_if< is_function<F> >::type> : boost::function_types::result_type<typename boost::remove_pointer<typename meta::strip<F>::type>::type> { }; template<class F > struct result_of<F(), typename boost::enable_if< has_result_type<F> >::type> { typedef typename F::result_type type; }; template<class F > struct result_of<F(), typename boost::disable_if< boost::mpl::or_< is_function<F>, has_result_type<F> > >::type> { typedef typename F::template result<F()>::type type; }; template<class F , class A0> struct result_of<F(A0), typename boost::enable_if< is_function<F> >::type> : boost::function_types::result_type<typename boost::remove_pointer<typename meta::strip<F>::type>::type> { }; template<class F , class A0> struct result_of<F(A0), typename boost::enable_if< has_result_type<F> >::type> { typedef typename F::result_type type; }; template<class F , class A0> struct result_of<F(A0), typename boost::disable_if< boost::mpl::or_< is_function<F>, has_result_type<F> > >::type> { typedef typename F::template result<F(A0)>::type type; }; template<class F , class A0 , class A1> struct result_of<F(A0 , A1), typename boost::enable_if< is_function<F> >::type> : boost::function_types::result_type<typename boost::remove_pointer<typename meta::strip<F>::type>::type> { }; template<class F , class A0 , class A1> struct result_of<F(A0 , A1), typename boost::enable_if< has_result_type<F> >::type> { typedef typename F::result_type type; }; template<class F , class A0 , class A1> struct result_of<F(A0 , A1), typename boost::disable_if< boost::mpl::or_< is_function<F>, has_result_type<F> > >::type> { typedef typename F::template result<F(A0 , A1)>::type type; }; template<class F , class A0 , class A1 , class A2> struct result_of<F(A0 , A1 , A2), typename boost::enable_if< is_function<F> >::type> : boost::function_types::result_type<typename boost::remove_pointer<typename meta::strip<F>::type>::type> { }; template<class F , class A0 , class A1 , class A2> struct result_of<F(A0 , A1 , A2), typename boost::enable_if< has_result_type<F> >::type> { typedef typename F::result_type type; }; template<class F , class A0 , class A1 , class A2> struct result_of<F(A0 , A1 , A2), typename boost::disable_if< boost::mpl::or_< is_function<F>, has_result_type<F> > >::type> { typedef typename F::template result<F(A0 , A1 , A2)>::type type; }; template<class F , class A0 , class A1 , class A2 , class A3> struct result_of<F(A0 , A1 , A2 , A3), typename boost::enable_if< is_function<F> >::type> : boost::function_types::result_type<typename boost::remove_pointer<typename meta::strip<F>::type>::type> { }; template<class F , class A0 , class A1 , class A2 , class A3> struct result_of<F(A0 , A1 , A2 , A3), typename boost::enable_if< has_result_type<F> >::type> { typedef typename F::result_type type; }; template<class F , class A0 , class A1 , class A2 , class A3> struct result_of<F(A0 , A1 , A2 , A3), typename boost::disable_if< boost::mpl::or_< is_function<F>, has_result_type<F> > >::type> { typedef typename F::template result<F(A0 , A1 , A2 , A3)>::type type; }; template<class F , class A0 , class A1 , class A2 , class A3 , class A4> struct result_of<F(A0 , A1 , A2 , A3 , A4), typename boost::enable_if< is_function<F> >::type> : boost::function_types::result_type<typename boost::remove_pointer<typename meta::strip<F>::type>::type> { }; template<class F , class A0 , class A1 , class A2 , class A3 , class A4> struct result_of<F(A0 , A1 , A2 , A3 , A4), typename boost::enable_if< has_result_type<F> >::type> { typedef typename F::result_type type; }; template<class F , class A0 , class A1 , class A2 , class A3 , class A4> struct result_of<F(A0 , A1 , A2 , A3 , A4), typename boost::disable_if< boost::mpl::or_< is_function<F>, has_result_type<F> > >::type> { typedef typename F::template result<F(A0 , A1 , A2 , A3 , A4)>::type type; };
    
