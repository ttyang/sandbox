[library Dispatch
    [quickbook 1.3]
    [authors [Falcou, Joel], [Gaunard, Mathias]]
    [copyright 2003 - 2011 LASMEA UMR 6602 CNRS/Univ. Clermont II]
    [copyright 2009 - 2011 LRI UMR 8623 CNRS/Univ Paris Sud XI]
    [category Generic]
    [purpose Generic overloading]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[/ Some links]

[def __note__           [$images/note.png]]
[def __alert__          [$images/alert.png]]
[def __tip__            [$images/tip.png]]

[section Preface]

This library aims at providing an idiomatic way to define functions that can
be extended or specialized, with each specialization being able to be generic.

With transparent tag dispatching, it becomes then possible to select the best
specialization for the arguments provided, avoiding the limitations inherent
to unconstrained template function overloads.

[warning Boost.Dispatch is a library in development and is not part of Boost.]

[heading How to use this manual]

Some icons are used to mark certain topics indicative of their relevance. These
icons precede some text to indicate:

[table Icons
    [[Icon]         [Name]          [Meaning]]
    [[__note__]     [Note]          [Information provided is auxiliary but will
                                     give the reader a deeper insight into a specific
                                     topic. May be skipped.]]
    [[__alert__]    [Alert]         [Information provided is of utmost importance.]]
    [[__tip__]      [Tip]           [A potentially useful and helpful piece of
                                     information.]]
]

[endsect]

[section Motivation]

Let us consider a fairly artificial scenario, but representive of things that
are quite common in generic programming: we want to define a unary function `f`, for all built-in arithmetic
types, that returns different values depending on the actual type of the argument.

* return 0 if it is floating point
* return 1 if it is a signed integer
* return 2 if it is an unsigned integer

You could do this with two means: SFINAE or tag dispatching.

With SFINAE: 
[c++]
``
template<class T>
typename enable_if<
    is_floating_point<T>,
    int
>::type f(T)
{
    return 0;
}

template<class T>
typename enable_if<
    mpl::and_<
        is_signed<T>,
        is_integral<T>
    >,
    int
>::type f(T)
{
    return 1;
}

template<class T>
typename enable_if<
    mpl::and_<
        mpl::not_< is_signed<T> >,
        is_integral<T>
    >,
    int
>::type f(T)
{
    return 2;
}
``

Or, with tag dispatching:
[c++]
``
struct fundamental_tag {};
struct floating_point_tag : fundamental_tag {};
struct integral_tag : fundamental_tag {};
struct signed_integral_tag : integral_tag {};
struct unsigned_integral_tag : integral_tag {};

template<class T>
struct category_of;

template<>
struct category_of<float>
{
  typedef floating_point_tag type;
};

template<>
struct category_of<double>
{
  typedef floating_point_tag type;
};

template<>
struct category_of<int>
{
  typedef signed_integral_tag type;
};

template<>
struct category_of<unsigned int>
{
  typedef unsigned_integral_tag type;
};

/* etc. for all fundamental types... */

template<class T>
int f(T t)
{
    return f(t, typename category_of<T>::type);
}

template<class T>
int f(T, floating_point_tag)
{
    return 0;
}

template<class T, class U>
int f(T, integral_tag)
{
    return 1;
}

template<class T, class U>
int f(T, unsigned_integral_tag)
{
    return 2;
}
``

The SFINAE approach clearly doesn't scale in terms of programming, since all
overloads must be mutually exclusive, but also in terms of compilation times, since
SFINAE-based overload resolution is linear.

Tag dispatching, on the other hand, can be very good: by using a hierarchy of inheriting
types, it's possible to make use of the best-match
feature of C++ overloading to introduce specializations without requiring them
to be mutually exclusive. The `iterator_category` system of standard iterators is a
good example of that. [br]
Doing this in a clean, concise, reusable and
idiomatic manner is however of some difficulty, which is why that is only done
in an ad-hoc way in practice.

Boost.Dispatch solves that problem through two related components:

* An extensible hierarchy system that contains ready-made hierarchies and that can be easily
extended. This provides a powerful and idiomatic way to define inheriting category tags.
* A dispatching mechanism built on top of the hierarchies and overloading, that automates the use
of tag dispatching with all arguments.

Here is what the above looks like when written with Boost.Dispatch:

[c++]
``
// each function must have a type to be uniquely identified
struct f_ {};

// we define the free function f, that for now only does a static assert
BOOST_DISPATCH_FUNCTION_IMPLEMENTATION(f_, f, 1)

// we define a specialization for real types
BOOST_DISPATCH_FUNCTOR_IMPLEMENTATION(,
    f_,
    tag::cpu_,
    (A0),
    (scalar_< floating_<A0> >)
)
{
    typedef int result_type;
    result_type operator()(T) const
    {
        return 0;
    }
};

// we define a specialization for integral types
BOOST_DISPATCH_FUNCTOR_IMPLEMENTATION(,
    f_,
    tag::cpu_,
    (A0),
    (scalar_< integer_<A0> >)
)
{
    typedef int result_type;
    result_type operator()(T) const
    {
        return 1;
    }
};

// we define a specialization for unsigned types
BOOST_DISPATCH_FUNCTOR_IMPLEMENTATION(,
    f_,
    tag::cpu_,
    (A0),
    (scalar_< unsigned_<A0> >)
)
{
    typedef int result_type;
    result_type operator()(T) const
    {
        return 2;
    }
};
``

Here, the second specialization applies to any integral type, including
unsigned ones. However, since there is also a specialization for unsigned types,
the latter gets preferred, since `unsigned_` is a refinement of `integer_`
in the built-in hierarchies.

Additionally, with Boost.Dispatch, all specializations are registered in an
ADL context. That means that you can introduce specializations after the function
is used in template contexts and those new specializations will still get used
when that code is instantiated. This is not the case with regular function
overloads, which usually perform name lookup eagerly.

The approach also turns all incriminated functions into polymorphic function
objects, which has a lot of uses in generic and functional programming.

[endsect] [/Motivation]

[section Defining hierarchies]

[section Hierarchy Concept]
Synopsis:

    struct H : P
    {
        typedef P parent;
    };

with `H` and `P` models of `Hierarchy`.

A model `H` of `Hierarchy` is nothing more than an empty type used to identify a
category of types. It must inherit from one other model of `Hierarchy` `P`;
multiple inheritance is discouraged as it easily leads to ambiguities.

It must also provide a `parent` typedef in order to allow composite hierarchies
to be built around it.

All hierarchies must inherit directly or indirectly from `boost::dispatch::meta::unspecified_<T>`,
with `T` any concrete type (preferably the one being hierarchized).
    
The choice that Boost.Dispatch makes for its built-in hierarchies is to make 
them templates, with the actual type being hierarchized as the
template parameter.

    template<class T>
    struct H : P<T>
    {
        typedef P<T> parent;
    };
    
This allows to select the parent hierarchy according ot what the type is,
removing some of the limitations of single inheritance. Embedding the type
inside the hierarchy also enables to use them directly for declaring template overloads
in place of the real arguments.
[endsect]

[section Example: simplified arithmetic hierarchy]

In this example, we're going to define hierarchies for the built-in arithmetic types,
to categorize them along two axes:

* signed / unsigned
* integer / floating-point

To do this, we're going to categorize the following types:

* float, double
* short, int unsigned short
* unsigned short, unsigned int

The `BOOST_DISPATCH_HIERARCHY_CLASS_TPL(`[~a]`, `[~b]`)` macro can be used to define template hierarchies of
of the form

    template<class T>
    struct ``[~a]`` : ``[~b]``
    {
        typedef ``[~b]`` parent;
    };
    
We're going to use it to avoid code repetition.

The tricky part in that hierarchy is that there are two axes to work with:
all floating-point are signed, but some integers are and some are not.

Let's start by defining the obvious:

    BOOST_DISPATCH_HIERARCHY_CLASS_TPL(arithmetic_      , unspecified_<T>     );
    BOOST_DISPATCH_HIERARCHY_CLASS_TPL(integer_         , arithmetic_<T>      );
    BOOST_DISPATCH_HIERARCHY_CLASS_TPL(signed_          , ``[~???]``                 );
    BOOST_DISPATCH_HIERARCHY_CLASS_TPL(unsigned_        , integer_<T>         );
    BOOST_DISPATCH_HIERARCHY_CLASS_TPL(floating_        , signed_<T>          );
    
    BOOST_DISPATCH_HIERARCHY_CLASS_TPL(signed_integer_  , signed_<T>          );
    BOOST_DISPATCH_HIERARCHY_CLASS_TPL(unsigned_integer_, unsigned_<T>        );
    BOOST_DISPATCH_HIERARCHY_CLASS_TPL(short_           , signed_integer_<T>  );
    BOOST_DISPATCH_HIERARCHY_CLASS_TPL(unsigned_short_  , unsigned_integer_<T>);
    BOOST_DISPATCH_HIERARCHY_CLASS_TPL(int_             , signed_integer_<T>  );
    BOOST_DISPATCH_HIERARCHY_CLASS_TPL(unsigned_int_    , unsigned_integer_<T>);
    
    BOOST_DISPATCH_HIERARCHY_CLASS_TPL(single_          , floating_<T>        );
    BOOST_DISPATCH_HIERARCHY_CLASS_TPL(double_          , floating_<T>        );

Notice there is a problem here. All unsigned types are integers, but signed types are either integers or floating-point.
All floating-point, however, are signed. [br]
We can't make `signed_` inherit from `integer_`, since that would mean `floating_` would inherit from `integer_`. And if we made
it inherit from `arithmetic_`, then `int_` would never inherit from `integer_`.

The solution is for `signed_` to inherit from `integer_` if `T` is integral, and from `arithmetic_` otherwise:

    BOOST_DISPATCH_HIERARCHY_CLASS_TPL_META(
        signed_,
        (typename mpl::if_< is_integral<typename meta::primitive_of<T>::type>
                          , integer_<T>
                          , arithmetic_<T>
                          >::type)
    )
    
We need to use `meta::primitive_of` here because `T` might be an arbitrary type hierachized from an outer
composite hierarchy: its innermost type must be extracted, which is what `meta::primitive_of` is for (by default, it's the identity).

Let's look at the resulting hierarchy for `double`, `int`, and `unsigned short`:

    double_<double> -> floating_<double> -> signed_<double>
                    -> arithmetic_<double> -> unspecified_<double>
                    
    int_<int> -> signed_integer_<int> -> signed_<int>
              -> integer_<int> -> arithmetic_<int>
              -> unspecified_<double>
              
    unsigned_short_<unsigned short> -> unsigned_integer_<unsigned short>
                                    -> unsigned_<unsigned short>
                                    -> integer_<unsigned short>
                                    -> arithmetic_<unsigned short>
                                    -> unspecified_<unsigned short>

All that's left to do is to associate `double` with `double_<double>`, `int` with `int_<int>` etc.

[endsect]

[section Example: the `target_` composite hierarchy]

A composite hierarchy is a hierarchy that merely wraps another hierarchy.
An example of this is the `target_` hierarchy, associated to the `as_<T>` type.

    BOOST_DISPATCH_HIERARCHY_CLASS_TPL(target_                   , target_<typename T::parent>);
    BOOST_DISPATCH_HIERARCHY_CLASS_TPL(target_< unspecified_<T> >, unspecified_<T>            ); // stop recursion

In effect, the hierarchy of `as_<double>` is the following:

    target_< double_< as_<double> > > -> target_< floating_< as_<double> > >
                                      -> target_< signed_< as_<double> > >
                                      -> target_< arithmetic_< as_<double> > >
                                      -> target_< unspecified_< as_<double> > >
                                      -> unspecified_< as_<double> >

[endsect]
[endsect]

[section Associating types to hierarchies]

Associating a type to a hierarchy is usually just a matter of specializing the `boost::dispatch::meta::hierarchy_of` meta-function:

    template<class Origin>
    struct hierarchy_of<``[~my_type]``, Origin>
    {
        typedef ``[~my_hierarchy]`` type;
    };
    
[note Cv-qualifiers and references are stripped by default when calling `hierarchy_of`, so there is no need to define the hierarchy of reference variants]
   
Typically the hierarchy will be a template holding the hierarchized type, so for example with the `double_` hierarchy defined previously you'll want

    template<class Origin>
    struct hierarchy_of<double, Origin>
    {
        typedef double_<Origin> type;
    };
   
If you have a composite hierarchy, you will probably want something like

    template<class T, class Origin>
    struct hierarchy_of<as_<T>, Origin>
    {
        typedef target_< typename hierarchy_of<T, Origin>::type > type;
    };
   
The `Origin` parameter refers to the type being hierarchized /globally/, while the first parameter is the type
being hierarchized relatively, i.e. an inner type of the origin.

[note `meta::hierarchy_of` purposedly doesn't accept the use of SFINAE for partial specializations, because those tend to be too generic
and cause problems. If you want to use SFINAE, specialize `details::hierarchy_of` instead, which has an extra parameter usable for this
and is only selected if there is no suitable specialization of `meta::hierarchy_of`.]

Furthermore, if you associate a composite hierarchy to your type, you'll need to specialize `boost::dispatch::meta::primitive_of`:

    template<class T>
    struct primitive_of< as_<T> >
      : primitive_of<T>
    {
    };
    
[caution `primitive_of` must not refer to the inner type, but to the *innermost* type, i.e. the inner of the inner if two composite
hierarchies are chained together.]

[endsect]

[section Built-in hierarchies]

[section Scalar hierarchy]

The hierarchy of a built-in fundamental type `T` is the composite `scalar_< typename property_of<T>::type >`. [br]
Properties are decoupled from `scalar_` so that it is easy to create new hierarchies such as `simd_< integer_<T> >` etc.

If you wish to extend this hierarchy, specialize `boost::dispatch::meta::property_of` or `boost::dispatch::details::property_of` instead
of the `hierarchy_of` equivalents.

Once `scalar_< unspecified_<T> >` is reached, the hierarchy then goes into `generic_< typename property_of<T> >`.

A list of all properties available and how they relate to each other is listed below:

[$dispatch/tags.png]

[variablelist Properties      
    [[fundamental_] [a fundamental type]]
    [[bool_] [the `bool` type]]
    [[arithmetic_] [an arithmetic fundamental type, i.e. any fundamental type but `bool`]]
    [[integer_] [an integral type]]
    [[real_] [a real or floating-point type]]
    [[unsigned_] [an unsigned type]]
    [[signed_] [a signed type]]
    [[uint_] [an unsigned integral type]]
    [[int_] [a signed integral type]]
    [[type8_] [a type of size 8 bits]]
    [[type16_] [a type of size 16 bits]]
    [[real_sized_] [a type of the same size as a real type]]
    [[type32_] [a type of size 32 bits]]
    [[type64_] [a type of size 64 bits]]
    [[ints8_] [an integral type of size 8 bits]]
    [[ints16_] [an integral type of size 16 bits]]
    [[ints32_] [an integral type of size 32 bits]]
    [[ints64_] [an integral type of size 64 bits]]
    [[int8_] [an integral signed type of size 8 bits]]
    [[uint8_] [an integral unsigned type of size 8 bits]]
    [[int16_] [an integral signed type of size 16 bits]]
    [[uint16_] [an integral unsigned type of size 16 bits]]
    [[float_] [the `float` type of size 32 bits]]
    [[int32_] [an integral signed type of size 32 bits]]
    [[uint32_] [an integral unsigned type of size 32 bits]]
    [[double_] [the `double` type of size 64 bits]]
    [[int64_] [an integral signed type of size 64 bits]]
    [[uint64_] [an integral unsigned type of size 64 bits]]
]

[endsect] [/Scalar]

[section Target hierarchy]
[endsect]

[section Array hierarchy]
[endsect]

[section Fusion hierarchy]
[endsect]

[section AST hierarchy]
[endsect]

[endsect] [/Built-in hierarchies]

[section Generic scalar adaptors]
[endsect]

[section Defining functions]

Defining functions mostly requires defining a tag type `Tag` to identity the function
(which may itself be a hierarchy). Then all you have to do is create a default-constructed
object of type `functor<Tag>` and pass it the arguments.[br]
You may also call `functor<Tag, Site>` with a given hierarchy `Site` to force a specific family of specializations.

Define the tag (not a hierarchy in this case):

    struct ``[~my_function_tag]`` {};

Solution 1: make a global `functor<`[~Tag]`>` object:

    boost::dispatch::functor<``[~my_function_tag]``> ``[~my_function]`` = {};
    
Solution 2: make a forwarding function (faster compilation times):

    template<class A0>
    BOOST_DISPATCH_FORCE_INLINE
    typename boost::dispatch::meta::call<``[~my_function_tag]``(A0 const&)>::type
    ``[~my_function]``(A0 const& a0)
    {
        return boost::dispatch::functor<``[~my_function_tag]``>()(a0);
    }
    
The second solution requires to manually deal with arity and perfect-forwarding issues. You may also use
the `BOOST_DISPATCH_FUNCTION_IMPLEMENTATION` macro to make defining such forwarding functions easier.

The `boost::dispatch::meta::call` function behaves just like `boost::result_of`, but takes a tag instead
of a function object in order to be a bit more terse.

[endsect]

[section Defining specializations]

Once you have defined a function, you may then inject specializations using its tag, a site, a sequence of template parameters
and a sequence of hierarchies, one per argument.

To do so you must associate those elements with a Polymorphic Function Object (most of the time actuallay monomorphic, since the
types of the arguments will be encoded in the hierarchies).

You may either do this by hand by overloading the `boost::dispatch::meta::dispatching(`[~Tag]`, `[~Site]`, `[~HierarchyArg0]`, ..., `[~HierarchyArgN]`)`
function and making it return a PFO of your choice, or preferably use one of the provided macros.

The PFO may be in any namespace of your choice, and doesn't have to be in the same namespace as the function or its tag.

[important To use the Boost.Dispatch specialization macros, you need to forward-declare
``
    template<class Sig, class Site>
    struct implement;
``
in the namespace you wish to put your specializations in.]

The recommended macro to use is `BOOST_DISPATCH_FUNCTOR_IMPLEMENTATION`, used like so

    namespace ``[~my_namespace]``
    {
        namespace ``[~my_inner_namespace]``
        {
            BOOST_DISPATCH_FUNCTOR_IMPLEMENTATION((``[~my_namespace]``)(``[~my_inner_namespace]``)
                                                 , ``[~fully::qualified::function_tag]``, ``[~fully::qualified::site]``, (A0)(A1)
                                                 , (``[~fully::qualified::hierarchy_for_arg0]``<A0>)(``[~fully::qualified::hierarchy_for_arg1]``<A1>)
                                                 )
            {
                typedef ``[~some_type]`` result_type; // or result_of protocol
                
                result_type operator()(A0 const& a0, A1 const& a1) const
                {
                    // function body
                }
            };
        }
    }
    
Other variants allow to define a SFINAE condition on the specialization (`BOOST_DISPATCH_FUNCTOR_IMPLEMENTATION_IF`),
the use of non-type template parameters (`BOOST_DISPATCH_FUNCTOR_IMPLEMENTATION_TPL`), or just the ability define a mapping
to an existing PFO (`BOOST_DISPATCH_REGISTER_DISPATCH`).

[endsect]

[xinclude reference.xml]
