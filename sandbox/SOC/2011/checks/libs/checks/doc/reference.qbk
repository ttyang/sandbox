[/ 
Copyright Pierre Talbot 2013.

Use, modification and distribution are subject to the
Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt
or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:reference Reference]

[section:checkdigit Check digit]

[section:checkdigit_processor_concept Check Digit Processor Concept]

[h3 Description]
The check digit processor concept defines a structure used to compute a non-encoded check digit from the checksum.

The structure must expose:
``
/*unspecified*/ operator(size_t);
``

[h3 Example]

Example given in __MODULUS_CHECKDIGIT__.

[h3 See also]
__MODULUS_CHECKDIGIT__, __MODULUS_INV_CHECKDIGIT__, __MOD10_CHECKDIGIT__, __MOD11_CHECKDIGIT__, __MOD97_10_CHECKDIGIT__, __CHECKDIGIT_ENCODER_CONCEPT__.

[endsect][/section:checkdigit_processor_concept Check Digit Processor Concept]

[section:checkdigit_encoder_concept Check Digit Encoder Concept]
[h3 Description]
The check digit encoder concept defines a structure used to encode a check digit into a readable character.

The structure must expose:
``
template <typename T>
/*unspecified*/ operator(T);
``

`T` is equal to `CheckDigitProcessor::result_type`. Note that by default, all check digit processor returns a ['size_t]. The return type should be a character type such as ['char'] or ['wchar_t].

[h3 Examples]

Example given in __CHECKDIGIT_ENCODER__ and __CHECKDIGITX_ENCODER__.

[h3 See also]
__CHECKDIGIT_ENCODER__, __CHECKDIGITX_ENCODER__, __MODULUS_CHECKDIGIT__, __MOD10_CHECKDIGIT__, __MOD11_CHECKDIGIT__, __MOD97_10_CHECKDIGIT__.

[endsect][/section:checkdigit_encoder_concept Check digit Encoder concept]

[section:checkdigitref checkdigit]

[h3 Synopsis]
``
template
<
  typename Processor,
  typename Encoder,
  size_t position = 0,
  size_t size = 1
>
struct checkdigit
{
  // ...
};
``
[h3 Description]
Structure describing a check digit.
[h3 Header]
``
#include <boost/checks/checkdigit.hpp>
``
[h3 Template parameters]

* [*Processor] is used to compute a non-encoded check digit from the checksum. Must meet the __CHECKDIGIT_PROCESSOR_CONCEPT__ requirements.
* [*Encoder] is used to encode the check digit obtained from the Processor. Must meet the __CHECKDIGIT_ENCODER_CONCEPT__ requirements.
* [*position] is the position of the check digit in the sequence. This position ['must depends] on the __TRAVERSAL_TYPE__. [*Default] to 0 (because the default traversal is from right to left).
* [*size] is the size of the check digit. [*Default] to 1.

[h3 Example]
The example shows how to make a check digit that is computed with a modulus 12 and where the encoding is [0..9, X, Y].

[checkdigit_mod12_example]

[h3 See also]

__MOD10_CHECKDIGIT__, __MOD11_CHECKDIGIT__, __MOD97_10_CHECKDIGIT__, __CHECKDIGIT_PROCESSOR_CONCEPT__, __CHECKDIGIT_ENCODER_CONCEPT__.

[endsect][/section:checkdigitref checkdigit]

[section:checkdigit_encoder checkdigit_encoder]
[h3 Synopsis]
``
template <typename Result=char>
struct checkdigit_encoder
{
  typedef Result result_type;

  template <typename T>
  result_type operator()(T checksum);
};
``
[h3 Description]

The checkdigit_encoder structure encodes a checksum (possibly already processed by a check digit processor) to a 7-bits ASCII encoding.

[h3 Header]
``
#include <boost/checks/checkdigit.hpp>
``
[h3 Template parameters]

* [*Result] is the type in which the checksum will be encoded.
* [*T] is the type of the checksum.

[h3 Parameters]

* [*checksum] is the checksum received from a check digit processor.

[h3 Return]

The 7-bits ASCII encoded checksum into a Result type.

[h3 Exception]

This code can launch __BOOST_BAD_LEXICAL_CAST__ exception under the condition of the __BOOST_LEXICAL_CAST__ function. That is, if the return type cannot contains the encoded version of the check digit.

[note An exception should never happens unless there is a programming error.]

[h3 See also]

__BOOST_LEXICAL_CAST__, __CHECKDIGITX_ENCODER__, __CHECKDIGIT_ENCODER_CONCEPT__.

[endsect][/section:checkdigit_encoder checkdigit_encoder]

[section:checkdigitx_encoder checkdigitx_encoder]
[h3 Synopsis]
``
struct checkdigitx_encoder
{
  typedef char result_type;

  template <typename T>
  result_type operator()(T checksum);
};
``
[h3 Description]

The checkdigitx_encoder structure encodes a checksum (possibly already processed by a check digit processor) in the range [0..10] to a 7-bits ASCII encoding.

[h3 Header]
``
#include <boost/checks/checkdigit.hpp>
``
[h3 Template parameters]

* [*Result] is the type in which the checksum will be encoded.
* [*T] is the type of the checksum.

[h3 Parameters]

* [*checksum] is the checksum received from a check digit processor. It should be between [0..10].

[h3 Return]

Return the 7-bits ASCII encoded checksum. [0..9] is translated to ['0'..'9'] and 10 to 'X'.

[h3 Exception]

__BOOST_BAD_LEXICAL_CAST__ is raised if the checksum is not in the range [0..10].

[note An exception should never happens unless there is a programming error.]

[h3 Return]

[h3 See also]

__BOOST_LEXICAL_CAST__, __CHECKDIGIT_ENCODER__, __CHECKDIGIT_ENCODER_CONCEPT__.
[endsect][/section:checkdigitx_encoder checkdigitx_encoder]

[section:mod_checkdigit modulus]
[h3 Synopsis]
``
template <size_t mod>
struct modulus
{
  BOOST_STATIC_ASSERT_MSG(mod != 0, "Cannot divide by 0.");

  typedef size_t result_type;
  typedef size_t argument_type;

  static const size_t modulus_value = mod;

  result_type operator()(argument_type value);
};
``
[h3 Description]

The modulus structure is an arithmetic functor where the right value of `a % b` is static. It respects the __CHECKDIGIT_PROCESSOR_CONCEPT__. The sequence generated for the sequence `[0..n]` with a modulus of `n` is `[0,1.., (n-1), 0]`.

[h3 Header]
``
#include <boost/checks/modulus.hpp>
``
[h3 Template parameters]

* [*mod] is the right value used in `value % mod`.

[h3 Parameters]

* [*value] is the left value used in `value % mod`.

[h3 Return]

`value % mod`.

[h3 See also]

__MODULUS_INV_CHECKDIGIT__, __MOD10_CHECKDIGIT__, __MOD11_CHECKDIGIT__, __MOD97_10_CHECKDIGIT__, __CHECKDIGIT_PROCESSOR_CONCEPT__.

[endsect][/section:mod_checkdigit modulus]

[section:mod_inv_checkdigit modulus_inv]
[h3 Synopsis]
``
template <size_t mod>
struct modulus_inv
{
  BOOST_STATIC_ASSERT_MSG(mod != 0, "Cannot divide by 0.");
  
  typedef size_t result_type;
  typedef size_t argument_type;

  static const size_t modulus_value = mod;

  result_type operator()(argument_type value);
};
``
[h3 Description]

The modulus_inv structure provides a modular-based computation for check digit. It respects the __CHECKDIGIT_PROCESSOR_CONCEPT__. The sequence generated for the sequence `[0..n]` with a modulus of `n` is `[0, (n-1), (n-2),.., 0]`. You can notice that this sequence is the inverse of the sequence generated by __MODULUS_CHECKDIGIT__.

[h3 Header]
``
#include <boost/checks/modulus.hpp>
``
[h3 Template parameters]

* [*mod] is the modular value.

[h3 Parameters]

* [*value] is the value to compute.

[h3 Return]

`(mod - (value % mod)) % mod`.

[h3 See also]

__MODULUS_CHECKDIGIT__, __MOD10_CHECKDIGIT__, __MOD11_CHECKDIGIT__, __MOD97_10_CHECKDIGIT__, __CHECKDIGIT_PROCESSOR_CONCEPT__.
[endsect][/section:mod_inv_checkdigit modulus_inv]

[section:mod10_checkdigit Mod10 check digit]
[h3 Synopsis]
``
typedef modulus<10> mod10_basic;
typedef modulus_inv<10> mod10_inv_basic;
typedef checkdigit_encoder<> mod10_basic_encoder;

typedef checkdigit<mod10_basic, mod10_basic_encoder> mod10_basic_checkdigit;
typedef checkdigit<mod10_inv_basic, mod10_basic_encoder> mod10_inv_basic_checkdigit;
``
[h3 Description]

The modulus 10 "typedef suite" helps users who want to build a modulus 10 based algorithm. It provides
some basic typedef shortcuts.

[h3 Header]
``
#include <boost/checks/modulus10.hpp>
``
[h3 Typedef]

* [*mod10_basic] See __MODULUS_CHECKDIGIT__.
* [*mod10_inv_basic] See __MODULUS_INV_CHECKDIGIT__.
* [*mod10_basic_encoder] See __CHECKDIGIT_ENCODER__.
* [*mod10_basic_checkdigit] is a simple check digit type for modulus 10 based algorithm.
* [*mod10_inv_basic_checkdigit] is a simple check digit type for inverse modulus 10 based algorithm.

[note `mod10_basic_checkdigit` and `mod10_inv_basic_checkdigit` use default value for the position and check digit's size. See __CHECKDIGIT_REF__ for more informations.]

[h3 See also]

__MODULUS_CHECKDIGIT__, __MODULUS_INV_CHECKDIGIT__, __CHECKDIGIT_ENCODER__, __CHECKDIGIT_REF__.
[endsect][/section:mod10_checkdigit Mod10 check digit]

[section:mod11_checkdigit Mod11 check digit]
[h3 Synopsis]
``
typedef modulus<11> mod11_basic;
typedef modulus_inv<11> mod11_inv_basic;
typedef checkdigitx_encoder mod11_basic_encoder;

typedef checkdigit<mod11_basic, mod11_basic_encoder> mod11_basic_checkdigit;
typedef checkdigit<mod11_inv_basic, mod11_basic_encoder> mod11_inv_basic_checkdigit;
``
[h3 Description]

The modulus 11 "typedef suite" helps users who want to build a modulus 11 based algorithm. It provides
some basic typedef shortcuts.

[h3 Header]
``
#include <boost/checks/modulus11.hpp>
``
[h3 Typedef]

* [*mod11_basic] See __MODULUS_CHECKDIGIT__.
* [*mod11_inv_basic] See __MODULUS_INV_CHECKDIGIT__.
* [*mod11_basic_encoder] See __CHECKDIGIT_ENCODER__.
* [*mod11_basic_checkdigit] is a simple check digit type for modulus 11 based algorithm.
* [*mod11_inv_basic_checkdigit] is a simple check digit type for inverse modulus 11 based algorithm.

[note `mod11_basic_checkdigit` and `mod11_inv_basic_checkdigit` use default value for the position and check digit's size. See __CHECKDIGIT_REF__ for more informations.]

[h3 See also]

__MODULUS_CHECKDIGIT__, __MODULUS_INV_CHECKDIGIT__, __CHECKDIGIT_ENCODER__, __CHECKDIGIT_REF__.
[endsect][/section:mod11_checkdigit Mod11 check digit]

[section:mod97_10_checkdigit Mod97-10 check digit]
[h3 Synopsis]
``
struct mod97_10
{
  typedef size_t result_type;
  typedef size_t argument_type;

  static const size_t modulus_value = 97;

  result_type operator()(argument_type value);
};

typedef checkdigit_encoder<std::string> mod97_10_basic_encoder;
typedef checkdigit<mod97_10, mod97_10_basic_encoder, 0, 2> mod97_10_checkdigit;
``
[h3 Description]

The modulus 97-10 algorithm is defined by the norm ISO 7604. We document here the part related
to the check digit computation.

[h3 Header]
``
#include <boost/checks/modulus97_10.hpp>
``
[h3 mod97_10]
It meets the __CHECKDIGIT_PROCESSOR_CONCEPT__ requirements.

[h4 Parameters]

* [*value] is the value to compute.

[h4 Return]

`98 - (value % 97)`.

[h3 Other typedef]

* [*mod97_10_basic_encoder] encodes in a ASCII format two digits in a string.
* [*mod97_10_checkdigit] represents a mod97-10 check digit of size 2, positionned at the first and second position the algorithm hits.

[h3 See also]

__CHECKDIGIT_ENCODER__, __CHECKDIGIT_REF__.
[endsect][/section:mod97_checkdigit Mod97 check digit]

[endsect][/section:checkdigit Check digit]

[section:size_ref Size]
[section:no_size_checking no_size_checking]
[h3 Synopsis]
``
struct no_size_checking{};
``
[h3 Description]

This tag can be used in the `checksum` structure if the algorithm doesn't need any size checking.

[h3 Header]
``
#include <boost/checks/size_check.hpp>
``

[h3 See also]
__SIZE_CHECKING__, __CHECKSUM_REF__.

[endsect][/section:no_size_checking no_size_checking]

[section:size_checking size_checking]
[h3 Synopsis]
``
template <size_t N, class SizeFailurePolicy = size_failure_error_code_policy>
struct size_checking
{
  /* unspecified */
};
``
[h3 Description]

This structure can be used in the `checksum` structure if you want to restrict the size of the sequence.
If the size is not respected then the failure policy is called.

[h3 Header]
``
#include <boost/checks/size_check.hpp>
``

[h3 Template parameters]

* [*N] is the expected size of the check sequence.
* [*SizeFailurePolicy] is a policy describing the behavior if the size is not respected. The [*default] policy is __SIZE_FAILURE_ERROR_CODE_POLICY__.

[h3 See also]
__NO_SIZE_CHECKING__, __SIZE_FAILURE_ERROR_CODE_POLICY__, __SIZE_FAILURE_EXCEPTION_POLICY__, __CHECKSUM_REF__.

[endsect][/section:size_checking size_checking]

[section:size_failure_error_code_policy size_failure_error_code_policy]
[h3 Synopsis]
``
struct size_failure_error_code_policy
{
  /* unspecified */
};
``
[h3 Description]

This policy tell the check algorithm to return an error code if the size contract is not respected. The error code doesn't describe the type of the error. It must be use inside __SIZE_CHECKING__.

[h3 Header]
``
#include <boost/checks/size_check.hpp>
``

[h3 See also]
__SIZE_CHECKING__, __SIZE_FAILURE_ERROR_CODE_POLICY__, __CHECKSUM_REF__.

[endsect][/section:size_failure_error_code_policy size_failure_error_code_policy]

[section:size_failure_exception_policy size_failure_exception_policy]
[h3 Synopsis]
``
template <class FailureException = size_failure_exception>
struct size_failure_exception_policy
{
  /* unspecified */
};
``
[h3 Description]

This policy tell the check algorithm to launch an exception if the size contract is not respected. It must be use inside __SIZE_CHECKING__.

[h3 Header]
``
#include <boost/checks/size_check.hpp>
``

[h3 Template paramater]

[*FailureException] is the exception to be launch in case of failure. The [*default] exception is __SIZE_FAILURE_EXCEPTION__.

[h3 See also]
__SIZE_FAILURE_EXCEPTION__,  __SIZE_CHECKING__, __SIZE_FAILURE_EXCEPTION_POLICY__, __CHECKSUM_REF__.

[endsect][/section:size_failure_exception_policy size_failure_exception_policy]

[section:size_failure_exception size_failure_exception]
[h3 Synopsis]
``
class size_failure_exception : public std::exception
{
public:
  virtual const char * what() const throw()
  {
    return "Unexpected size of the sequence.";
  }
};
``
[h3 Description]

This exception is used with __SIZE_FAILURE_EXCEPTION_POLICY__ and launched when the size contract is not respected.

[h3 Header]
``
#include <boost/checks/size_check.hpp>
``

[h3 See also]
__SIZE_FAILURE_EXCEPTION_POLICY__.
[endsect][/section:size_failure_exception size_failure_exception]
[endsect][/section:size_ref Size]

[section:traversal_type Traversal type]

[section:forward_traversal forward_traversal]
[h3 Synopsis]
``
struct forward_traversal
{
  /* unspecified */
};
``
[h3 Description]

This policy tell the check algorithm to go though the sequence from start to end (typically from left to right).

[h3 Header]
``
#include <boost/checks/traversal.hpp>
``

[h3 See also]
__REVERSE_TRAVERSAL__, __CHECKSUM_REF__.
[endsect][/section:forward_traversal forward_traversal]

[section:reverse_traversal reverse_traversal]
[h3 Synopsis]
``
struct reverse_traversal
{
  /* unspecified */
};
``
[h3 Description]

This policy tell the check algorithm to go though the sequence from end to start (typically from right to left).

[h3 Header]
``
#include <boost/checks/traversal.hpp>
``

[h3 See also]
__FORWARD_TRAVERSAL__, __CHECKSUM_REF__.
[endsect][/section:reverse_traversal reverse_traversal]
[endsect][/section:traversal_type Traversal type]

[section:filter Filter]
[section:digit_filter digit_filter]
[h3 Synopsis]
``
struct digit_filter
{
  typedef bool result_type;

  template <typename value_type>
  bool operator()(value_type value) const;
};
``
[h3 Description]

Predicate returning true if value is a digit between 0 and 9.

[h3 Header]
``
#include <boost/checks/filter.hpp>
``

[h3 Template parameter]

[*value_type] is the type of the value we want to test.

[h3 Parameter]

[*value] is the value we want to test.

[h3 Return]

True if [*value] is between 0 and 9, otherwise false.

[h3 See also]
__DIGITX_FILTER__, __CHECKSUM_REF__.
[endsect][/section:digit_filter digit_filter]

[section:digitx_filter digitx_filter]
[h3 Synopsis]
``
struct digitx_filter
{
  typedef bool result_type;

  template <typename value_type>
  bool operator()(value_type value) const;
};
``
[h3 Description]

Predicate returning true if value is a digit between 0 and 9 or equal to 'x' or 'X'.

[h3 Header]
``
#include <boost/checks/filter.hpp>
``

[h3 Template parameter]

[*value_type] is the type of the value we want to test.

[h3 Parameter]

[*value] is the value we want to test.

[h3 Return]

True if [*value] is between 0 and 9 or equal to 'x' or 'X', otherwise false.

[h3 See also]
__DIGIT_FILTER__, __CHECKSUM_REF__.
[endsect][/section:digitx_filter digitx_filter]
[endsect][/section:filter Filter]

[section:type_adaptor Type adaptor]
[endsect][/section:type_adaptor Type adaptor]

[section:checksum_ref checksum]
[endsect][/section:checksum_ref checksum]

[endsect][/section:reference Reference] 