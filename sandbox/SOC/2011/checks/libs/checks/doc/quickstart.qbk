[/ 
Copyright Pierre Talbot 2011.

Use, modification and distribution are subject to the
Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt
or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:quickstart Quick Start]
There are two main functionalities provided by this library. The first is used to 
[*validate] a sequence of character :

``
template <typename check_algo, 
          typename range>    
bool validate(const range &x);
``

If `x` doesn't match the set of rules specified by `check_algo` it returns false. Generally,
it's because `x` doesn't have the size required or because the check digit is wrong.

The second aimed to [*calculate] the check digit.

``
template <typename check_algo,            
          typename range>               
boost::optional<typename check_algo::checkdigit_type>
compute_checkdigit(const range &x);
``

The return value contains the check digit if `x` is a valid sequence according to `check_algo`.
A simple example of these two functions is provided below with the __AMEX__ algorithm.

[amex_example] 

[note You noticed the template parameter `check_algo` is exactly the same for validation or computation.]

You may ask why the return type is not a simple char. By default, we want an exception free code as much as possible.
But error can appear when computing the check digit. So this return type is very adapted for a simple computation and is
very easy to use.

In fact, the character type could be something else than a char, if a check require non-ASCII characters to be computed. By the way,
for all the current algorithm, a char is sufficient.

[warning Boost.Check [*does not provide] support for string pattern matching such as a require starting number (example: "978" or "979" in an ISBN number). Refer to __BOOST_REGEX__ or __STD_REGEX__ or a home-craft pre-checking.]

Basically, the `check_algo` is the acronym of the algorithm you want to use.

The default behavior is to skip every character not recognized as belonging to the number. So you can use your favorite digit separator.

[endsect] [/section:quickstart Quick Start]
