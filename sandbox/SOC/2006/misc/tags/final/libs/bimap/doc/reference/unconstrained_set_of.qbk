[/license

Boost.Bimap

Copyright (c) 2006 Matias Capeletto

This code may be used under either of the following two licences:

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. OF SUCH DAMAGE.

Or:

Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at
http://www.boost.org/LICENSE_1_0.txt)

]

[/ QuickBook Document version 1.3 ]

[section unconstrained_set_of Reference]

[section Header "boost/bimap/unconstrained_set_of.hpp" synopsis]

    namespace boost {
    namespace bimap {


    template< class KeyType >
    struct unconstrained_set_of;

    struct unconstrained_set_of_relation;


    } // namespace bimap
    } // namespace boost

[endsect]

[section unconstrained_set_of Views]

An unconstrained_set_of set view is a view with no constraints. The use
of these kind of view boost the bimap performance but the view can not
be accessed. An unconstrained view is an empty class.

    namespace boost {
    namespace bimap {
    namespace views {

    template< ``['-implementation defined parameter list-]`` >
    class ``['-implementation defined view name-]``
    {
        // Empty view
    };

    } // namespace views
    } // namespace bimap
    } // namespace boost


[section Complexity signature]

We adopt the scheme outlined in the
[link complexity_signature_explanation complexity signature section].
An unconstrained view can not be accessed by the user, but the
formulas to find the order of an operation for a bimap hold with
the following definitions.
The complexity signature of a `unconstrained_set_of` view is:

* copying: `c(n) = 0`
* insertion: `i(n) = 0`
* hinted insertion: `h(n) = 0`
* deletion: `d(n) = 0`
* replacement: `r(n) = 0`
* modifying: `m(n) = 0`

[endsect]

[section Serialization]

Views cannot be serialized on their own, but only as part of the
`bimap` into which they are embedded. In describing the additional
preconditions and guarantees associated to `list_of` views with respect to
serialization of their embedding containers, we use the concepts defined in the
`bimap` serialization section.

[blurb [*Operation:] saving of a `bimap` b to an output archive
(XML archive) ar.]
[:  [*Requires:] No additional requirements to those imposed by the container.
]
\n

[blurb [*Operation:] loading of a `bimap` b' from an input archive
(XML archive) ar.]
[:  [*Requires:] No additional requirements to those imposed by the container.\n
]
\n

[endsect]
[endsect]

[endsect]


