[/
 / Copyright (c) 2007 Andrew Sutton
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[section Geodesic Distances]

    template <typename Graph, typename DistanceMap>
    typename property_traits<DistanceMap>::value_type
    geodesic_distance(const Graph& g,
                      typename graph_traits<Graph>::vertex_descriptor v,
                      DistanceMap dist)

    template <typename Graph, typename DistanceMap>
    inline double
    mean_geodesic_distance(const Graph& g, DistanceMap dist)

    template <typename Graph, typename DistanceMap, typename T>
    T
    mean_geodesic_distance(const Graph& g, DistanceMap dist, const T& dummy)

These functions compute values based on the /geodesic distance/ between
vertices. The /geodesic distance/ between vertices /u/ and /v/ is defined
as the shortest-length path between such vertices. It is important to note
that these functions /do not/ compute these paths or record their distances.

Boost.Graph provides two shortest paths algorithms: [boost_dijkstra_shortest_paths]
and [boost_bellman_ford_shortest_paths]. Optionally, if the target graph is
an unweighted, undirected graph, shortest paths can be recorded using
[boost_breadh_first_search]. Each of these algorithms takes as an input a
vertex for which the shortest distances are being computed. The output of
each of these algorithms is a `DistanceMap`, which is (in turn) used as the
input of these functions. Note then, that these functions compute measures
of the vertex for which the `DistanceMap` was computed.

The `geodesic_distance(g,dist)` function returns the length of the shortest path
between two vertices. The source vertex is that for which the `DistanceMap`
was computed and the target vertex, `v`, is supplied as a parameter. This
function is an alias for:

    dist[v];

The `mean_geodesic_distance(g,dist,T())` functions return the (arithmatic) mean
of the geodesic distances between a vertex and all others in the graph. The
vertex for which this is computed is that for which the `DistanceMap` was
originally computed. The mean geodesic distance is often given as:

[$images/eq/mean_geodesic.png]

where ['d[sub G](u, v)] is the geodesic distance (shortest path) from vertices
/u/ to /v/.

The default (first) variant of this function computes and returns the
average as a `double`. The second variant allows the average and return
type to be computed as a user-defined type by passing a dummy instance.
This is useful if the `value_type` of `DistanceMap` is a user-defined or
otherwise non-trivial.

Note that the geodesic distance between two unconnected vertices is infinite.
This implies that the mean geodesic distance for an unconnected graph is
also infinite.

[heading Where Defined]
`boost/graph/distance.hpp`

[heading Parameters]

[table
    [[Type] [Parameter] [Description]]
    [
        [required, in] [`const Graph& g`]
        [
            The graph object for which the distribution will be computed. If
            the `_distribution` or `_in_distribution` arguments are supplied
            when calling this function then `_graph` must be a model of
            [BoostBidirectionalGraph]. If only `_out_distribution` is supplied,
            then `_graph` must be a model of [BoostIncidenceGraph].
        ]
    ]
    [
        [required, in] [`vertex_descriptor v`]
        [
            The target vertex to which the geodisic distance is returned. The
            source vertex is made implicit by the `DistanceMap`.
        ]
    ]
    [
        [required, in] [`DistanceMap dist`]
        [
            The `dist` parameter provides the distances of the shortest paths
            from one source vertex to all others in the graph. The `DistanceMap`
            must be a model of [BoostReadWritePropertyMap], they `key_type` must
            be the `vertex_descriptor` of `Graph`.
        ]
    ]
    [
        [required, in] [`const T& dummy`]
        [
            An unused instance of the type returned by the `mean_geodesic_distance()`
            function. If specified, the measure will be computed as an average of
            this type. This type must essentially be numeric, as it is required to
            a) support division, b) be initialized with an integer type, and c)
            have a default of 0.
        ]
    ]
]

[note
The requirements on `T` indicate a particularly interesting problem because
division is basically [SgiMonoid] operation - which is probably one of the
more esoteric concepts in the STL. Curiously, the `identity_element()` operation
which is an SGI extension and apparently not part of the actual standard.

The correct implemention of `detail::sum_distances()` should take a monoid
type and use `identity_element(f)` for initializaiton and `f` for the combination.

There's also a sort of strange requirement that we need some testable notion
of infinite. So, `T` is apparently some monoidic type that also has the notion
of an infinite value.
]

[h5 Return Value]
The `geodesic_distance(g,v,dist)` function returns the distance of the shortest
path to `v`.

The `mean_geodesic_distance(g,dist)` function returns the (arithmatic) mean of
the shortest distances to all other vertices.

[h5 Complexity]
The `geodesic_distance(g,v,dist)` has O(1) time complexity.

The `mean_geodesic_distance(g,dist)` has O(n) time complexity.

[h5 Examples]
[note
Write some examples...
]

[endsect]