[library Automata
    [quickbook 1.5]
    [version 0.1]
    [authors [Enage, Cromwell D.]]
    [copyright 2007-2011 Cromwell D. Enage]
    [purpose Dynamically configurable state machine framework]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[/ Images.]
[def __logo__                   [$images/logo.png]]
[def __mdp_example__            [$http://en.wikipedia.org/wiki/File:Markov_Decision_Process_example.png]]
[def __maze_before__            [$images/maze_before.png]]
[def __maze_after__             [$images/maze_after.png]]
[def __neural_network_layout__  [$images/neural_network_layout.png]]
[def __neural_network_mystery__ [$images/neural_network_mystery.png]]
[def __neuron__                 [$images/neuron.png]]

[/ General links.]
[def __concept_based_overloading__ [@http://www.generic-programming.org/languages/conceptcpp/ concept-based overloading]]
[def __tag_dispatching__ [@http://www.generic-programming.org/languages/cpp/techniques.html#tag_dispatching tag dispatching]]
[def __automata_theory__ [@http://en.wikipedia.org/wiki/Automata_theory automata theory]]
[def __Chomsky_hierarchy__ [@http://en.wikipedia.org/wiki/Chomsky_hierarchy Chomsky hierarchy]]
[def __pushdown_automata__ [@http://en.wikipedia.org/wiki/Pushdown_automaton pushdown automata]]
[def __dfa__ [@http://en.wikipedia.org/wiki/Deterministic_finite-state_machine DFA]]
[def __zero_player_game__ [@http://en.wikipedia.org/wiki/Zero-player_game zero-player game]]
[def __cellular_automaton__ [@http://en.wikipedia.org/wiki/Cellular_automaton cellular automaton]]
[def __Wolfram_code__ [@http://en.wikipedia.org/wiki/Wolfram_code Wolfram code]]
[def __Rule_30__ [@http://en.wikipedia.org/wiki/Rule_30 Rule 30]]
[def __Rule_90__ [@http://en.wikipedia.org/wiki/Rule_90 Rule 90]]
[def __Rule_110__ [@http://en.wikipedia.org/wiki/Rule_110 Rule 110]]
[def __Rule_184__ [@http://en.wikipedia.org/wiki/Rule_184 Rule 184]]
[def __Conway_Game_of_Life__ [@http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life Conway's Game of Life]]
[def __glider__ [@http://en.wikipedia.org/wiki/Glider_(cellular_automaton) glider]]
[def __Wireworld__ [@http://en.wikipedia.org/wiki/Wireworld Wireworld]]
[def __Runtime_Complexity__ [@http://en.wikipedia.org/wiki/Amortized_analysis Runtime Complexity]]
[def __STL__ [@http://www.sgi.com/tech/stl/ STL]]
[def __Standard_Template_Library__ [@http://www.sgi.com/tech/stl/ Standard Template Library]]
[def __MTL__ [@http://osl.iu.edu/research/mtl/ MTL]]
[def __Matrix_Template_Library__ [@http://osl.iu.edu/research/mtl/ Matrix Template Library]]

[/ TODO: Apply custom styles to concept and code links.]
[/ template stl_conceptlink[page text] [@http://www.sgi.com/tech/stl/[page].html [*[text]]]]
[/ template stl_codelink[page text] [@http://www.sgi.com/tech/stl/[page].html [^[text]]]]
[/ template stl_link[page text] [@http://www.sgi.com/tech/stl/[page].html [text]]]

[/ General concept links.]
[def __Default_Constructible__ [@http://www.sgi.com/tech/stl/DefaultConstructible.html [*Default Constructible]]]
[def __STL_Container__ [@http://www.sgi.com/tech/stl/Container.html [*STL Container]]]
[def __Sequence__ [@http://www.sgi.com/tech/stl/Sequence.html [*Sequence]]]
[def __Input_Iterator__ [@http://www.sgi.com/tech/stl/InputIterator.html [*Input Iterator]]]
[def __Output_Iterator__ [@http://www.sgi.com/tech/stl/OutputIterator.html [*Output Iterator]]]
[def __Unary_Function__ [@http://www.sgi.com/tech/stl/UnaryFunction.html [*Unary Function]]]
[def __Binary_Function__ [@http://www.sgi.com/tech/stl/BinaryFunction.html [*Binary Function]]]
[def __Binary_Functions__ [@http://www.sgi.com/tech/stl/BinaryFunction.html [*Binary Functions]]]
[def __Adaptable_Unary_Function__ [@http://www.sgi.com/tech/stl/AdaptableUnaryFunction.html [*Adaptable Unary Function]]]
[def __Adaptable_Binary_Function__ [@http://www.sgi.com/tech/stl/AdaptableBinaryFunction.html [*Adaptable Binary Function]]]
[def __Equality_Comparable__ [@http://www.sgi.com/tech/stl/EqualityComparable.html [*Equality Comparable]]]
[def __MTL_Matrix__ __MTL__ [@http://osl.iu.edu/research/mtl/reference/html/Matrix.html [*Matrix]]]

[/ STL reference links.]
[def __std_vector__ [@http://www.sgi.com/tech/stl/Vector.html `std::vector`]]
[def _std_vector_ [@http://www.sgi.com/tech/stl/Vector.html std::vector]]
[def __std_deque__ [@http://www.sgi.com/tech/stl/Deque.html `std::deque`]]
[def _std_deque_ [@http://www.sgi.com/tech/stl/Deque.html std::deque]]
[def __std_list__ [@http://www.sgi.com/tech/stl/List.html `std::list`]]
[def _std_list_ [@http://www.sgi.com/tech/stl/List.html std::list]]
[def __std_map__ [@http://www.sgi.com/tech/stl/Map.html `std::map`]]
[def _std_map_ [@http://www.sgi.com/tech/stl/Map.html std::map]]
[def __non_std_hash_map__ [@http://www.sgi.com/tech/stl/hash_map.html `std::hash_map`]]
[def _non_std_hash_map_ [@http://www.sgi.com/tech/stl/hash_map.html std::hash_map]]
[def __std_string__ [@http://www.sgi.com/tech/stl/basic_string.html `std::string`]]
[def _std_string_ [@http://www.sgi.com/tech/stl/basic_string.html std::string]]
[def __std_insert_iterator__ [@http://www.sgi.com/tech/stl/insert_iterator.html `std::insert_iterator`]]
[def _std_insert_iterator_ [@http://www.sgi.com/tech/stl/insert_iterator.html std::insert_iterator]]

[/ Boost library and installation links.]
[def __Build__ [@boost:more/getting_started.html Build]]
[def __build__ [@boost:more/getting_started.html build]]
[def __MPL__ [@boost:libs/mpl/doc/index.html MPL]]
[def __Boost_Statechart__ [@boost:libs/statechart/doc/index.html Boost.Statechart]]
[def __Boost_Concept_Check__ [@boost:libs/concept_check/concept_check.htm Boost.ConceptCheck]]
[def __Boost_Test__ [@boost:libs/test/doc/index.html Boost.Test] ]
[def __Boost_Typeof__ [@boost:doc/html/typeof.html Boost.Typeof]]
[def __Boost_Fusion__ [@boost:libs/fusion/doc/html/index.html Boost.Fusion]]
[def __Boost_Function__ [@boost:doc/html/function.html Boost.Function]]
[def __Boost_Optional__ [@boost:libs/optional/doc/html/index.html Boost.Optional]]
[def __Boost_Parameter__ [@boost:libs/parameter/doc/html/index.html Boost.Parameter]]
[def __Boost_Format__ [@boost:libs/format/index.html Boost.Format]]
[def __Boost_Random__ [@boost:libs/random/doc/index.html Boost.Random]]
[def __Boost_uBlas__ [@boost:libs/numeric/ublas/doc/index.html Boost.uBlas]]
[def __Boost_Property_Map__ [@boost:libs/property_map/property_map.html Boost.PropertyMap]]
[def __BGL__ [@boost:libs/graph/doc/index.html BGL]]
[def __Boost_Graph__ [@boost:libs/graph/doc/index.html Boost.Graph]]
[def __Boost_Graph_Library__ [@boost:libs/graph/doc/index.html Boost Graph Library]]
[def __SVN_Trac__ [@http://svn.boost.org/ SVN Trac]]
[def __Boost_Type_Traits_Operators__ [@http://svn.boost.org/svn/boost/sandbox/type_traits/libs/type_traits/doc/html/index.html [*Boost.TypeTraitsOperators]]]

[/ Boost concept links.]
[def __Copy_Constructible__ [@boost:libs/utility/CopyConstructible.html [*Copy Constructible]]]
[def __Assignable__ [@boost:libs/utility/Assignable.html [*Assignable]]]
[def __Optional_Pointee__ [@boost:libs/utility/OptionalPointee.html [*Optional Pointee]]]
[def __Metafunction_Class__ [@boost:libs/mpl/doc/refmanual/metafunction-class.html [*Metafunction Class]]]
[def __Metafunction_Classes__ [@boost:libs/mpl/doc/refmanual/metafunction-class.html [*Metafunction Classes]]]
[def __Unary_Metafunction_Class__ [@boost:libs/mpl/doc/refmanual/metafunction-class.html [*Unary Metafunction Class]]]
[def __Unary_Metafunction_Classes__ [@boost:libs/mpl/doc/refmanual/metafunction-class.html [*Unary Metafunction Classes]]]
[def __Boolean_Integral_Constant__ [@boost:libs/mpl/doc/refmanual/integral-constant.html [*Boolean Integral Constant]]]
[def __Fusion_Forward_Sequence__ [@boost:libs/fusion/doc/html/fusion/sequence/concepts/forward_sequence.html [*Fusion Associative Sequence]]]
[def __Fusion_Associative_Sequence__ [@boost:libs/fusion/doc/html/fusion/sequence/concepts/associative_sequence.html [*Fusion Associative Sequence]]]
[def __Uniform_Random_Number_Generator__ [@boost:doc/html/boost_random/reference.html#boost_random.reference_concepts.uniform_random_number_generator [*Uniform Random Number Generator]]]
[def __uBlas_Matrix_Expression__ [__Boost_uBlas] [@boost:libs/numeric/ublas/doc/expression_concept.htm#matrix_expression [*Matrix Expression]]]

[/ Boost reference links in text.]
[def __empty__ [@boost:libs/fusion/doc/html/fusion/sequence/intrinsic/metafunctions/empty.html *empty*]]
[def __named_parameter__ [@boost:libs/parameter/doc/html/index.html named parameter]]
[def __name_each_parameter__ [@boost:libs/parameter/doc/html/index.html name each parameter]]
[def __deduced_argument__ [@boost:libs/parameter/doc/html/index.html#deduced-parameters deduced argument]]
[def __named_template_parameter__ [@boost:libs/parameter/doc/html/index.html#named-template-parameters named template parameter]]
[def __template_keywords__ [@boost:libs/parameter/doc/html/index.html#parameter-enabled-class-templates template keywords]]
[def __property_maps__ [@boost:libs/graph/doc/using_property_maps.html property maps]]
[def __property_tags__ [@boost:libs/graph/doc/PropertyTag.html property tags]]

[/ Boost reference links in code.]
[def __mpl_void__ [@boost:libs/mpl/doc/refmanual/void.html `boost::mpl::void_`]]
[def _mpl_void_ [@boost:libs/mpl/doc/refmanual/void.html boost::mpl::void_]]
[def __mpl_true__ [@boost:libs/mpl/doc/refmanual/bool.html `boost::mpl::true_`]]
[def _mpl_true_ [@boost:libs/mpl/doc/refmanual/bool.html boost::mpl::true_]]
[def __mpl_false__ [@boost:libs/mpl/doc/refmanual/bool.html `boost::mpl::false_`]]
[def _mpl_false_ [@boost:libs/mpl/doc/refmanual/bool.html boost::mpl::false_]]
[def __fusion_nil__ [@boost:libs/fusion/doc/html/fusion/container/cons.html `boost::fusion::nil`]]
[def _fusion_nil_ [@boost:libs/fusion/doc/html/fusion/container/cons.html boost::fusion::nil]]
[def __fusion_map__ [@boost:libs/fusion/doc/html/fusion/container/map.html `boost::fusion::map`]]
[def __fusion_has_key__ [@boost:libs/fusion/doc/html/fusion/sequence/intrinsic/functions/has_key.html `boost::fusion::has_key`]]
[def _fusion_has_key_ [@boost:libs/fusion/doc/html/fusion/sequence/intrinsic/functions/has_key.html boost::fusion::has_key]]
[def __result_of_has_key__ [@boost:libs/fusion/doc/html/fusion/sequence/intrinsic/metafunctions/has_key.html boost::fusion::result_of::has_key]]
[def __fusion_at_key__ [@boost:libs/fusion/doc/html/fusion/sequence/intrinsic/functions/at_key.html `boost::fusion::at_key`]]
[def _fusion_at_key_ [@boost:libs/fusion/doc/html/fusion/sequence/intrinsic/functions/at_key.html boost::fusion::at_key]]
[def __result_of_at_key__ [@boost:libs/fusion/doc/html/fusion/sequence/intrinsic/metafunctions/at_key.html boost::fusion::result_of::at_key]]
[def __fusion_pair__ [@boost:libs/fusion/doc/html/fusion/support/pair.html boost::fusion::pair]]
[def __fusion_make_pair__ [@boost:libs/fusion/doc/html/fusion/support/pair.html boost::fusion::make_pair]]
[def __basic_format__ [@boost:doc/html/format.html `boost::basic_format`]]
[def __array__ [@boost:doc/html/boost/array.html `boost::array`]]
[def __tr1_unordered_set__ [@boost:doc/html/boost/unordered_set.html `std::tr1::unordered_set`]]
[def _tr1_unordered_set_ [@boost:doc/html/boost/unordered_set.html std::tr1::unordered_set]]
[def __tr1_unordered_map__ [@boost:doc/html/boost/unordered_map.html `std::tr1::unordered_map`]]
[def _tr1_unordered_map_ [@boost:doc/html/boost/unordered_map.html std::tr1::unordered_map]]
[def __ublas_matrix__ [@boost:libs/numeric/ublas/doc/matrix.htm `boost::numeric::ublas::matrix`]]
[def _ublas_matrix_ [@boost:libs/numeric/ublas/doc/matrix.htm boost::numeric::ublas::matrix]]
[def __ublas_prod__ [@boost:numeric/ublas/doc/matrix_expression.htm#matrix_vector_operations `boost::numeric::ublas::prod()`]]
[def __property_map__ [@boost:libs/graph/doc/property_map.html `boost::property_map`]]
[def _property_map_ [@boost:libs/graph/doc/property_map.html boost::property_map]]
[def __property__ [@boost:libs/graph/doc/using_property_maps.html `boost::property`]]
[def _property_ [@boost:libs/graph/doc/using_property_maps.html boost::property]]
[def __vertex_index__ [@boost:libs/graph/doc/PropertyTag.html `boost::vertex_index`]]
[def _vertex_index_ [@boost:libs/graph/doc/PropertyTag.html boost::vertex_index]]
[def __graph_traits__ [@boost:libs/graph/doc/graph_traits.html `boost::graph_traits`]]
[def _graph_traits_ [@boost:libs/graph/doc/graph_traits.html boost::graph_traits]]
[def __graph_adjacency_list__ [@boost:libs/graph/doc/adjacency_list.html `boost::adjacency_list`]]
[def __graph_kruskal_mst__ [@boost:libs/graph/doc/kruskal_min_spanning_tree.html `boost::kruskal_minimum_spanning_tree`]]

[/ Boost.Automata dependencies.]
[def __Boost_ContainerGen__ [@http://svn.boost.org/svn/boost/sandbox/utility-container_gen/libs/utility/container_gen/doc/html/index.html [*Boost.ContainerGen]]]
[def __Boost_Tree_Node__ [@http://svn.boost.org/svn/boost/sandbox/tree_node/libs/tree_node/doc/html/index.html [*Boost.TreeNode]]]
[def __BGL_loop_erased_random_tree__ [@@http://svn.boost.org/svn/boost/sandbox/graph-loop_erased_random_tree/libs/graph/doc/loop_erased_random_tree.html [*Boost.Graph.LoopErasedRandomTree]]]
[def __BGL_Intrusive_Layout__ [@@http://svn.boost.org/svn/boost/sandbox/graph-intrusive_layout/libs/graph/doc/set_orthogonal_grid_layout.html [*Boost.Graph.IntrusiveLayout]]]

[/ These phrase-level bootstrap templates power the phrase-level]
[/ nullary templates that evaluate to Boost.Automata links.]
[template termlink[term] [link automata.glossary [term]]]
[/ template tutoriallink[id name] [link automata.tutorials.[id] [*[name]]]]
[/ template conceptlink[id name] [link automata.concepts.[id] [*[name]]]]
[/ template codelink[id name] [link automata.reference.[id] [^[name]]]]
[/ template lcodelink[id name] [link automata.reference.[id] [name]]]

[/ Boost.Automata tutorial links.]
[def __Basics_tutorial__ [link automata.tutorials.basics [*Basics tutorial]]]
[def __DFA_program__ [link automata.tutorials.dfa [*DFA program]]]
[def __DFA_tutorial__ [link automata.tutorials.dfa [*DFA tutorial]]]
[def __Deterministic_Finite_Automata_tutorial__ [link automata.tutorials.dfa [*Deterministic Finite Automata tutorial]]]
[def __Function_to_Automaton_tutorial__ [link automata.tutorials.func2a [*Function-to-Automaton tutorial]]]
[def __Automata_Builders_tutorial__ [link automata.tutorials.builders [*Automata Builders tutorial]]]
[def __Input_Rules_tutorial__ [link automata.tutorials.input_rules [*Input Rules tutorial]]]
[def __Observer_Policies_tutorial__ [link automata.tutorials.observer_policies [*Observer Policies tutorial]]]
[def __Cellular_Automata_tutorial__ [link automata.tutorials.cellular_automata [*Cellular Automata tutorial]]]
[def __Input_Validation_and_Undoable_Automata_tutorial__ [link automata.tutorials.undo [*Input Validation and Undoable Automata tutorial]]]
[def __t_basic_test_program__ [link automata.tutorials.basics basic test program]]
[def __t_the_original_program__ [link automata.tutorials.dfa the original program]]
[def __t_Automata_builders__ [link automata.tutorials.builders Automata builders]]
[def __t_input_rules__ [link automata.tutorials.input_rules input rules]]
[def __t_observers__ [link automata.tutorials.observer_policies observers]]
[def __t_policies__ [link automata.tutorials.observer_policies policies]]
[def __t_built_in_insertion_policies__ [link automata.tutorials.observer_policies built-in insertion policies]]
[def __t_maze_application__ [link automata.tutorials.undo maze application]]
[def __t_random_maze_situations__ [link automata.tutorials.undo random-maze simulations]]
[def __t_input_validators_or_undo_capability__ [link automata.tutorials.undo input validators or undo capability]]
[def __t_two_of_our_program_requirements__ [link automata.tutorials.undo two of our program requirements]]
[def __t_neural_network__ [link automata.tutorials.byo_automata neural network]]
[def __t_building_your_own_automata_types__ [link automata.tutorials.byo_automata building your own automata types]]
[def __t_generator_type__ [link automata.tutorials.byo_automata.generator generator type]]
[def __t_section_on_transition_functions__ [link automata.tutorials.byo_automata.transition_function section on transition functions]]
[def __t_build_your_own_policy_types__ [link automata.tutorials.byo_automata.policy build your own policy types]]

[/ This template works only if used within a Boost.Automata tutorial section.]
[/ template tutorial_source[file] [@../../../[file] [file]]]

[/ Boost.Automata tutorial source file links.]
[def __test_dpda_builder_hpp__ [@../../test/dpda_builder.hpp test/dpda_builder.hpp]]
[def __test_dpda_builder_cpp__ [@../../test/dpda_builder.cpp test/dpda_builder.cpp]]
[def __test_basics_hpp__ [@../../test/basics.hpp test/basics.hpp]]
[def __test_basics_cpp__ [@../../test/basics.cpp test/basics.cpp]]
[def __test_builder_from_graph_cpp__ [@../../test/builder_from_graph.cpp test/builder_from_graph.cpp]]
[def __test_dfa_builder_hpp__ [@../../test/dfa_builder.hpp test/dfa_builder.hpp]]
[def __test_dfa_builder_cpp__ [@../../test/dfa_builder.cpp test/dfa_builder.cpp]]
[def __test_dfa_cpp__ [@../../test/dfa.cpp test/dfa.cpp]]
[def __example_dfa_builder_hpp__ [@../../example/dfa_builder.hpp example/dfa_builder.hpp]]
[def __example_dfa_builder_cpp__ [@../../example/dfa_builder.cpp example/dfa_builder.cpp]]
[def __example_dfa_cpp__ [@../../.xample/dfa.cpp example/dfa.cpp]]
[def __example_markov_chain_cpp__ [@../../example/markov.cpp example/markov_chain.cpp]]
[def __example_markov_decision_process_cpp__ [@../../example/markov_decision_process.cpp example/markov_decision_process.cpp]]
[def __example_decision_tree_agent_cpp__ [@../../example/decision_tree_agent.cpp example/decision_tree_agent.cpp]]
[def __example_elem_cell_automaton_cpp__ [@../../example/elem_cell_automaton.cpp example/elem_cell_automaton.cpp]]
[def __example_game_of_life_cpp__ [@../../example/game_of_life.cpp example/game_of_life.cpp]]
[def __example_wireworld_cpp__ [@../../example/wireworld.cpp example/wireworld.cpp]]
[def __example_maze_hpp__ [@../../example/maze.hpp example/maze.hpp]]
[def __example_maze_cpp__ [@../../example/maze.cpp example/maze.cpp]]
[def __example_neural_network_generator_hpp__ [@../../example/neural_network_generator.hpp example/neural_network_generator.hpp]]
[def __example_neural_network_trans_func_hpp__ [@../../example/neural_network_trans_func.hpp example/neural_network_trans_func.hpp]]
[def __example_neural_network_make_samples_hpp__ [@../../example/neural_network_make_samples.hpp example/neural_network_make_samples.hpp]]
[def __example_neural_network_builder_hpp__ [@../../example/neural_network_builder.hpp example/neural_network_builder.hpp]]
[def __example_neural_network_policy_hpp__ [@../../example/neural_network_policy.hpp example/neural_network_policy.hpp]]
[def __example_neural_network_cpp__ [@../../example/neural_network.cpp example/neural_network.cpp]]

[/ This template works only if used within a Boost.Automata reference section.]
[/ template automata_header[file] [@../../../../../../boost/automata/[file].hpp <boost/automata/[file].hpp>]]

[/ Boost.Automata reference header file links.]
[def __boost_automata_automaton_hpp__ [@../../../../boost/automata/automaton.hpp boost/automata/automaton.hpp]]
[def __boost_automata_function_automaton_hpp__ [@../../../../boost/automata/function_automaton.hpp boost/automata/function_automaton.hpp]]
[def __boost_automata_generator_dpda_hpp__ [@../../../../boost/automata/generator/dpda.hpp boost/automata/generator/dpda.hpp]]
[def __boost_automata_transition_function_dpda_hpp__ [@../../../../boost/automata/transition_function/dpda.hpp boost/automata/transition_function/dpda.hpp]]
[def __boost_automata_generator_dfa_hpp__ [@../../../../boost/automata/generator/dfa.hpp boost/automata/generator/dfa.hpp]]
[def __boost_automata_transition_function_matrix_hpp__ [@../../../../boost/automata/transition_function/matrix.hpp boost/automata/transition_function/matrix.hpp]]
[def __boost_automata_transition_function_mapped_input_tabular_hpp__ [@../../../../boost/automata/transition_function/mapped_input_tabular.hpp boost/automata/transition_function/mapped_input_tabular.hpp]]
[def __boost_automata_transition_function_mapped_input_hpp__ [@../../../../boost/automata/transition_function/mapped_input.hpp boost/automata/transition_function/mapped_input.hpp]]
[def __boost_automata_transition_function_next_state_hpp__ [@../../../../boost/automata/transition_function/next_state.hpp boost/automata/transition_function/next_state.hpp]]
[def __boost_automata_generator_deterministic_hpp__ [@../../../../boost/automata/generator/deterministic.hpp boost/automata/generator/deterministic.hpp]]
[def __boost_automata_transition_function_adaptor_hpp__ [@../../../../boost/automata/transition_function/adaptor.hpp boost/automata/transition_function/adaptor.hpp]]
[def __boost_automata_transition_function_input_rule_hpp__ [@../../../../boost/automata/transition_function/input_rule.hpp boost/automata/transition_function/input_rule.hpp]]
[def __boost_automata_input_rule_cellular_graph_hpp__ [@../../../../boost/automata/input_rule/cellular_graph.hpp boost/automata/input_rule/cellular_graph.hpp]]
[def __boost_automata_transition_function_totalistic_boolean_cell_hpp__ [@../../../../boost/automata/transition_function/totalistic_boolean_cell.hpp boost/automata/transition_function/totalistic_boolean_cell.hpp]]
[def __boost_automata_transition_function_totalistic_dt_cell_hpp__ [@../../../../boost/automata/transition_function/totalistic_dt_cell.hpp boost/automata/transition_function/totalistic_dt_cell.hpp]]
[def __boost_automata_input_rule_wolfram_code_hpp__ [@../../../../boost/automata/input_rule/wolfram_code.hpp boost/automata/input_rule/wolfram_code.hpp]]
[def __boost_automata_generator_probabilistic_hpp__ [@../../../../boost/automata/generator/probabilistic.hpp boost/automata/generator/probabilistic.hpp]]
[def __boost_automata_transition_function_mdp_mapped_input_hpp__ [@../../../../boost/automata/transition_function/mdp_mapped_input.hpp boost/automata/transition_function/mdp_mapped_input.hpp]]
[def __boost_automata_transition_function_decision_tree_hpp__ [@../../../../boost/automata/transition_function/decision_tree.hpp boost/automata/transition_function/decision_tree.hpp]]
[def __boost_automata_observer_base_hpp__ [@../../../../boost/automata/observer/base.hpp boost/automata/observer/base.hpp]]
[def __boost_automata_observer_full_noop_hpp__ [@../../../../boost/automata/observer/full_noop.hpp boost/automata/observer/full_noop.hpp]]
[def __boost_automata_observer_output_hpp__ [@../../../../boost/automata/observer/output.hpp boost/automata/observer/output.hpp]]
[def __boost_automata_policy_single_final_state__ [@../../../../boost/automata/policy/single_final_state.hpp boost/automata/policy/single_final_state.hpp]]
[def __boost_automata_policy_parallel_final_states__ [@../../../../boost/automata/policy/parallel_final_states.hpp boost/automata/policy/parallel_final_states.hpp]]
[def __boost_automata_policy_serial_final_states__ [@../../../../boost/automata/policy/serial_final_states.hpp boost/automata/policy/serial_final_states.hpp]]
[def __boost_automata_policy_bool_insertion__ [@../../../../boost/automata/policy/bool_insertion.hpp boost/automata/policy/bool_insertion.hpp]]
[def __boost_automata_policy_dpda_insertion__ [@../../../../boost/automata/policy/dpda_insertion.hpp boost/automata/policy/dpda_insertion.hpp]]
[def __boost_automata_policy_dfa_insertion__ [@../../../../boost/automata/policy/dfa_insertion.hpp boost/automata/policy/dfa_insertion.hpp]]
[def __boost_automata_policy_mdp_best_input__ [@../../../../boost/automata/policy/mdp_best_input.hpp boost/automata/policy/mdp_best_input.hpp]]
[def __boost_automata_policy_moore_output__ [@../../../../boost/automata/policy/moore_output.hpp boost/automata/policy/moore_output.hpp]]
[def __boost_automata_policy_mealy_output__ [@../../../../boost/automata/policy/mealy_output.hpp boost/automata/policy/mealy_output.hpp]]
[def __boost_automata_policy_input_validation__ [@../../../../boost/automata/policy/input_validation.hpp boost/automata/policy/input_validation.hpp]]
[def __boost_automata_policy_default_input_validation__ [@../../../../boost/automata/policy/default_input_validation.hpp boost/automata/policy/default_input_validation.hpp]]
[def __boost_automata_builder_from_graph_hpp__ [@../../../../boost/automata/builder/from_graph.hpp boost/automata/builder/from_graph.hpp]]
[def __boost_automata_builder_from_graph_single_final_state_hpp__ [@../../../../boost/automata/builder/from_graph/single_final_state.hpp boost/automata/builder/from_graph/single_final_state.hpp]]
[def __boost_automata_builder_from_graph_multiple_final_states_hpp__ [@../../../../boost/automata/builder/from_graph/multiple_final_states.hpp boost/automata/builder/from_graph/multiple_final_states.hpp]]
[def __boost_automata_builder_function_hpp__ [@../../../../boost/automata/builder/function.hpp boost/automata/builder/function.hpp]]

[/ Boost.Automata concept links.]
[def __Automaton__ [link automata.concepts.automaton [*Automaton]]]
[def __Automata__ [link automata.concepts.automaton [*Automata]]]
[def __Discrete_Automaton__ [link automata.concepts.discrete_automaton [*Discrete Automaton]]]
[def __Input_Enumerable_Automaton__ [link automata.concepts.input_enum_automaton [*Input-Enumerable Automaton]]]
[def __Automaton_With_State_Register__ [link automata.concepts.automaton_wsr [*Automaton With State Register]]]
[def __DPDA__ [link automata.concepts.dpda [*Deterministic Pushdown Automaton]]]
[def __DFA__ [link automata.concepts.dfa [*Deterministic Finite Automaton]]]
[def __Extensible_Automaton__ [link automata.concepts.ext_automaton [*Extensible Automaton]]]
[def __Undoable_Automaton__ [link automata.concepts.undo_automaton [*Undoable Automaton]]]
[def __Automaton_Base__ [link automata.concepts.automaton_base [*Automaton Base]]]
[def __Discrete_Automaton_Base__ [link automata.concepts.discrete_automaton_base [*Discrete Automaton Base]]]
[def __Finite_Input_Automaton_Base__ [link automata.concepts.finite_input_auto_base [*Finite-Input Automaton Base]]]
[def __Transition_Function__ [link automata.concepts.trans_func [*Transition Function]]]
[def __Transition_Functions__ [link automata.concepts.trans_func [*Transition Functions]]]
[def __Constrained_Input_Transition_Function__ [link automata.concepts.const_input_trans_func [*Constrained-Input Transition Function]]]
[def __State_Register_Transition_Function__ [link automata.concepts.sr_trans_func [*State Register Transition Function]]]
[def __DPDA_Transition_Function__ [link automata.concepts.dpda_trans_func [*DPDA Transition Function]]]
[def __DFA_Transition_Function__ [link automata.concepts.dfa_trans_func [*DFA Transition Function]]]
[def __Tabular_Transition_Function__ [link automata.concepts.tabular_trans_func [*Tabular Transition Function]]]
[def __Mapped_Input_Tabular_Transition_Function__ [link automata.concepts.mapped_in_tab_trans_func [*Mapped-Input Tabular Transition Function]]]
[def __Mapped_Input_Transition_Function__ [link automata.concepts.mapped_in_trans_func [*Mapped-Input Transition Function]]]
[def __Next_State_Transition_Function__ [link automata.concepts.next_state_trans_func [*Next-State Transition Function]]]
[def __Probabilistic_Transition_Function__ [link automata.concepts.prob_trans_func [*Probabilistic Transition Function]]]
[def __Input_Rule__ [link automata.concepts.input_rule [*Input Rule]]]
[def __Observer__ [link automata.concepts.observer [*Observer]]]
[def __Tagged_Construction_Observer__ [link automata.concepts.tagged_cons_observer [*Tagged Construction Observer]]]
[def __Non_Tagged_Construction_Observer__ [link automata.concepts.non_tagged_cons_observer [*Non-Tagged Construction Observer]]]
[def __Copyable_Observer__ [link automata.concepts.copyable_observer [*Copyable Observer]]]
[def __Automaton_Observer__ [link automata.concepts.automaton_observer [*Automaton Observer]]]
[def __Automaton_Observers__ [link automata.concepts.automaton_observer [*Automaton Observers]]]
[def __Undoable_Automaton_Observer__ [link automata.concepts.undo_automaton_observer [*Undoable Automaton Observer]]]
[def __Input_Validator__ [link automata.concepts.input_validator [*Input Validator]]]
[def __Input_Validators__ [link automata.concepts.input_validator [*Input Validators]]]
[def __Automaton_Builder__ [link automata.concepts.automaton_builder [*Automaton Builder]]]
[def __Automaton_Builders__ [link automata.concepts.automaton_builder [*Automaton Builders]]]
[def __Extensible_Automaton_Builder__ [link automata.concepts.ext_automaton_builder [*Extensible Automaton Builder]]]
[def __Observer_Builder__ [link automata.concepts.observer_build [*Observer Builder]]]
[def __Observer_Builders__ [link automata.concepts.observer_build [*Observer Builders]]]
[def __Observer_Builder_From_Graph__ [link automata.concepts.observer_build_from_graph [*Observer Builder From Graph]]]
[def __Extraction_Source__ [link automata.concepts.extraction_source [*Extraction Source]]]
[def __Insertion_Target__ [link automata.concepts.insertion_target [*Insertion Target]]]
[def __Transition_Function_Matrix__ [link automata.concepts.trans_func_matrix [*Transition Function Matrix]]]

[/ Boost.Automata reference links.]
[def __automaton__ [link automata.reference.automaton `automaton`]]
[def _automaton_ [link automata.reference.automaton automaton]]
[def __function_automaton__ [link automata.reference.function_automaton `function_automaton`]]
[def _function_automaton_ [link automata.reference.function_automaton function_automaton]]
[def __dpda_generator__ [link automata.reference.dpda_generator `dpda_generator`]]
[def _dpda_generator_ [link automata.reference.dpda_generator dpda_generator]]
[def __dpda_transition_function__ [link automata.reference.dpda_trans_func `dpda_transition_function`]]
[def _dpda_transition_function_ [link automata.reference.dpda_trans_func dpda_transition_function]]
[def __dfa_generator__ [link automata.reference.dfa_generator `dfa_generator`]]
[def _dfa_generator_ [link automata.reference.dfa_generator dfa_generator]]
[def __matrix_transition_function__ [link automata.reference.matrix_trans_func `matrix_transition_function`]]
[def _matrix_transition_function_ [link automata.reference.matrix_trans_func matrix_transition_function]]
[def __mapped_input_tabular_transition_function__ [link automata.reference.mapped_in_tab_trans_func `mapped_input_tabular_transition_function`]]
[def _mapped_input_tabular_transition_function_ [link automata.reference.mapped_in_tab_trans_func mapped_input_tabular_transition_function]]
[def __mapped_input_transition_function__ [link automata.reference.mapped_in_trans_func `mapped_input_transition_function`]]
[def _mapped_input_transition_function_ [link automata.reference.mapped_in_trans_func mapped_input_transition_function]]
[def __next_state_transition_function__ [link automata.reference.next_state_trans_func `next_state_transition_function`]]
[def _next_state_transition_function_ [link automata.reference.next_state_trans_func next_state_transition_function]]
[def __deterministic_generator__ [link automata.reference.deterministic_generator `deterministic_generator`]]
[def _deterministic_generator_ [link automata.reference.deterministic_generator deterministic_generator]]
[def __adaptor_transition_function__ [link automata.reference.adaptor_trans_func `adaptor_transition_function`]]
[def _adaptor_transition_function_ [link automata.reference.adaptor_trans_func adaptor_transition_function]]
[def __decision_tree_explicit_transition_function__ [link automata.reference.decision_tree_xp_trans_func `decision_tree_explicit_transition_function`]]
[def _decision_tree_explicit_transition_function_ [link automata.reference.decision_tree_xp_trans_func decision_tree_explicit_transition_function]]
[def __input_rule_transition_function__ [link automata.reference.input_rule_trans_func `input_rule_transition_function`]]
[def _input_rule_transition_function_ [link automata.reference.input_rule_trans_func input_rule_transition_function]]
[def __wolfram_code_input_rule__ [link automata.reference.wolfram_code_input_rule `wolfram_code_input_rule`]]
[def _wolfram_code_input_rule_ [link automata.reference.wolfram_code_input_rule wolfram_code_input_rule]]
[def __cellular_graph_input_rule__ [link automata.reference.cellular_graph_input_rule `cellular_graph_input_rule`]]
[def _cellular_graph_input_rule_ [link automata.reference.cellular_graph_input_rule cellular_graph_input_rule]]
[def __totalistic_boolean_cell_transition_function__ [link automata.reference.ttl_bool_cell_trans_func `totalistic_boolean_cell_transition_function`]]
[def _totalistic_boolean_cell_transition_function_ [link automata.reference.ttl_bool_cell_trans_func totalistic_boolean_cell_transition_function]]
[def __totalistic_dt_cell_transition_function__ [link automata.reference.ttl_dt_cell_trans_func `totalistic_dt_cell_transition_function`]]
[def _totalistic_dt_cell_transition_function_ [link automata.reference.ttl_dt_cell_trans_func totalistic_dt_cell_transition_function]]
[def __probabilistic_generator__ [link automata.reference.probabilistic_generator `probabilistic_generator`]]
[def _probabilistic_generator_ [link automata.reference.probabilistic_generator probabilistic_generator]]
[def __mdp_mapped_input_transition_function__ [link automata.reference.mdp_mapped_input_trans_func `mdp_mapped_input_transition_function`]]
[def _mdp_mapped_input_transition_function_ [link automata.reference.mdp_mapped_input_trans_func mdp_mapped_input_transition_function]]
[def __decision_tree_transition_function__ [link automata.reference.decision_tree_trans_func `decision_tree_transition_function`]]
[def _decision_tree_transition_function_ [link automata.reference.decision_tree_trans_func decision_tree_transition_function]]
[def __base_observer__ [link automata.reference.base_observer `base_observer`]]
[def _base_observer_ [link automata.reference.base_observer base_observer]]
[def __full_noop_observer__ [link automata.reference.full_noop_observer `full_noop_observer`]]
[def _full_noop_observer_ [link automata.reference.full_noop_observer full_noop_observer]]
[def __output_observer__ [link automata.reference.output_observer `output_observer`]]
[def _output_observer_ [link automata.reference.output_observer output_observer]]
[def __single_final_state_policy__ [link automata.reference.single_final_state_policy `single_final_state_policy`]]
[def _single_final_state_policy_ [link automata.reference.single_final_state_policy single_final_state_policy]]
[def __is_at_final_state__ [link automata.reference.is_at_final_state `is_at_final_state()`]]
[def _is_at_final_state_ [link automata.reference.is_at_final_state is_at_final_state]]
[def __parallel_final_states_policy__ [link automata.reference.parall_final_states_policy `parallel_final_states_policy`]]
[def _parallel_final_states_policy_ [link automata.reference.parall_final_states_policy parallel_final_states_policy]]
[def __has_visited_any_state__ [link automata.reference.has_visited_any_state `has_visited_any_state()`]]
[def _has_visited_any_state_ [link automata.reference.has_visited_any_state has_visited_any_state]]
[def __serial_final_states_policy__ [link automata.reference.serial_final_states_policy `serial_final_states_policy`]]
[def _serial_final_states_policy_ [link automata.reference.serial_final_states_policy serial_final_states_policy]]
[def __has_no_unvisited_states__ [link automata.reference.has_no_unvisited_states `has_no_unvisited_states()`]]
[def _has_no_unvisited_states_ [link automata.reference.has_no_unvisited_states has_no_unvisited_states]]
[def __bool_insertion_policy__ [link automata.reference.bool_insertion_policy `bool_insertion_policy`]]
[def _bool_insertion_policy_ [link automata.reference.bool_insertion_policy bool_insertion_policy]]
[def __dpda_insertion_policy__ [link automata.reference.dpda_insertion_policy `dpda_insertion_policy`]]
[def _dpda_insertion_policy_ [link automata.reference.dpda_insertion_policy dpda_insertion_policy]]
[def __dfa_insertion_policy__ [link automata.reference.dfa_insertion_policy `dfa_insertion_policy`]]
[def _dfa_insertion_policy_ [link automata.reference.dfa_insertion_policy dfa_insertion_policy]]
[def __mdp_best_input_policy__ [link automata.reference.mdp_best_input `mdp_best_input`]]
[def _mdp_best_input_policy_ [link automata.reference.mdp_best_input mdp_best_input]]
[def __moore_output_policy__ [link automata.reference.moore_output_policy `moore_output_policy`]]
[def _moore_output_policy_ [link automata.reference.moore_output_policy moore_output_policy]]
[def __mealy_output_policy__ [link automata.reference.mealy_output_policy `mealy_output_policy`]]
[def _mealy_output_policy_ [link automata.reference.mealy_output_policy mealy_output_policy]]
[def __input_validation_policy__ [link automata.reference.input_valid_policy `input_validation_policy`]]
[def _input_validation_policy_ [link automata.reference.input_valid_policy input_validation_policy]]
[def __default_input_validation_policy__ [link automata.reference.def_input_valid_policy `default_input_validation_policy`]]
[def _default_input_validation_policy_ [link automata.reference.def_input_valid_policy default_input_validation_policy]]
[def __builder_from_graph__ [link automata.reference.builder_from_graph `builder_from_graph`]]
[def _builder_from_graph_ [link automata.reference.builder_from_graph builder_from_graph]]
[def __single_final_state_builder_from_graph__ [link automata.reference.single_final_state_bfg `single_final_state_builder_from_graph`]]
[def _single_final_state_builder_from_graph_ [link automata.reference.single_final_state_bfg single_final_state_builder_from_graph]]
[def __multiple_final_states_builder_from_graph__ [link automata.reference.multi_final_states_bfg `multiple_final_states_builder_from_graph`]]
[def _multiple_final_states_builder_from_graph_ [link automata.reference.multi_final_states_bfg multiple_final_states_builder_from_graph]]
[def __function_builder__ [link automata.reference.function_builder `function_builder`]]
[def _function_builder_ [link automata.reference.function_builder function_builder]]

[/ Autogenerate concept and reference documentation directly from code.]
[/ Bypass Doxygen.]
[import ../../../boost/automata/concept_check/trans_func.hpp]
[import ../../../boost/automata/concept_check/sr_trans_func.hpp]
[import ../../../boost/automata/concept_check/dpda_trans_func.hpp]
[import ../../../boost/automata/concept_check/dfa_trans_func.hpp]
[import ../../../boost/automata/concept_check/tabular_trans_func.hpp]
[import ../../../boost/automata/concept_check/mapped_in_tab_trans_func.hpp]
[import ../../../boost/automata/concept_check/mapped_in_trans_func.hpp]
[import ../../../boost/automata/concept_check/next_state_trans_func.hpp]
[import ../../../boost/automata/concept_check/trans_func_matrix.hpp]
[import ../../../boost/automata/keyword/template.hpp]
[import ../../../boost/automata/keyword/name.hpp]
[import ../../../boost/automata/generator/dpda.hpp]
[import ../../../boost/automata/transition_function/dpda.hpp]
[import ../../../boost/automata/generator/dfa.hpp]
[import ../../../boost/automata/transition_function/matrix.hpp]
[import ../../../boost/automata/transition_function/mapped_input_tabular.hpp]
[import ../../../boost/automata/transition_function/mapped_input.hpp]
[import ../../../boost/automata/transition_function/next_state.hpp]
[import ../../../boost/automata/generator/deterministic.hpp]
[import ../../../boost/automata/transition_function/adaptor.hpp]
[import ../../../boost/automata/transition_function/input_rule.hpp]
[import ../../../boost/automata/input_rule/wolfram_code.hpp]
[import ../../../boost/automata/input_rule/cellular_graph.hpp]
[import ../../../boost/automata/transition_function/totalistic_boolean_cell.hpp]
[import ../../../boost/automata/transition_function/totalistic_dt_cell.hpp]
[import ../../../boost/automata/generator/probabilistic.hpp]
[import ../../../boost/automata/transition_function/mdp_mapped_input.hpp]
[import ../../../boost/automata/transition_function/decision_tree.hpp]
[import ../../../boost/automata/builder/function.hpp]
[import ../../../boost/automata/builder/from_graph.hpp]
[import ../../../boost/automata/builder/from_graph/single_final_state.hpp]
[import ../../../boost/automata/builder/from_graph/multiple_final_states.hpp]
[import ../../../boost/automata/observer/base.hpp]
[import ../../../boost/automata/observer/full_noop.hpp]
[import ../../../boost/automata/observer/output.hpp]
[import ../../../boost/automata/policy/single_final_state.hpp]
[import ../../../boost/automata/policy/parallel_final_states.hpp]
[import ../../../boost/automata/policy/serial_final_states.hpp]
[import ../../../boost/automata/policy/bool_insertion.hpp]
[import ../../../boost/automata/policy/dpda_insertion.hpp]
[import ../../../boost/automata/policy/dfa_insertion.hpp]
[import ../../../boost/automata/policy/mdp_best_input.hpp]
[import ../../../boost/automata/policy/moore_output.hpp]
[import ../../../boost/automata/policy/mealy_output.hpp]
[import ../../../boost/automata/policy/default_input_validation.hpp]
[import ../../../boost/automata/policy/input_validation.hpp]
[import ../../../boost/automata/automaton.hpp]
[import ../../../boost/automata/function_automaton.hpp]
[import ../test/dpda_builder.hpp]
[import ../test/dpda_builder.cpp]
[import ../test/basics.hpp]
[import ../test/basics.cpp]
[import ../test/dfa_builder.hpp]
[import ../test/dfa_builder.cpp]
[import ../test/dfa.cpp]
[import ../test/builder_from_graph.cpp]
[import ../example/dfa_builder.hpp]
[import ../example/dfa_builder.cpp]
[import ../example/dfa.cpp]
[import ../example/markov_chain.cpp]
[import ../example/elem_cell_automaton.cpp]
[import ../example/game_of_life.cpp]
[import ../example/wireworld.cpp]
[import ../example/markov_decision_process.cpp]
[import ../example/decision_tree_agent.cpp]
[import ../example/maze.hpp]
[import ../example/maze.cpp]
[import ../example/neural_network_generator.hpp]
[import ../example/neural_network_trans_func.hpp]
[import ../example/neural_network_builder.hpp]
[import ../example/neural_network_make_samples.hpp]
[import ../example/neural_network_policy.hpp]
[import ../example/neural_network.cpp]

[/ index.html Start]

[heading What It Is]
Boost.Automata is a library of *data structures* that can be used to implement
/dynamically configurable/ state machines.  Such state machines enjoy
widespread use in artificial intelligence, language processing, and graph
walking simulations.  Boost.Automaton's data structures derive their
flexibility and power from *algorithms* that manipulate them.

[heading What It Is Not]
[*Boost.Automata is not a replacement for
__Boost_Statechart__!]  Boost.Statechart is a framework for implementing
/static/ state machines, which are configurable only during compile
time.  These state machines are highly optimized and fault-tolerant because of
the requirements placed upon them.  They derive their flexibility and power
from their near-conformance to UML standards, enabling /state machine
designers/ to employ Boost.Statechart effectively.  Boost.Automata, on the
other hand, is modeled after the __STL__, where genericity is the main
concern.

[heading Getting Started]
Boost.Automata is a header-only library.  However, you need an up-to-date
compiler to be able to use it in your programs.

[important
    Some components depend on __Boost_Type_Traits_Operators__, which has been
    recently accepted into Boost but is currently not part of an official
    release.  For now, you must perform a Subversion checkout from the
    __SVN_Trac__.

    Some components and tutorials depend on __Boost_Tree_Node__,
    __BGL_loop_erased_random_tree__, and __BGL_Intrusive_Layout__, none of
    which have been been submitted for review yet.
]

[/ index.html End]

[warning
    The documentation is still lagging and/or under construction in most areas,
    especially concepts.
]

[include tutorials.qbk]
[include glossary.qbk]
[include reference.qbk]
[include concepts.qbk]

