# multiprecision/libs/multiprecision/test/numerical_test/jamfile.v2

# multiprecision EFX numerical tests using Boost.test unit test framework
# also other tests of IO comformity to builtin floating-point types.

# Copyright Paul A. Bristow 2011

# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

import testing ;

project
  : requirements
		<library>/boost/test//boost_test_exec_monitor/<link>static
		<include>../../..
		<include>../../../boost/
		<define>BOOST_ALL_NO_LIB=1 # Why?
		<define>BOOST_MULTIPRECISION_BACKEND_MP_FLOAT_TYPE_EFX # Could also be BOOST_MULTIPRECISION_BACKEND_MP_FLOAT_TYPE_GMP or BOOST_MULTIPRECISION_BACKEND_MP_FLOAT_TYPE_MFPR.
		<define>BOOST_MULTIPRECISION_BACKEND_MP_FLOAT_DIGITS10=50 # Overriding the default of 100 for testing purposes.
		# But has no effect without bjam -a option???
		
		<toolset>gcc:<cxxflags>-Wextra
		<toolset>gcc:<cxxflags>-Wshadow
		<toolset>gcc:<warnings-as-errors>on
		<toolset>gcc:<cxxflags>-Wno-long-long
		<toolset>gcc:<cxxflags>-Wcast-align
		<toolset>intel:<warnings-as-errors>on
		
		-<toolset>msvc:<cxxflags>/Za # Requires MS extensions, so explictly cancel /Za to enable extensions.
		<toolset>msvc:<asynch-exceptions>on # Needed for Boost.Test
		<toolset>msvc:<warnings>all
		<toolset>msvc:<warnings-as-errors>on
		<toolset>msvc:<define>_SCL_SECURE_NO_WARNINGS
		<toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
		<toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
		<toolset>msvc:<define>_CRT_SECURE_NO_WARNINGS
		<toolset>msvc:<define>BOOST_MULTIPRECISION_BACKEND_MP_FLOAT_DIGITS10=50 # Overriding the default of 100 for testing purposes.
		
		# Warning suppression:
		<toolset>msvc:<cxxflags>/wd4224 # nonstandard extension used : formal parameter 'arg' was previously defined as a type.
		<toolset>msvc:<cxxflags>/wd4127 # expression is constant.
    ;
    
    # https://svn.boost.org/trac/boost/ticket/5758 patch may be needed to show
    # all significant decimal digits from Boost.Test comparisons that fail.
    # For example, a reported inequality like "2.00000 != 2.00000".
    
    # --log_level="message"  needed to display BOOST_TEST_MESSAGE messages.

 test-suite "multiprecision EFX numerical test" :
		[
		  run numerical_test.cpp
		  :  --log_level="message"
		  :
					../real/cases/test_case_0000x_overflow_underflow.cpp
					../real/cases/test_case_0000y_write_to_ostream.cpp
					../real/cases/test_case_0000z_global_ops_pod.cpp
					../real/cases/test_case_00051_factorial.cpp
					../real/cases/test_case_00021_bernoulli.cpp
					../real/cases/test_case_00011_various_elem_math.cpp
					../real/cases/test_case_00903_zeta_neg_x.cpp
					../real/cases/test_case_00902_zeta_all_x.cpp
					../real/cases/test_case_00901_zeta_small_x.cpp
					../real/cases/test_case_00221_various_gamma_func.cpp
					../real/cases/test_case_00205_gamma_near_neg_n.cpp
					../real/cases/test_case_00204_gamma_tiny_x.cpp
					../real/cases/test_case_00203_gamma_small_x.cpp
					../real/cases/test_case_00202_gamma_medium_x.cpp
					../real/cases/test_case_00201_gamma.cpp
					../real/cases/test_case_00126_atanh.cpp
					../real/cases/test_case_00125_acosh.cpp
					../real/cases/test_case_00124_asinh.cpp
					../real/cases/test_case_00123_tanh.cpp
					../real/cases/test_case_00122_cosh.cpp
					../real/cases/test_case_00121_sinh.cpp
					../real/cases/test_case_00115_various_elem_trans.cpp
					../real/cases/test_case_00114_various_trig.cpp
					../real/cases/test_case_00113_atan_x_small_to_large.cpp
					../real/cases/test_case_00112_cos_x_near_pi_half.cpp
					../real/cases/test_case_00111_sin_small_x.cpp
					../real/cases/test_case_00106_rootn.cpp
					../real/cases/test_case_00105_sqrt.cpp
					../real/cases/test_case_00104_log.cpp
					../real/cases/test_case_00103_exp.cpp
					../real/cases/test_case_00102_cos.cpp
					../real/cases/test_case_00101_sin.cpp
					../real/cases/test_case_00071_various_int_func.cpp
					../real/cases/test_case_00021_bernoulli.cpp
					../real/cases/test_case_00051_factorial.cpp
					../real/cases/test_case_00052_factorial2.cpp

		      ../real/test_real.cpp
		      ../../src/backends/float/mp_float.cpp
		      ../../src/backends/float/mp_float_base.cpp
		      ../../src/backends/float/efx/mp_float_efx.cpp
		      ../../src/functions/constants/constants.cpp
		      ../../src/functions/elementary/elementary_complex.cpp
		      ../../src/functions/elementary/elementary_math.cpp
		      ../../src/functions/elementary/elementary_hyper_g.cpp
		      ../../src/functions/elementary/elementary_trans.cpp
		      ../../src/functions/elementary/elementary_trig.cpp
		      ../../src/functions/gamma/factorial.cpp
		      ../../src/functions/gamma/factorial2.cpp
		      ../../src/functions/gamma/gamma.cpp
		      ../../src/functions/gamma/gamma_util.cpp
		      ../../src/functions/gamma/pochhammer.cpp
		      ../../src/functions/integer/prime.cpp
		      ../../src/functions/integer/prime_factor.cpp
		      ../../src/functions/integer/bernoulli_b.cpp
		      ../../src/functions/zeta/zeta.cpp
		      ../../src/functions/tables/A000142.cpp
		      ../../src/functions/tables/A000367.cpp
		      ../../src/functions/tables/A002445.cpp
		      ../../src/functions/tables/A006882.cpp
		      ../../src/functions/tables/A007318.cpp
		      ../../src/utility/util_power_j_pow_x.cpp
		      ../../src/utility/util_timer.cpp
		      ../../src/utility/util_digit_scale.cpp
		      ../test_case_base.cpp
		      		      
	      
		]
  ;
  
