[/ Generated by doxygen_xml2qbk, don't change, will be overwritten automatically]
[/ Generated from xml/group__varray__non__member.xml]
[section:group__varray__non__member varray non-member functions]
[heading Functions]
[table
[[Function][Description]]
[[[link group__varray__non__member_1gaba927647f8414bfa8109140f6b9d5a9c `operator==(varray<...> const &, varray<...> const &)`]][Checks if contents of two varrays are equal. ]]
[[[link group__varray__non__member_1ga83e04e36cce1c131f0c1352cfacf0da0 `operator!=(varray<...> const &, varray<...> const &)`]][Checks if contents of two varrays are not equal. ]]
[[[link group__varray__non__member_1ga01aebc3b524d76c669bc2080339bc38d `operator<(varray<...> const &, varray<...> const &)`]][Lexicographically compares varrays. ]]
[[[link group__varray__non__member_1ga10d2ce7ca29d0665a59cb96215b49440 `operator>(varray<...> const &, varray<...> const &)`]][Lexicographically compares varrays. ]]
[[[link group__varray__non__member_1ga9dc9344081e4f2e6636cfe6080e06c56 `operator<=(varray<...> const &, varray<...> const &)`]][Lexicographically compares varrays. ]]
[[[link group__varray__non__member_1ga421e358bc22b19e49fd63fb462c35c5d `operator>=(varray<...> const &, varray<...> const &)`]][Lexicographically compares varrays. ]]
[[[link group__varray__non__member_1gac4af1128111dd5e63afc195f8b3e0ec4 `swap(varray<...> &, varray<...> &)`]][Swaps contents of two varrays. ]]
]

[#group__varray__non__member_1gaba927647f8414bfa8109140f6b9d5a9c]
[section operator==(varray<...> const &, varray<...> const &)]
Checks if contents of two varrays are equal. 

[heading Synopsis]
[pre
`template<``typename V``,`
         `std::size_t C1``,`
         `std::size_t C2``>`
`bool boost::container::operator==``(``varray< V, C1 > const &` `x``,` `varray< V, C2 > const &` `y``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`varray< V, C1 > const &`][ `x` ][The first varray. ]]
[[`varray< V, C2 > const &`][ `y` ][The second varray.]]
]
[heading Returns]
[^`true`] if containers have the same size and elements in both containers are equal.
[heading Complexity]
Linear O(N). 

[endsect]

[#group__varray__non__member_1ga83e04e36cce1c131f0c1352cfacf0da0]
[section operator!=(varray<...> const &, varray<...> const &)]
Checks if contents of two varrays are not equal. 

[heading Synopsis]
[pre
`template<``typename V``,`
         `std::size_t C1``,`
         `std::size_t C2``>`
`bool boost::container::operator!=``(``varray< V, C1 > const &` `x``,` `varray< V, C2 > const &` `y``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`varray< V, C1 > const &`][ `x` ][The first varray. ]]
[[`varray< V, C2 > const &`][ `y` ][The second varray.]]
]
[heading Returns]
[^`true`] if containers have different size or elements in both containers are not equal.
[heading Complexity]
Linear O(N). 

[endsect]

[#group__varray__non__member_1ga01aebc3b524d76c669bc2080339bc38d]
[section operator<(varray<...> const &, varray<...> const &)]
Lexicographically compares varrays. 

[heading Synopsis]
[pre
`template<``typename V``,`
         `std::size_t C1``,`
         `std::size_t C2``>`
`bool boost::container::operator<``(``varray< V, C1 > const &` `x``,` `varray< V, C2 > const &` `y``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`varray< V, C1 > const &`][ `x` ][The first varray. ]]
[[`varray< V, C2 > const &`][ `y` ][The second varray.]]
]
[heading Returns]
[^`true`] if x compares lexicographically less than y.
[heading Complexity]
Linear O(N). 

[endsect]

[#group__varray__non__member_1ga10d2ce7ca29d0665a59cb96215b49440]
[section operator>(varray<...> const &, varray<...> const &)]
Lexicographically compares varrays. 

[heading Synopsis]
[pre
`template<``typename V``,`
         `std::size_t C1``,`
         `std::size_t C2``>`
`bool boost::container::operator>``(``varray< V, C1 > const &` `x``,` `varray< V, C2 > const &` `y``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`varray< V, C1 > const &`][ `x` ][The first varray. ]]
[[`varray< V, C2 > const &`][ `y` ][The second varray.]]
]
[heading Returns]
[^`true`] if y compares lexicographically less than x.
[heading Complexity]
Linear O(N). 

[endsect]

[#group__varray__non__member_1ga9dc9344081e4f2e6636cfe6080e06c56]
[section operator<=(varray<...> const &, varray<...> const &)]
Lexicographically compares varrays. 

[heading Synopsis]
[pre
`template<``typename V``,`
         `std::size_t C1``,`
         `std::size_t C2``>`
`bool boost::container::operator<=``(``varray< V, C1 > const &` `x``,` `varray< V, C2 > const &` `y``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`varray< V, C1 > const &`][ `x` ][The first varray. ]]
[[`varray< V, C2 > const &`][ `y` ][The second varray.]]
]
[heading Returns]
[^`true`] if y don't compare lexicographically less than x.
[heading Complexity]
Linear O(N). 

[endsect]

[#group__varray__non__member_1ga421e358bc22b19e49fd63fb462c35c5d]
[section operator>=(varray<...> const &, varray<...> const &)]
Lexicographically compares varrays. 

[heading Synopsis]
[pre
`template<``typename V``,`
         `std::size_t C1``,`
         `std::size_t C2``>`
`bool boost::container::operator>=``(``varray< V, C1 > const &` `x``,` `varray< V, C2 > const &` `y``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`varray< V, C1 > const &`][ `x` ][The first varray. ]]
[[`varray< V, C2 > const &`][ `y` ][The second varray.]]
]
[heading Returns]
[^`true`] if x don't compare lexicographically less than y.
[heading Complexity]
Linear O(N). 

[endsect]

[#group__varray__non__member_1gac4af1128111dd5e63afc195f8b3e0ec4]
[section swap(varray<...> &, varray<...> &)]
Swaps contents of two varrays. 

[heading Description]
This function calls [link classboost_1_1container_1_1varray_1a002fb09972d8a2f11673265d0d06a100 varray::swap()].[heading Synopsis]
[pre
`template<``typename V``,`
         `std::size_t C1``,`
         `std::size_t C2``>`
`void boost::container::swap``(``varray< V, C1 > &` `x``,` `varray< V, C2 > &` `y``)`
]

[heading Parameter(s)]
[table 
[[Type][Name][Description]]
[[`varray< V, C1 > &`][ `x` ][The first varray. ]]
[[`varray< V, C2 > &`][ `y` ][The second varray.]]
]
[heading Complexity]
Linear O(N). 

[endsect]

[endsect]

