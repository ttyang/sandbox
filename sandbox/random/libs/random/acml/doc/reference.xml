<?xml version="1.0" standalone="yes"?>
<library-reference id="headers"><title>Headers</title><header name="boost/random/acml/engine.hpp"><para>This file contains a random number engine which wraps functions from the AMD ACML library. </para><namespace name="boost"><namespace name="random"><namespace name="acml"><class name="engine"><template>
      <template-nontype-parameter name="genid_"><type>long</type><default>1</default></template-nontype-parameter>
      <template-nontype-parameter name="single"><type>bool</type><default>false</default><purpose><para>Use single precision? </para></purpose></template-nontype-parameter>
      <template-nontype-parameter name="subid_"><type>long</type><default>1</default></template-nontype-parameter>
    </template><purpose>Class wrapping the AMD ACML base random number generators. </purpose><description><para>Implements the boost uniform random number generator concept. 
</para></description><typedef name="internal_type"><description><para>Single or double precision. </para></description><type>boost::mpl::if_c&lt; single, float, double &gt;::type</type></typedef><typedef name="result_type"><description><para>Type of the resulting random value. </para></description><type>long</type></typedef><typedef name="seed_type"><description><para>Type of the seed values. </para></description><type>long</type></typedef><typedef name="is_range_generator"><description><para>Required for the engine to model a Range Generator. </para></description><type>boost::range_generate::unit_stride_range_generator_type_checked&lt; result_type &gt;</type></typedef><typedef name="state_type"><description><para>Type of the internal state. </para></description><type>std::vector&lt; long &gt;</type></typedef><data-member name="genid" specifiers="static"><type>const long</type><purpose>AMD ACML GENID index. </purpose></data-member><data-member name="subid" specifiers="static"><type>const long</type><purpose>AMD ACML SUBID index. </purpose></data-member><data-member name="default_seed" specifiers="static"><type>const long</type><purpose>Default seed parameter. </purpose></data-member><method-group name="public member functions"><method name="seed" cv=""><type>void</type><purpose>Set default seed value. </purpose></method><method name="seed" cv=""><type>void</type><parameter name="s"><paramtype>long</paramtype><description><para>Seed value. </para></description></parameter><purpose>Set seed value. </purpose><description><para>
</para></description></method><method name="seed" cv=""><type>void</type><template>
          <template-type-parameter name="Sseq"><purpose><para>Seed sequence type. </para></purpose></template-type-parameter>
        </template><parameter name="q"><paramtype>Sseq &amp;</paramtype><description><para>Seed sequence. </para></description></parameter><purpose>Set state by seed sequence. </purpose><description><para>

</para></description></method><method name="seed" cv=""><type>void</type><template>
          <template-type-parameter name="It"><purpose><para>Input iterator type. </para></purpose></template-type-parameter>
        </template><parameter name="first"><paramtype>It</paramtype><description><para>Iterator pointing to the first seed value. </para></description></parameter><parameter name="last"><paramtype>It</paramtype><description><para>Iterator pointing past-the-end of seed value sequence. </para></description></parameter><purpose>Set state by sequence of seed values. </purpose><description><para>

</para></description></method><method name="discard" cv=""><type>void</type><parameter name="z"><paramtype>std::size_t</paramtype><description><para>Number of values to be discarded. </para></description></parameter><purpose>Discard values. </purpose><description><para>
</para></description></method><method name="operator()" cv=""><type>void</type><template>
          <template-type-parameter name="UnitStrideIterator"><purpose><para>Iterator type which implements the Unit Stride Iterator concept. </para></purpose></template-type-parameter>
        </template><parameter name="first"><paramtype>UnitStrideIterator</paramtype><description><para>Start iterator. </para></description></parameter><parameter name="last"><paramtype>UnitStrideIterator</paramtype><description><para>Past-the-end iterator. </para></description></parameter><purpose>Range function call. </purpose><description><para>Assign random values to a range. 


</para></description><requires><para><computeroutput>UnitStrideIterator</computeroutput> must meet the requirements of a Unit Stride Iterator and it's value_type must be equal to the engine's result type. </para></requires></method><method name="operator()" cv=""><type>result_type</type><purpose>Element function call. </purpose><description><para>
</para></description><returns><para>A single random value. </para></returns></method><method name="min" cv="const"><type>result_type</type><purpose>Minimum value that the engine can return. </purpose><description><para>
</para></description><returns><para>Minimum value </para></returns></method><method name="max" cv="const"><type>result_type</type><purpose>Maximum value that the engine can return. </purpose><description><para>
</para></description><returns><para>Maximum value </para></returns></method><method name="state" cv=""><type>state_type &amp;</type><purpose>Get access to internal state object. </purpose><description><para>
</para></description><returns><para>State. </para></returns></method><method name="state" cv="const"><type>const state_type &amp;</type><purpose>Get read access to internal state object. </purpose><description><para>
</para></description><returns><para>State. </para></returns></method></method-group><constructor><purpose>Construct an instance with default parameters. </purpose></constructor><constructor specifiers="explicit"><parameter name="value"><paramtype>long</paramtype><description><para>Seed value. </para></description></parameter><purpose>Construct with user defined seed value. </purpose><description><para>
</para></description></constructor><constructor specifiers="explicit"><template>
          <template-type-parameter name="SeedSeq"/>
        </template><parameter name="seq"><paramtype>SeedSeq &amp;</paramtype><description><para>Seed sequence. </para></description></parameter><purpose>Construct with seed sequence. </purpose><description><para>
</para></description></constructor><constructor><template>
          <template-type-parameter name="It"><purpose><para>Input iterator type. </para></purpose></template-type-parameter>
        </template><parameter name="first"><paramtype>It &amp;</paramtype><description><para>Iterator pointing to the first seed value. </para></description></parameter><parameter name="last"><paramtype>It &amp;</paramtype><description><para>Iterator pointing past-the-end of seed value sequence. </para></description></parameter><purpose>Construct from seed values. </purpose><description><para>

</para></description></constructor><constructor><parameter name="e"><paramtype>const <classname>engine</classname> &amp;</paramtype><description><para>Other engine </para></description></parameter><purpose>Copy construct. </purpose><description><para>
</para></description></constructor><copy-assignment><parameter name="rhs"><paramtype><classname>engine</classname></paramtype><description><para>Instance to copy from. </para></description></parameter><purpose>Assignment operator. </purpose><description><para>

</para></description><returns><para>Reference to this instance. </para></returns></copy-assignment><method-group name="friend functions"><method name="operator==" cv=""><type>friend bool</type><parameter name="a"><paramtype>const <classname>engine</classname> &amp;</paramtype><description><para>Left hand side instance. </para></description></parameter><parameter name="b"><paramtype>const <classname>engine</classname> &amp;</paramtype><description><para>Right hand side instance. </para></description></parameter><purpose>Equality operator. </purpose><description><para>

</para></description><returns><para>Returns true if a and b are in the same state. </para></returns></method><method name="operator!=" cv=""><type>friend bool</type><parameter name="a"><paramtype>const <classname>engine</classname> &amp;</paramtype><description><para>Left hand side instance. </para></description></parameter><parameter name="b"><paramtype>const <classname>engine</classname> &amp;</paramtype><description><para>Right hand side instance. </para></description></parameter><purpose>Inequality operator. </purpose><description><para>

</para></description><returns><para>Returns true if a and b are not in the same state. </para></returns></method><method name="operator&lt;&lt;" cv=""><type>friend std::basic_ostream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, Traits &gt; &amp;</paramtype><description><para>Output stream instance. </para></description></parameter><parameter name="e"><paramtype>const <classname>engine</classname> &amp;</paramtype><description><para>Instance of engine. </para></description></parameter><purpose>Writes state to output stream. </purpose><description><para>

</para></description><returns><para>Reference to output stream. </para></returns></method><method name="operator&gt;&gt;" cv=""><type>friend std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype><description><para>Input stream instance. </para></description></parameter><parameter name="e"><paramtype><classname>engine</classname> &amp;</paramtype><description><para>Instance of engine. </para></description></parameter><purpose>Reads state from input stream. </purpose><description><para>

</para></description><returns><para>Reference to input stream. </para></returns></method></method-group></class><struct name="has_block_split"><template>
      <template-type-parameter name="Engine"><purpose><para>ACML engine. </para></purpose></template-type-parameter>
    </template><purpose>Traits class to inquire whether engine can be used with block-splitting. </purpose><description><para>
</para></description></struct><struct name="has_leap_frog"><template>
      <template-type-parameter name="Engine"><purpose><para>ACML engine. </para></purpose></template-type-parameter>
    </template><purpose>Traits class to inquire whether engine can be used with leap-frogging. </purpose><description><para>
</para></description></struct><typedef name="nag"><description><para>NAG basic generator: linear congruential generator, period is approx. 2^57 </para></description><type><classname>engine</classname>&lt; 1, false, 1 &gt;</type></typedef><typedef name="wh"><description><para>A set of 273 Wichmann-Hill combined multiplicative congruential generators. </para></description><type><classname>engine</classname>&lt; 2, false, 1 &gt;</type></typedef><typedef name="mt19937"><description><para>A Mersenne Twister pseudorandom number generator. </para></description><type><classname>engine</classname>&lt; 3, false, 1 &gt;</type></typedef><typedef name="mrg32k3a"><description><para>A combined multiple recursive generator with two components of order 3. </para></description><type><classname>engine</classname>&lt; 4, false, 1 &gt;</type></typedef><function name="make_independent_engines_by_block_split"><type>void</type><template>
          <template-type-parameter name="Engine"><purpose><para>ACML engine. </para></purpose></template-type-parameter>
          <template-type-parameter name="Iterator"><purpose><para>Iterator class. </para></purpose></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype><description><para>Points to the first engine. </para></description></parameter><parameter name="end"><paramtype>Iterator</paramtype><description><para>Points past-the-end of the last engine. </para></description></parameter><parameter name="size"><paramtype>const std::size_t &amp;</paramtype><description><para>Maximum number of variates needed from a single engine. </para></description></parameter><purpose>Makes engines independent by block-splitting. </purpose><description><para>


</para></description><returns><para>Independent engines (by block-splitting). </para></returns></function><function name="make_independent_engines_by_leap_frog"><type>void</type><template>
          <template-type-parameter name="Engine"><purpose><para>ACML engine. </para></purpose></template-type-parameter>
          <template-type-parameter name="Iterator"><purpose><para>Iterator class. </para></purpose></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype><description><para>Points to the first engine. </para></description></parameter><parameter name="end"><paramtype>Iterator</paramtype><description><para>Points past-the-end of the last engine. </para></description></parameter><purpose>Makes engines independent by leap-frogging. </purpose><description><para>


</para></description><returns><para>Independent engines (by leap-frogging). </para></returns></function></namespace></namespace></namespace></header><header name="boost/random/mkl/engine.hpp"><para>This file contains a random number engine which wraps functions from the Intel MKL library. </para><namespace name="boost"><namespace name="random"><namespace name="mkl"><class name="engine"><template>
      <template-nontype-parameter name="brng"><type>int</type><default>VSL_BRNG_MT19937</default><purpose><para>BRNG index. </para></purpose></template-nontype-parameter>
    </template><purpose>Class wrapping the intel MKL basic uniform random number generators (BRNG). </purpose><description><para>Implements the boost uniform random number generator concept. 
</para></description><typedef name="result_type"><description><para>Type of the resulting random value. </para></description><type>int</type></typedef><typedef name="seed_type"><description><para>Type of the seed values. </para></description><type>unsigned int</type></typedef><typedef name="internal_type"><description><para>Internal type used for storing random values. Usually sizeof(internal_type) &lt; sizeof(result_type). In order to find out, how many internal_type values are required for representing one random value, use <computeroutput>n_internal()</computeroutput> function. </para></description><type>unsigned int</type></typedef><typedef name="is_range_generator"><description><para>Required for the engine to model a Range Generator. </para></description><type>boost::range_generate::unit_stride_range_generator_type_checked&lt; result_type &gt;</type></typedef><data-member name="id" specifiers="static"><type>const int</type><purpose>Intel MKL BRNG index. </purpose></data-member><data-member name="default_seed" specifiers="static"><type>const unsigned int</type></data-member><method-group name="public member functions"><method name="seed" cv=""><type>void</type><purpose>Set default seed value. </purpose></method><method name="seed" cv=""><type>void</type><parameter name="s"><paramtype>seed_type</paramtype><description><para>Seed value. </para></description></parameter><purpose>Set seed value. </purpose><description><para>
</para></description></method><method name="seed" cv=""><type>void</type><template>
          <template-type-parameter name="SeedSeq"/>
        </template><parameter name="seq"><paramtype>SeedSeq &amp;</paramtype><description><para>Seed seequence. </para></description></parameter><purpose>Set state by seed sequence. </purpose><description><para>

</para></description></method><method name="seed" cv=""><type>void</type><template>
          <template-type-parameter name="It"><purpose><para>Input iterator type. </para></purpose></template-type-parameter>
        </template><parameter name="first"><paramtype>It</paramtype><description><para>Iterator pointing to the first seed value. </para></description></parameter><parameter name="last"><paramtype>It</paramtype><description><para>Iterator pointing past-the-end of seed value sequence. </para></description></parameter><purpose>Set state by sequence of seed values. </purpose><description><para>

</para></description></method><method name="discard" cv=""><type>void</type><parameter name="z"><paramtype>std::size_t</paramtype><description><para>Number of values to be discarded. </para></description></parameter><purpose>Discard values. </purpose><description><para>
</para></description></method><method name="operator()" cv=""><type>void</type><template>
          <template-type-parameter name="UnitStrideIterator"><purpose><para>Iterator type which implements the Unit Stride Iterator concept. </para></purpose></template-type-parameter>
        </template><parameter name="begin"><paramtype>UnitStrideIterator</paramtype><description><para>Start iterator. </para></description></parameter><parameter name="end"><paramtype>UnitStrideIterator</paramtype><description><para>Past-the-end iterator. </para></description></parameter><purpose>Range function call. </purpose><description><para>Assign random values to a range. 


</para></description><requires><para><computeroutput>UnitStrideIterator</computeroutput> must meet the requirements of a Unit Stride Iterator and it's value_type must be equal to the engine's result type. </para></requires></method><method name="operator()" cv=""><type>result_type</type><purpose>Element function call. </purpose><description><para>
</para></description><returns><para>A single random value. </para></returns></method><method name="min" cv="const"><type>result_type</type><purpose>Minimum random value. </purpose><description><para>
</para></description><returns><para>Minimum random value. </para></returns></method><method name="max" cv="const"><type>result_type</type><purpose>Maximum random value. </purpose><description><para>
</para></description><returns><para>Maximum random value. </para></returns></method><method name="get_stream" cv=""><type>VSLStreamStatePtr &amp;</type><purpose>Get access to internal random stream object. </purpose><description><para>
</para></description><returns><para>VSL stream state pointer. </para></returns></method></method-group><constructor><purpose>Construct an instance with default parameters. </purpose></constructor><constructor specifiers="explicit"><parameter name="value"><paramtype>seed_type</paramtype><description><para>Seed value. </para></description></parameter><purpose>Construct with user defined seed value. </purpose><description><para>
</para></description></constructor><constructor specifiers="explicit"><template>
          <template-type-parameter name="SeedSeq"><purpose><para>SeedSequence type. </para></purpose></template-type-parameter>
        </template><parameter name="seq"><paramtype>SeedSeq &amp;</paramtype><description><para>Seed sequence. </para></description></parameter><purpose>Construct with seed sequence. </purpose><description><para>

</para></description></constructor><constructor><template>
          <template-type-parameter name="It"><purpose><para>Input iterator type. </para></purpose></template-type-parameter>
        </template><parameter name="first"><paramtype>It</paramtype><description><para>Iterator pointing to the first seed value. </para></description></parameter><parameter name="last"><paramtype>It</paramtype><description><para>Iterator pointing past-the-end of seed value sequence. </para></description></parameter><purpose>Construct from seed values. </purpose><description><para>

</para></description></constructor><constructor><parameter name="e"><paramtype>const <classname>engine</classname> &amp;</paramtype><description><para>Instance to copy from. </para></description></parameter><purpose>Copy construct. </purpose><description><para>Internally copies random stream. 
</para></description></constructor><destructor><purpose>Destruct. </purpose></destructor><copy-assignment><parameter name="rhs"><paramtype><classname>engine</classname></paramtype><description><para>Instance to copy from. </para></description></parameter><purpose>Assignment operator. </purpose><description><para>Internally copies random stream. 

</para></description><returns><para>Reference to this instance. </para></returns></copy-assignment><method-group name="friend functions"><method name="operator==" cv=""><type>friend bool</type><parameter name="a"><paramtype><classname>engine</classname></paramtype><description><para>Left hand side instance. </para></description></parameter><parameter name="b"><paramtype><classname>engine</classname></paramtype><description><para>Right hand side instance. </para></description></parameter><purpose>Equality operator. </purpose><description><para>Checks whether internal streams are in the same state. <note><para>Due to unitialized memory in the MKL this method will not rely on comparing MKL stream memory but rather compares the output of both engines for a fixed number of variates and thus is relatively slow. </para></note>


</para></description><returns><para>Returns true if a and b are in the same state. </para></returns></method><method name="operator!=" cv=""><type>friend bool</type><parameter name="a"><paramtype>const <classname>engine</classname> &amp;</paramtype><description><para>Left hand side instance. </para></description></parameter><parameter name="b"><paramtype>const <classname>engine</classname> &amp;</paramtype><description><para>Right hand side instance. </para></description></parameter><purpose>Inequality operator. </purpose><description><para>Checks whether internal streams are not in the same state. <note><para>Due to unitialized memory in the MKL this method will not rely on comparing MKL stream memory but rather compares the output of both engines for a fixed number of variates and thus is relatively slow. </para></note>


</para></description><returns><para>Returns true if a and b are not in the same state. </para></returns></method><method name="operator&lt;&lt;" cv=""><type>friend std::basic_ostream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="os"><paramtype>std::basic_ostream&lt; CharT, Traits &gt; &amp;</paramtype><description><para>Output stream instance. </para></description></parameter><parameter name="e"><paramtype>const <classname>engine</classname> &amp;</paramtype><description><para>Instance of engine. </para></description></parameter><purpose>Writes state to output stream. </purpose><description><para>

</para></description><returns><para>Reference to output stream. </para></returns></method><method name="operator&gt;&gt;" cv=""><type>friend std::basic_istream&lt; CharT, Traits &gt; &amp;</type><template>
          <template-type-parameter name="CharT"/>
          <template-type-parameter name="Traits"/>
        </template><parameter name="is"><paramtype>std::basic_istream&lt; CharT, Traits &gt; &amp;</paramtype><description><para>Input stream instance. </para></description></parameter><parameter name="e"><paramtype><classname>engine</classname> &amp;</paramtype><description><para>Instance of engine. </para></description></parameter><purpose>Reads state from input stream. </purpose><description><para>

</para></description><returns><para>Reference to input stream. </para></returns></method></method-group></class><struct name="has_block_split"><template>
      <template-type-parameter name="Engine"><purpose><para>MKL engine. </para></purpose></template-type-parameter>
    </template><purpose>Traits class to inquire whether engine can be used with block-splitting. </purpose><description><para>
</para></description></struct><struct name="has_leap_frog"><template>
      <template-type-parameter name="Engine"><purpose><para>MKL engine. </para></purpose></template-type-parameter>
    </template><purpose>Traits class to inquire whether engine can be used with leap-frogging. </purpose><description><para>
</para></description></struct><typedef name="mcg31"><description><para>A 31-bit multiplicative congruential generator. </para></description><type><classname>engine</classname>&lt; VSL_BRNG_MCG31 &gt;</type></typedef><typedef name="r250"><description><para>A generalized feedback shift register generator. </para></description><type><classname>engine</classname>&lt; VSL_BRNG_R250 &gt;</type></typedef><typedef name="mrg32k3a"><description><para>A combined multiple recursive generator with two components of order 3. </para></description><type><classname>engine</classname>&lt; VSL_BRNG_MRG32K3A &gt;</type></typedef><typedef name="mcg59"><description><para>A 59-bit multiplicative congruential generator. </para></description><type><classname>engine</classname>&lt; VSL_BRNG_MCG59 &gt;</type></typedef><typedef name="wh"><description><para>A set of 273 Wichmann-Hill combined multiplicative congruential generators. </para></description><type><classname>engine</classname>&lt; VSL_BRNG_WH &gt;</type></typedef><typedef name="mt19937"><description><para>A Mersenne Twister pseudorandom number generator. </para></description><type><classname>engine</classname>&lt; VSL_BRNG_MT19937 &gt;</type></typedef><typedef name="mt2203"><description><para>A set of 6024 Mersenne Twister pseudorandom number generators. </para></description><type><classname>engine</classname>&lt; VSL_BRNG_MT2203 &gt;</type></typedef><typedef name="sfmt19937"><description><para>A SIMD-oriented Fast Mersenne Twister pseudorandom number generator. </para></description><type><classname>engine</classname>&lt; VSL_BRNG_SFMT19937 &gt;</type></typedef><typedef name="sobol"><description><para>A 32-bit Gray code-based generator producing low-discrepancy sequences for dimensions 1 ≤ s ≤ 40; user-defined dimensions are also available. </para></description><type><classname>engine</classname>&lt; VSL_BRNG_SOBOL &gt;</type></typedef><typedef name="niederr"><description><para>A 32-bit Gray code-based generator producing low-discrepancy sequences for dimensions 1 ≤ s ≤ 318; user-defined dimensions are also available. </para></description><type><classname>engine</classname>&lt; VSL_BRNG_NIEDERR &gt;</type></typedef><function name="make_independent_engines_by_block_split"><type>void</type><template>
          <template-type-parameter name="Engine"><purpose><para>MKL engine. </para></purpose></template-type-parameter>
          <template-type-parameter name="Iterator"><purpose><para>Iterator class. </para></purpose></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype><description><para>Points to the first engine. </para></description></parameter><parameter name="end"><paramtype>Iterator</paramtype><description><para>Points past-the-end of the last engine. </para></description></parameter><parameter name="size"><paramtype>std::size_t</paramtype><description><para>Maximum number of variates needed from a single engine. </para></description></parameter><purpose>Makes engines independent by block-splitting. </purpose><description><para>


</para></description><returns><para>Independent engines (by block-splitting). </para></returns></function><function name="make_independent_engines_by_leap_frog"><type>void</type><template>
          <template-type-parameter name="Engine"><purpose><para>MKL engine. </para></purpose></template-type-parameter>
          <template-type-parameter name="Iterator"><purpose><para>Iterator class. </para></purpose></template-type-parameter>
        </template><parameter name="begin"><paramtype>Iterator</paramtype><description><para>Points to the first engine. </para></description></parameter><parameter name="end"><paramtype>Iterator</paramtype><description><para>Points past-the-end of the last engine. </para></description></parameter><purpose>Makes engines independent by leap-frogging. </purpose><description><para>


</para></description><returns><para>Independent engines (by leap-frogging). </para></returns></function></namespace></namespace></namespace></header><header name="boost/random/acml/variate_generator_specialization.hpp"><para>This file contains macros used for specializing the template class variate_generator with ACML engines. </para><namespace name="boost"><namespace name="random"><struct name="is_variate_generator_a_acml_range_generator"><template>
      <template-type-parameter name="Engine"/>
      <template-type-parameter name="Distribution"/>
    </template></struct></namespace></namespace></header><header name="boost/random/mkl/variate_generator_specialization.hpp"><para>This file contains macros used for specializing the template class variate_generator with MKL engines. </para><namespace name="boost"><namespace name="random"><struct name="is_variate_generator_a_mkl_range_generator"><template>
      <template-type-parameter name="Engine"/>
      <template-type-parameter name="Distribution"/>
    </template></struct></namespace></namespace></header></library-reference>
