[article call_visitors
    [quickbook 1.5]
    [copyright 2012 Cromwell Enage]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[def __Binary_Function__ [@http://www.sgi.com/tech/stl/BinaryFunction.html [*Binary Function]]]
[def __Boost_Fusion__ [@boost:libs/fusion/doc/html/ Boost.Fusion]]
[def __BGL__ [@boost:libs/graph/doc/index.html BGL]]
[def __Fusion_Forward_Sequence__ [@boost:libs/fusion/doc/html/fusion/sequence/concepts/forward_sequence.html [*Fusion Forward Sequence]]]
[def __half_runtime_pair__ [@boost:libs/fusion/doc/html/fusion/support/pair.html half-runtime pair]]
[def __Event_Visitor_List__ [@boost:/libs/graph/doc/EventVisitorList.html [*Event Visitor List]]]
[def __boost_graph_call_visitors_hpp__ [@../../../boost/graph/call_visitors.hpp boost/graph/call_visitors.hpp]]
[def __find_eulerian_trail__ [@find_eulerian_trail.html `find_eulerian_trail()`]]

[import ../../../../../boost/graph/call_visitors.hpp]

[section Synopsis]
[reference__call_visitors]
[endsect]

[section Description]
This function will invoke the function call operator of each element in the
specified visitor list whose event filter type matches the one specified.

This function enables __BGL__ algorithms such as __find_eulerian_trail__ to
decouple visitor event points from algorithm-specific class definitions while
offering user code the ability to take advantage of a simpler programming
interface via __Boost_Fusion__ containers.  It still supports the
__Event_Visitor_List__ interface as an alternative.
[endsect]

[section:definition Where defined]
``
#include <__boost_graph_call_visitors_hpp__>
``
[endsect]

[section Type Requirements]

  * `Filter` must be explicitly passed in as a template parameter.
  * `VisitorList` must model either the __Fusion_Forward_Sequence__ concept or
    the __Event_Visitor_List__ concept.
  * If `VisitorList` models the __Fusion_Forward_Sequence__ concept, then the
    second type of each __half_runtime_pair__ in `VisitorList` whose first type
    matches `Filter` must model the __Binary_Function__ concept.  Furthermore,
    the function call operator of the second type must accept `T` as a valid
    first argument type and a reference to `InputGraph` as a valid second
    argument type.

[endsect]

[section Parameters]
[table
    [[Parameter][Description][Runtime requirements]]
    [
        [`visitors`]
        [The visitor list to be filtered for event point invocation.]
        []
    ]
    [
        [`t`]
        [
            The object to be passed in as the first argument to the function
            call of each visitor whose event filter type matches `Filter`.
        ]
        [The input graph must also contain the specified object.]
    ]
    [
        [`input_graph`]
        [
            The object to be passed in as the second argument to the function
            call of each visitor whose event filter type matches `Filter`.
        ]
        []
    ]
]
[endsect]

