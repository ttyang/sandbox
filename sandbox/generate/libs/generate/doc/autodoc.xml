<?xml version="1.0" standalone="yes"?>
<library-reference id="boost_generate_header_reference"><title>Boost.Generate Header Reference</title><header name="boost/generate/generate.hpp"><para>This file contains the generate function and helper classes for making your generator a Range Generator. </para><namespace name="boost"><struct name="is_range_generator"><template>
      <template-type-parameter name="Generator"><purpose><para>A Generator type (function object) </para></purpose></template-type-parameter>
      <template-type-parameter name="Iterator"><purpose><para>An Iterator type </para></purpose></template-type-parameter>
    </template><purpose>Traits class for checking whether a Generator is a Range Generator. </purpose><description><para>The default behaviour for this traits class is to check whether the Generator class exposes a publicly accessible type named <classname alt="boost::is_range_generator">is_range_generator</classname>. If such a nested type exists, it is assumed to model a metafunction class and it's apply metafunction will be invoked with the Iterator type: <programlisting> Generator::is_range_generator::apply&lt;Iterator&gt; 
</programlisting> and the return type will be forwarded to the traits class. Otherwise the Generator type will be inspected (experimental feature). If it has defined a range function call and the Iterator type models the concept of a Unit Stride Iterator, it is assumed that the Generator is indeed a Range Generator. If none of the above are true, the Generator is not a Range Generator.</para><para>
</para></description></struct><namespace name="range_generate"><struct name="unit_stride_range_generator"><purpose>Template metafunction class for a Range Generator. </purpose><description><para>This class can be used to make a generator match the requirements of the Range Generator Concept. In your generator declare: <programlisting> typedef <classname alt="boost::range_generate::unit_stride_range_generator">boost::range_generate::unit_stride_range_generator</classname> is_range_generator; 
</programlisting></para><para>The generator will then be a range generator for Iterators that satisfy the Unit Stride Iterator Concept. </para></description><struct name="apply"><template>
      <template-type-parameter name="Iterator"><purpose><para>An Iterator type </para></purpose></template-type-parameter>
    </template><purpose>Metafunction. </purpose><description><para>Inherits from bool true constant type (e.g. boost::mpl::true_) if Iterator is a Unit Stride Iterator. Otherwise inherits from bool false constant type (e.g. boost::mpl::false_).</para><para>
</para></description></struct></struct><struct name="unit_stride_range_generator_type_checked"><template>
      <template-type-parameter name="ResultType"><purpose><para>Generator's result type. </para></purpose></template-type-parameter>
    </template><purpose>Template metafunction class for a Range Generator. </purpose><description><para>This class can be used to make a generator match the requirements of the Range Generator Concept. In your generator declare: <programlisting> typedef <classname alt="boost::range_generate::unit_stride_range_generator_type_checked">boost::range_generate::unit_stride_range_generator_type_checked&lt;YourResultType&gt;</classname> is_range_generator; 
</programlisting></para><para>The generator will then be a range generator for Iterators that satisfy the Unit Stride Iterator Concept and additionally have value type YourResultType.</para><para>
</para></description><struct name="apply"><template>
      <template-type-parameter name="Iterator"><purpose><para>An Iterator type </para></purpose></template-type-parameter>
    </template><purpose>Metafunction. </purpose><description><para>Inherits from bool true constant type (e.g. boost::mpl::true_) if Iterator is a Unit Stride Iterator and ResultType is equal to Iterators value_type. Otherwise inherits from bool false constant type (e.g. boost::mpl::false_).</para><para>
</para></description></struct></struct><struct name="constant_stride_range_generator"><purpose>Template metafunction class for a Range Generator. </purpose><description><para>This class can be used to make a generator match the requirements of the Range Generator Concept. In your generator declare: <programlisting> typedef <classname alt="boost::range_generate::constant_stride_range_generator">boost::range_generate::constant_stride_range_generator</classname> is_range_generator; 
</programlisting></para><para>The generator will then be a range generator for Iterators that satisfy the Constant Stride Iterator Concept. </para></description><struct name="apply"><template>
      <template-type-parameter name="Iterator"><purpose><para>An Iterator type </para></purpose></template-type-parameter>
    </template><purpose>Metafunction. </purpose><description><para>Inherits from bool true constant type (e.g. boost::mpl::true_) if Iterator is a Constant Stride Iterator. Otherwise inherits from bool false constant type (e.g. boost::mpl::false_).</para><para>
</para></description></struct></struct><struct name="constant_stride_range_generator_type_checked"><template>
      <template-type-parameter name="ResultType"><purpose><para>Generator's result type. </para></purpose></template-type-parameter>
    </template><purpose>Template metafunction class for a Range Generator. </purpose><description><para>This class can be used to make a generator match the requirements of the Range Generator Concept. In your generator declare: <programlisting> typedef <classname alt="boost::range_generate::constant_stride_range_generator_type_checked">boost::range_generate::constant_stride_range_generator_type_checked&lt;YourResultType&gt;</classname> is_range_generator; 
</programlisting></para><para>The generator will then be a range generator for Iterators that satisfy the Constant Stride Iterator Concept and additionally have value type YourResultType.</para><para>
</para></description><struct name="apply"><template>
      <template-type-parameter name="Iterator"><purpose><para>An Iterator type </para></purpose></template-type-parameter>
    </template><purpose>Metafunction. </purpose><description><para>Inherits from bool true constant type (e.g. boost::mpl::true_) if Iterator is a Constant Stride Iterator and ResultType is equal to Iterators value_type. Otherwise inherits from bool false constant type (e.g. boost::mpl::false_).</para><para>
</para></description></struct></struct></namespace><function name="generate"><type>void</type><template>
          <template-type-parameter name="Iterator"><purpose><para>An Iterator type </para></purpose></template-type-parameter>
          <template-type-parameter name="Generator"><purpose><para>A Generator type (function object) </para></purpose></template-type-parameter>
        </template><parameter name="first"><paramtype>Iterator</paramtype><description><para>Beginning of the range to be generated </para></description></parameter><parameter name="last"><paramtype>Iterator</paramtype><description><para>End of the range to be generated </para></description></parameter><parameter name="generator"><paramtype>Generator</paramtype><description><para>An instance of a <computeroutput>Generator</computeroutput> type </para></description></parameter><purpose>Generates values for a range. </purpose><description><para>This function dispatches to a range generate version iff the <computeroutput>Generator</computeroutput> used is a Range Generator for the <computeroutput>Iterator</computeroutput> employed. Otherwise the std::generate version is used.</para><para>

</para></description></function></namespace></header><header name="boost/generate/is_stride_iterator.hpp"><para>This file contains traits classes for Constant / Unit Stride Iterators. </para><namespace name="boost"><struct name="is_constant_stride_iterator"><template>
      <template-type-parameter name="Iterator"><purpose><para>An Iterator type </para></purpose></template-type-parameter>
      <template-type-parameter name="Enable"><default>void</default><purpose><para>Auxillary type for SFINAE specializations </para></purpose></template-type-parameter>
    </template><purpose>Traits class for Constant Stride Iterators. </purpose><description><para>Is the type <computeroutput>Iterator</computeroutput> a Constant Stride Iterator?</para><para>
</para></description></struct><struct name="stride"><template>
      <template-type-parameter name="Iterator"><purpose><para>An Iterator type </para></purpose></template-type-parameter>
      <template-type-parameter name="Enable"><default>void</default><purpose><para>Auxillary type for SFINAE specializations </para></purpose></template-type-parameter>
    </template><purpose>Traits class for the stride of a Constant Stride Iterator. </purpose><description><para>
</para></description></struct><struct name="is_unit_stride_iterator"><template>
      <template-type-parameter name="Iterator"><purpose><para>An Iterator type </para></purpose></template-type-parameter>
    </template><purpose>Traits class for Unit Stride Iterators. </purpose><description><para>Is the type <computeroutput>Iterator</computeroutput> a Unit Stride Iterator?</para><para>
</para></description></struct></namespace><macro name="BOOST_IS_CONSTANT_STRIDE_ITERATOR" kind="functionlike"><macro-parameter name="iterator"/><macro-parameter name="n"/><purpose>Register iterator type as Constant Stride Iterator with stride n. </purpose></macro><macro name="BOOST_IS_UNIT_STRIDE_ITERATOR" kind="functionlike"><macro-parameter name="iterator"/><purpose>Register iterator type as Unit Stride Iterator. </purpose></macro></header></library-reference>
