#line 29 BOOST_PP_STRINGIZE ( BOOST_GENERIC_DETAIL_NARY_CAT ( BOOST_GENERIC_PREPROCESSED_, ROOT, eric/std_ , BOOST_GENERIC_PREPROCESSED_HEADER_NAME, pp ) )
namespace boost_generic_detail_scope_checker { static_assert ( ::boost_generic_detail_scope_checker::boost_generic_detail_is_same_fun < boost_generic_detail_global_scope_check , ::boost_generic_detail_scope_checker ::boost_generic_detail_global_scope_check >::value , "The BOOST_GENERIC_AUTO_CONCEPT macro must be invoked at global scope. " "To make an auto concept inside a namespace, use a namespace parameter." ); } namespace boost { namespace generic { namespace std_concept { template< typename C > class MemberContainer; namespace boost_generic_concept_impl_detail { struct boost_generic_detail_concept_implMemberContainer { struct boost_generic_detail_tag { static bool const is_auto_concept = 1 == 1; }; template< typename C > struct boost_generic_detail_params; template< class BoostGenericDetailConceptAndParams > struct boost_generic_detail_params_from_concept; template< typename C > struct boost_generic_detail_params_from_concept < MemberContainer < C > > { typedef boost_generic_detail_params < C > type; }; template< class, class, class > struct boost_generic_detail_requires_are_valid_0 : ::boost::mpl::true_ {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailEnabler = void > struct boost_generic_detail_providedvalue_type { typedef ::boost::generic::detail::dummy_type_< 2 > type; }; template< class BoostGenericDetailConceptMap > struct boost_generic_detail_providedvalue_type < BoostGenericDetailConceptMap , typename ::boost::generic::detail::always_void < typename BoostGenericDetailConceptMap:: value_type >::type > { typedef typename BoostGenericDetailConceptMap:: value_type type; }; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_typename_defaultvalue_type { typedef ::boost::generic::detail::dummy_type_< 2 > type; }; template< typename C , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_typename_defaultvalue_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < typename C::value_type >::type > { typedef typename C::value_type type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailProvidedName = typename boost_generic_detail_providedvalue_type < BoostGenericDetailConceptMap >::type > struct boost_generic_detail_first_passvalue_type : ::boost::mpl::if_c < ::boost::mpl::and_ < ::boost::generic::detail::is_dummy_type < BoostGenericDetailProvidedName > , boost_generic_detail_requires_are_valid_0 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > >::value , boost_generic_detail_typename_defaultvalue_type < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< BoostGenericDetailProvidedName > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_1 : ::std::integral_constant< bool, false > {}; template< typename C , class value_type , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_1 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < ObjectType < value_type > >::type > : ::boost::generic::detail::concept_is_valid < ObjectType < value_type > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_1 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_0 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_1 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailEnabler = void > struct boost_generic_detail_providedreference { typedef ::boost::generic::detail::dummy_type_< 3 > type; }; template< class BoostGenericDetailConceptMap > struct boost_generic_detail_providedreference < BoostGenericDetailConceptMap , typename ::boost::generic::detail::always_void < typename BoostGenericDetailConceptMap:: reference >::type > { typedef typename BoostGenericDetailConceptMap:: reference type; }; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_typename_defaultreference { typedef ::boost::generic::detail::dummy_type_< 3 > type; }; template< typename C , class value_type , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_typename_defaultreference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < typename C::reference >::type > { typedef typename C::reference type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailProvidedName = typename boost_generic_detail_providedreference < BoostGenericDetailConceptMap >::type > struct boost_generic_detail_first_passreference : ::boost::mpl::if_c < ::boost::mpl::and_ < ::boost::generic::detail::is_dummy_type < BoostGenericDetailProvidedName > , boost_generic_detail_requires_are_valid_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > >::value , boost_generic_detail_typename_defaultreference < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< BoostGenericDetailProvidedName > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailEnabler = void > struct boost_generic_detail_providedconst_reference { typedef ::boost::generic::detail::dummy_type_< 4 > type; }; template< class BoostGenericDetailConceptMap > struct boost_generic_detail_providedconst_reference < BoostGenericDetailConceptMap , typename ::boost::generic::detail::always_void < typename BoostGenericDetailConceptMap:: const_reference >::type > { typedef typename BoostGenericDetailConceptMap:: const_reference type; }; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_typename_defaultconst_reference { typedef ::boost::generic::detail::dummy_type_< 4 > type; }; template< typename C , class value_type , class reference , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_typename_defaultconst_reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < typename C::const_reference >::type > { typedef typename C::const_reference type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailProvidedName = typename boost_generic_detail_providedconst_reference < BoostGenericDetailConceptMap >::type > struct boost_generic_detail_first_passconst_reference : ::boost::mpl::if_c < ::boost::mpl::and_ < ::boost::generic::detail::is_dummy_type < BoostGenericDetailProvidedName > , boost_generic_detail_requires_are_valid_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > >::value , boost_generic_detail_typename_defaultconst_reference < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< BoostGenericDetailProvidedName > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailEnabler = void > struct boost_generic_detail_providedsize_type { typedef ::boost::generic::detail::dummy_type_< 5 > type; }; template< class BoostGenericDetailConceptMap > struct boost_generic_detail_providedsize_type < BoostGenericDetailConceptMap , typename ::boost::generic::detail::always_void < typename BoostGenericDetailConceptMap:: size_type >::type > { typedef typename BoostGenericDetailConceptMap:: size_type type; }; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_typename_defaultsize_type { typedef ::boost::generic::detail::dummy_type_< 5 > type; }; template< typename C , class value_type , class reference , class const_reference , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_typename_defaultsize_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < typename C::size_type >::type > { typedef typename C::size_type type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailProvidedName = typename boost_generic_detail_providedsize_type < BoostGenericDetailConceptMap >::type > struct boost_generic_detail_first_passsize_type : ::boost::mpl::if_c < ::boost::mpl::and_ < ::boost::generic::detail::is_dummy_type < BoostGenericDetailProvidedName > , boost_generic_detail_requires_are_valid_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > >::value , boost_generic_detail_typename_defaultsize_type < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< BoostGenericDetailProvidedName > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_2 : ::std::integral_constant< bool, false > {}; template< typename C , class value_type , class reference , class const_reference , class size_type , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_2 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < UnsignedIntegralLike < size_type > >::type > : ::boost::generic::detail::concept_is_valid < UnsignedIntegralLike < size_type > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_2 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_2 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailEnabler = void > struct boost_generic_detail_providediterator { typedef ::boost::generic::detail::dummy_type_< 6 > type; }; template< class BoostGenericDetailConceptMap > struct boost_generic_detail_providediterator < BoostGenericDetailConceptMap , typename ::boost::generic::detail::always_void < typename BoostGenericDetailConceptMap:: iterator >::type > { typedef typename BoostGenericDetailConceptMap:: iterator type; }; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_typename_defaultiterator { typedef ::boost::generic::detail::dummy_type_< 6 > type; }; template< typename C , class value_type , class reference , class const_reference , class size_type , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_typename_defaultiterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < typename C::iterator >::type > { typedef typename C::iterator type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailProvidedName = typename boost_generic_detail_providediterator < BoostGenericDetailConceptMap >::type > struct boost_generic_detail_first_passiterator : ::boost::mpl::if_c < ::boost::mpl::and_ < ::boost::generic::detail::is_dummy_type < BoostGenericDetailProvidedName > , boost_generic_detail_requires_are_valid_2 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > >::value , boost_generic_detail_typename_defaultiterator < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< BoostGenericDetailProvidedName > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_3 : ::std::integral_constant< bool, false > {}; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_3 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < ForwardIterator < iterator > >::type > : ::boost::generic::detail::concept_is_valid < ForwardIterator < iterator > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_3 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_2 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_3 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailEnabler = void > struct boost_generic_detail_providedconst_iterator { typedef ::boost::generic::detail::dummy_type_< 7 > type; }; template< class BoostGenericDetailConceptMap > struct boost_generic_detail_providedconst_iterator < BoostGenericDetailConceptMap , typename ::boost::generic::detail::always_void < typename BoostGenericDetailConceptMap:: const_iterator >::type > { typedef typename BoostGenericDetailConceptMap:: const_iterator type; }; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_typename_defaultconst_iterator { typedef ::boost::generic::detail::dummy_type_< 7 > type; }; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_typename_defaultconst_iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < typename C::const_iterator >::type > { typedef typename C::const_iterator type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailProvidedName = typename boost_generic_detail_providedconst_iterator < BoostGenericDetailConceptMap >::type > struct boost_generic_detail_first_passconst_iterator : ::boost::mpl::if_c < ::boost::mpl::and_ < ::boost::generic::detail::is_dummy_type < BoostGenericDetailProvidedName > , boost_generic_detail_requires_are_valid_3 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > >::value , boost_generic_detail_typename_defaultconst_iterator < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< BoostGenericDetailProvidedName > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_4 : ::std::integral_constant< bool, false > {}; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_4 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < ForwardIterator < const_iterator > >::type > : ::boost::generic::detail::concept_is_valid < ForwardIterator < const_iterator > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_4 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_3 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_4 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_5 : ::std::integral_constant< bool, false > {}; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_5 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < Convertible<reference, const_reference> >::type > : ::boost::generic::detail::concept_is_valid < Convertible<reference, const_reference> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_5 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_4 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_5 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_6 : ::std::integral_constant< bool, false > {}; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_6 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < Convertible<reference, const value_type&> >::type > : ::boost::generic::detail::concept_is_valid < Convertible<reference, const value_type&> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_6 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_5 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_6 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_7 : ::std::integral_constant< bool, false > {}; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_7 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < Convertible<const_reference, const value_type&> >::type > : ::boost::generic::detail::concept_is_valid < Convertible<const_reference, const value_type&> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_7 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_6 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_7 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_8 : ::std::integral_constant< bool, false > {}; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_8 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < Convertible<iterator, const_iterator> >::type > : ::boost::generic::detail::concept_is_valid < Convertible<iterator, const_iterator> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_8 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_7 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_8 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_9 : ::std::integral_constant< bool, false > {}; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_9 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < SameType<typename ForwardIterator<iterator>::value_type, value_type> >::type > : ::boost::generic::detail::concept_is_valid < SameType<typename ForwardIterator<iterator>::value_type, value_type> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_9 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_8 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_9 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_10 : ::std::integral_constant< bool, false > {}; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_10 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < SameType<typename ForwardIterator<const_iterator>::value_type, value_type> >::type > : ::boost::generic::detail::concept_is_valid < SameType<typename ForwardIterator<const_iterator>::value_type, value_type> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_10 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_9 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_10 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_11 : ::std::integral_constant< bool, false > {}; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_11 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < Convertible<typename ForwardIterator<iterator>::reference, reference> >::type > : ::boost::generic::detail::concept_is_valid < Convertible<typename ForwardIterator<iterator>::reference, reference> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_11 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_10 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_11 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_12 : ::std::integral_constant< bool, false > {}; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_12 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < Convertible<typename ForwardIterator<const_iterator>::reference, const_reference> >::type > : ::boost::generic::detail::concept_is_valid < Convertible<typename ForwardIterator<const_iterator>::reference, const_reference> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_12 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_11 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_12 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_13 : ::std::integral_constant< bool, false > {}; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_13 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < SameType<typename ForwardIterator<iterator>::difference_type, typename ForwardIterator<const_iterator>::difference_type> >::type > : ::boost::generic::detail::concept_is_valid < SameType<typename ForwardIterator<iterator>::difference_type, typename ForwardIterator<const_iterator>::difference_type> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_13 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_12 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_13 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_14 : ::std::integral_constant< bool, false > {}; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_14 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < IntegralType<size_type> >::type > : ::boost::generic::detail::concept_is_valid < IntegralType<size_type> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_14 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_13 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_14 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_15 : ::std::integral_constant< bool, false > {}; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_15 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < Convertible<typename ForwardIterator<iterator>::difference_type, size_type> >::type > : ::boost::generic::detail::concept_is_valid < Convertible<typename ForwardIterator<iterator>::difference_type, size_type> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_15 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_14 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_15 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , typename C > struct boost_generic_detail_first_pass { typedef typename boost_generic_detail_first_passvalue_type < BoostGenericDetailConceptMap , boost_generic_detail_params < C > , ::boost::generic::detail::type_list < void****** > >::type value_type ; typedef typename boost_generic_detail_first_passreference < BoostGenericDetailConceptMap , boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , void****** > >::type reference ; typedef typename boost_generic_detail_first_passconst_reference < BoostGenericDetailConceptMap , boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , void****** > >::type const_reference ; typedef typename boost_generic_detail_first_passsize_type < BoostGenericDetailConceptMap , boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , void****** > >::type size_type ; typedef typename boost_generic_detail_first_passiterator < BoostGenericDetailConceptMap , boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , void****** > >::type iterator ; typedef typename boost_generic_detail_first_passconst_iterator < BoostGenericDetailConceptMap , boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , void****** > >::type const_iterator ; }; template< class, class, class > struct boost_generic_detail_deduce_0value_type { typedef ::boost::generic::detail::no_deduction type; }; template< class, class, class > struct boost_generic_detail_deduce_0reference { typedef ::boost::generic::detail::no_deduction type; }; template< class, class, class > struct boost_generic_detail_deduce_0const_reference { typedef ::boost::generic::detail::no_deduction type; }; template< class, class, class > struct boost_generic_detail_deduce_0size_type { typedef ::boost::generic::detail::no_deduction type; }; template< class, class, class > struct boost_generic_detail_deduce_0iterator { typedef ::boost::generic::detail::no_deduction type; }; template< class, class, class > struct boost_generic_detail_deduce_0const_iterator { typedef ::boost::generic::detail::no_deduction type; }; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_1 { typedef ::boost::generic::detail::dummy_type type; }; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_1 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( ::std::declval< C >() . empty ( ) ) ) >::type > { typedef decltype ( ::std::declval< C >() . empty ( ) ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_1 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_1 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_1value_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_1value_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class value_type > static ::boost::generic::detail::type_< value_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < bool > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_1value_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_1value_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_1value_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_1value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_1value_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_0value_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_1value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_1reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_1reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class reference > static ::boost::generic::detail::type_< reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < bool > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_1reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_1reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_1reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_1reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_1reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_0reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_1reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_1const_reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_1const_reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_reference > static ::boost::generic::detail::type_< const_reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < bool > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_1const_reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_1const_reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_1const_reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_1const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_1const_reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_0const_reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_1const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_1size_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_1size_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class size_type > static ::boost::generic::detail::type_< size_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < bool > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_1size_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_1size_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_1size_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_1size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_1size_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_0size_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_1size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_1iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_1iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class iterator > static ::boost::generic::detail::type_< iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < bool > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_1iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_1iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_1iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_1iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_1iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_0iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_1iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_1const_iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_1const_iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_iterator > static ::boost::generic::detail::type_< const_iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < bool > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_1const_iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_1const_iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_1const_iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_1const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_1const_iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_0const_iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_1const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_2 { typedef ::boost::generic::detail::dummy_type type; }; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_2 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( ::std::declval< C >() . size ( ) ) ) >::type > { typedef decltype ( ::std::declval< C >() . size ( ) ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_2 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_2 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_2value_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_2value_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class value_type > static ::boost::generic::detail::type_< value_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < size_type > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_2value_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_2value_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_2 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_2value_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_2value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_2value_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_1value_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_2value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_2reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_2reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class reference > static ::boost::generic::detail::type_< reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < size_type > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_2reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_2reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_2 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_2reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_2reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_2reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_1reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_2reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_2const_reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_2const_reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_reference > static ::boost::generic::detail::type_< const_reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < size_type > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_2const_reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_2const_reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_2 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_2const_reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_2const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_2const_reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_1const_reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_2const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_2size_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_2size_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class size_type > static ::boost::generic::detail::type_< size_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < size_type > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_2size_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_2size_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_2 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_2size_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_2size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_2size_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_1size_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_2size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_2iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_2iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class iterator > static ::boost::generic::detail::type_< iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < size_type > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_2iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_2iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_2 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_2iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_2iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_2iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_1iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_2iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_2const_iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_2const_iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_iterator > static ::boost::generic::detail::type_< const_iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < size_type > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_2const_iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_2const_iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_2 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_2const_iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_2const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_2const_iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_1const_iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_2const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_3 { typedef ::boost::generic::detail::dummy_type type; }; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_3 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( ::std::declval< C >() . begin ( ) ) ) >::type > { typedef decltype ( ::std::declval< C >() . begin ( ) ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_3 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_3 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_3value_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_3value_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class value_type > static ::boost::generic::detail::type_< value_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_3value_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_3value_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_3 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_3value_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_3value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_3value_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_2value_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_3value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_3reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_3reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class reference > static ::boost::generic::detail::type_< reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_3reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_3reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_3 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_3reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_3reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_3reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_2reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_3reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_3const_reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_3const_reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_reference > static ::boost::generic::detail::type_< const_reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_3const_reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_3const_reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_3 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_3const_reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_3const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_3const_reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_2const_reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_3const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_3size_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_3size_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class size_type > static ::boost::generic::detail::type_< size_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_3size_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_3size_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_3 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_3size_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_3size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_3size_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_2size_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_3size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_3iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_3iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class iterator > static ::boost::generic::detail::type_< iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_3iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_3iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_3 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_3iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_3iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_3iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_2iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_3iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_3const_iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_3const_iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_iterator > static ::boost::generic::detail::type_< const_iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_3const_iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_3const_iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_3 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_3const_iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_3const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_3const_iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_2const_iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_3const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_4 { typedef ::boost::generic::detail::dummy_type type; }; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_4 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( ::std::declval< C >() . begin ( ) ) ) >::type > { typedef decltype ( ::std::declval< C >() . begin ( ) ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_4 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_4 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_4value_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_4value_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class value_type > static ::boost::generic::detail::type_< value_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_4value_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_4value_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_4 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_4value_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_4value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_4value_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_3value_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_4value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_4reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_4reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class reference > static ::boost::generic::detail::type_< reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_4reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_4reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_4 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_4reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_4reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_4reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_3reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_4reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_4const_reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_4const_reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_reference > static ::boost::generic::detail::type_< const_reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_4const_reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_4const_reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_4 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_4const_reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_4const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_4const_reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_3const_reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_4const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_4size_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_4size_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class size_type > static ::boost::generic::detail::type_< size_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_4size_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_4size_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_4 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_4size_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_4size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_4size_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_3size_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_4size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_4iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_4iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class iterator > static ::boost::generic::detail::type_< iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_4iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_4iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_4 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_4iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_4iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_4iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_3iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_4iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_4const_iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_4const_iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_iterator > static ::boost::generic::detail::type_< const_iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_4const_iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_4const_iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_4 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_4const_iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_4const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_4const_iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_3const_iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_4const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_5 { typedef ::boost::generic::detail::dummy_type type; }; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_5 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( ::std::declval< C >() . end ( ) ) ) >::type > { typedef decltype ( ::std::declval< C >() . end ( ) ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_5 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_5 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_5value_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_5value_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class value_type > static ::boost::generic::detail::type_< value_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_5value_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_5value_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_5 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_5value_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_5value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_5value_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_4value_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_5value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_5reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_5reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class reference > static ::boost::generic::detail::type_< reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_5reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_5reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_5 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_5reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_5reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_5reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_4reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_5reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_5const_reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_5const_reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_reference > static ::boost::generic::detail::type_< const_reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_5const_reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_5const_reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_5 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_5const_reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_5const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_5const_reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_4const_reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_5const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_5size_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_5size_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class size_type > static ::boost::generic::detail::type_< size_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_5size_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_5size_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_5 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_5size_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_5size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_5size_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_4size_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_5size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_5iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_5iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class iterator > static ::boost::generic::detail::type_< iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_5iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_5iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_5 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_5iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_5iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_5iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_4iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_5iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_5const_iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_5const_iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_iterator > static ::boost::generic::detail::type_< const_iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_5const_iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_5const_iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_5 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_5const_iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_5const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_5const_iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_4const_iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_5const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_6 { typedef ::boost::generic::detail::dummy_type type; }; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_6 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( ::std::declval< C >() . end ( ) ) ) >::type > { typedef decltype ( ::std::declval< C >() . end ( ) ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_6 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_6 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_6value_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_6value_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class value_type > static ::boost::generic::detail::type_< value_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_6value_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_6value_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_6 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_6value_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_6value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_6value_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_5value_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_6value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_6reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_6reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class reference > static ::boost::generic::detail::type_< reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_6reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_6reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_6 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_6reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_6reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_6reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_5reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_6reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_6const_reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_6const_reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_reference > static ::boost::generic::detail::type_< const_reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_6const_reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_6const_reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_6 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_6const_reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_6const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_6const_reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_5const_reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_6const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_6size_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_6size_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class size_type > static ::boost::generic::detail::type_< size_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_6size_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_6size_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_6 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_6size_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_6size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_6size_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_5size_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_6size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_6iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_6iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class iterator > static ::boost::generic::detail::type_< iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_6iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_6iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_6 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_6iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_6iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_6iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_5iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_6iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_6const_iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_6const_iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_iterator > static ::boost::generic::detail::type_< const_iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_6const_iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_6const_iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_6 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_6const_iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_6const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_6const_iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_5const_iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_6const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_7 { typedef ::boost::generic::detail::dummy_type type; }; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_7 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( ::std::declval< C >() . cbegin ( ) ) ) >::type > { typedef decltype ( ::std::declval< C >() . cbegin ( ) ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_7 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_7 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_7value_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_7value_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class value_type > static ::boost::generic::detail::type_< value_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_7value_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_7value_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_7 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_7value_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_7value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_7value_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_6value_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_7value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_7reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_7reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class reference > static ::boost::generic::detail::type_< reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_7reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_7reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_7 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_7reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_7reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_7reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_6reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_7reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_7const_reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_7const_reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_reference > static ::boost::generic::detail::type_< const_reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_7const_reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_7const_reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_7 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_7const_reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_7const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_7const_reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_6const_reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_7const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_7size_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_7size_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class size_type > static ::boost::generic::detail::type_< size_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_7size_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_7size_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_7 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_7size_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_7size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_7size_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_6size_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_7size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_7iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_7iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class iterator > static ::boost::generic::detail::type_< iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_7iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_7iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_7 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_7iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_7iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_7iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_6iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_7iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_7const_iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_7const_iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_iterator > static ::boost::generic::detail::type_< const_iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_7const_iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_7const_iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_7 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_7const_iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_7const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_7const_iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_6const_iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_7const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_8 { typedef ::boost::generic::detail::dummy_type type; }; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_8 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( ::std::declval< C >() . cend ( ) ) ) >::type > { typedef decltype ( ::std::declval< C >() . cend ( ) ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_8 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_8 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_8value_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_8value_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class value_type > static ::boost::generic::detail::type_< value_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_8value_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_8value_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_8 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_8value_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_8value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_8value_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_7value_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_8value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_8reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_8reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class reference > static ::boost::generic::detail::type_< reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_8reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_8reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_8 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_8reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_8reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_8reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_7reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_8reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_8const_reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_8const_reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_reference > static ::boost::generic::detail::type_< const_reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_8const_reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_8const_reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_8 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_8const_reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_8const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_8const_reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_7const_reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_8const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_8size_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_8size_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class size_type > static ::boost::generic::detail::type_< size_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_8size_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_8size_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_8 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_8size_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_8size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_8size_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_7size_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_8size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_8iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_8iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class iterator > static ::boost::generic::detail::type_< iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_8iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_8iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_8 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_8iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_8iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_8iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_7iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_8iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_8const_iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_8const_iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_iterator > static ::boost::generic::detail::type_< const_iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_8const_iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_8const_iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_8 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_8const_iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_8const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_8const_iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_7const_iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_8const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_9 { typedef ::boost::generic::detail::dummy_type type; }; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_9 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( ::std::declval< C >() . front ( ) ) ) >::type > { typedef decltype ( ::std::declval< C >() . front ( ) ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_9 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_9 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_9value_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_9value_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class value_type > static ::boost::generic::detail::type_< value_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < reference > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_9value_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_9value_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_9 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_9value_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_9value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_9value_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_8value_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_9value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_9reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_9reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class reference > static ::boost::generic::detail::type_< reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < reference > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_9reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_9reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_9 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_9reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_9reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_9reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_8reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_9reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_9const_reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_9const_reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_reference > static ::boost::generic::detail::type_< const_reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < reference > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_9const_reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_9const_reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_9 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_9const_reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_9const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_9const_reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_8const_reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_9const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_9size_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_9size_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class size_type > static ::boost::generic::detail::type_< size_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < reference > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_9size_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_9size_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_9 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_9size_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_9size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_9size_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_8size_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_9size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_9iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_9iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class iterator > static ::boost::generic::detail::type_< iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < reference > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_9iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_9iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_9 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_9iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_9iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_9iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_8iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_9iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_9const_iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_9const_iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_iterator > static ::boost::generic::detail::type_< const_iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < reference > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_9const_iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_9const_iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_9 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_9const_iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_9const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_9const_iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_8const_iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_9const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_10 { typedef ::boost::generic::detail::dummy_type type; }; template< typename C , class value_type , class reference , class const_reference , class size_type , class iterator , class const_iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_10 < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( ::std::declval< C >() . front ( ) ) ) >::type > { typedef decltype ( ::std::declval< C >() . front ( ) ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_10 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_10 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_10value_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_10value_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class value_type > static ::boost::generic::detail::type_< value_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_reference > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_10value_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_10value_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_10 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_10value_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_10value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_10value_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_9value_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_10value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_10reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_10reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class reference > static ::boost::generic::detail::type_< reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_reference > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_10reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_10reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_10 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_10reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_10reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_10reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_9reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_10reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_10const_reference; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_10const_reference < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_reference > static ::boost::generic::detail::type_< const_reference > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_reference > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_10const_reference : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_10const_reference< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_10 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_10const_reference : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_10const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_10const_reference : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_9const_reference< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_10const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_10size_type; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_10size_type < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class size_type > static ::boost::generic::detail::type_< size_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_reference > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_10size_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_10size_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_10 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_10size_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_10size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_10size_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_9size_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_10size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_10iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_10iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class iterator > static ::boost::generic::detail::type_< iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_reference > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_10iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_10iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_10 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_10iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_10iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_10iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_9iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_10iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_10const_iterator; template< typename C , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugreference, class BoostGenericDetailAugconst_reference, class BoostGenericDetailAugsize_type, class BoostGenericDetailAugiterator, class BoostGenericDetailAugconst_iterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_10const_iterator < boost_generic_detail_params < C > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugreference, BoostGenericDetailAugconst_reference, BoostGenericDetailAugsize_type, BoostGenericDetailAugiterator, BoostGenericDetailAugconst_iterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugreference reference; typedef BoostGenericDetailAugconst_reference const_reference; typedef BoostGenericDetailAugsize_type size_type; typedef BoostGenericDetailAugiterator iterator; typedef BoostGenericDetailAugconst_iterator const_iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class const_iterator > static ::boost::generic::detail::type_< const_iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < const_reference > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_10const_iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_10const_iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_10 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_10const_iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_15 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_10const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_10const_iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_9const_iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_10const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deducevalue_type : boost_generic_detail_deduce_10value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deducereference : boost_generic_detail_deduce_10reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduceconst_reference : boost_generic_detail_deduce_10const_reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deducesize_type : boost_generic_detail_deduce_10size_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduceiterator : boost_generic_detail_deduce_10iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduceconst_iterator : boost_generic_detail_deduce_10const_iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > {}; template< class, class > struct boost_generic_detail_is_valid_; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class = void > struct boost_generic_detail_parent_concepts { typedef ::std::false_type boost_generic_detail_parent_sub_succeeded; }; template< class BoostGenericDetailConceptMap , typename C > struct boost_generic_detail_parent_concepts < BoostGenericDetailConceptMap , boost_generic_detail_params < C > , typename ::boost::generic::detail::always_void < >::type > { typedef ::std::true_type boost_generic_detail_parent_sub_succeeded; }; template< class BoostGenericDetailConceptMap , typename C > struct boost_generic_detail_completed_concept_map : boost_generic_detail_parent_concepts < BoostGenericDetailConceptMap , boost_generic_detail_params < C > > { private: typedef boost_generic_detail_first_pass < BoostGenericDetailConceptMap , C > boost_generic_detail_typename_deducers; typedef boost_generic_detail_completed_concept_map MemberContainer; public: typedef typename ::boost::mpl::eval_if_c < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_typename_deducers:: value_type >::value , boost_generic_detail_deducevalue_type < BoostGenericDetailConceptMap , boost_generic_detail_params < C > , ::boost::generic::detail::type_list < typename boost_generic_detail_typename_deducers:: value_type, typename boost_generic_detail_typename_deducers:: reference, typename boost_generic_detail_typename_deducers:: const_reference, typename boost_generic_detail_typename_deducers:: size_type, typename boost_generic_detail_typename_deducers:: iterator, typename boost_generic_detail_typename_deducers:: const_iterator, void********** > > , ::boost::mpl::identity < typename boost_generic_detail_typename_deducers:: value_type > >::type value_type; typedef typename ::boost::mpl::eval_if_c < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_typename_deducers:: reference >::value , boost_generic_detail_deducereference < BoostGenericDetailConceptMap , boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type, typename boost_generic_detail_typename_deducers:: reference, typename boost_generic_detail_typename_deducers:: const_reference, typename boost_generic_detail_typename_deducers:: size_type, typename boost_generic_detail_typename_deducers:: iterator, typename boost_generic_detail_typename_deducers:: const_iterator, void********** > > , ::boost::mpl::identity < typename boost_generic_detail_typename_deducers:: reference > >::type reference; typedef typename ::boost::mpl::eval_if_c < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_typename_deducers:: const_reference >::value , boost_generic_detail_deduceconst_reference < BoostGenericDetailConceptMap , boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference, typename boost_generic_detail_typename_deducers:: const_reference, typename boost_generic_detail_typename_deducers:: size_type, typename boost_generic_detail_typename_deducers:: iterator, typename boost_generic_detail_typename_deducers:: const_iterator, void********** > > , ::boost::mpl::identity < typename boost_generic_detail_typename_deducers:: const_reference > >::type const_reference; typedef typename ::boost::mpl::eval_if_c < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_typename_deducers:: size_type >::value , boost_generic_detail_deducesize_type < BoostGenericDetailConceptMap , boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference, typename boost_generic_detail_typename_deducers:: size_type, typename boost_generic_detail_typename_deducers:: iterator, typename boost_generic_detail_typename_deducers:: const_iterator, void********** > > , ::boost::mpl::identity < typename boost_generic_detail_typename_deducers:: size_type > >::type size_type; typedef typename ::boost::mpl::eval_if_c < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_typename_deducers:: iterator >::value , boost_generic_detail_deduceiterator < BoostGenericDetailConceptMap , boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type, typename boost_generic_detail_typename_deducers:: iterator, typename boost_generic_detail_typename_deducers:: const_iterator, void********** > > , ::boost::mpl::identity < typename boost_generic_detail_typename_deducers:: iterator > >::type iterator; typedef typename ::boost::mpl::eval_if_c < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_typename_deducers:: const_iterator >::value , boost_generic_detail_deduceconst_iterator < BoostGenericDetailConceptMap , boost_generic_detail_params < C > , ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator, typename boost_generic_detail_typename_deducers:: const_iterator, void********** > > , ::boost::mpl::identity < typename boost_generic_detail_typename_deducers:: const_iterator > >::type const_iterator; private: template< class, class > friend struct boost_generic_detail_is_valid_; typedef boost_generic_detail_completed_concept_map boost_generic_detail_completed_concept_map_; typedef boost_generic_detail_params < C > boost_generic_detail_params_; typedef ::boost::generic::detail::type_list < typename boost_generic_detail_completed_concept_map_:: value_type, typename boost_generic_detail_completed_concept_map_:: reference, typename boost_generic_detail_completed_concept_map_:: const_reference, typename boost_generic_detail_completed_concept_map_:: size_type, typename boost_generic_detail_completed_concept_map_:: iterator, typename boost_generic_detail_completed_concept_map_:: const_iterator, void > boost_generic_detail_typenames; public: struct boost_generic_detail_is_valid : ::boost::generic::detail::and_ < typename boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded , boost_generic_detail_requires_are_valid_15< boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames > , ::boost::generic::detail::is_not_deduction_error< value_type > , ::boost::generic::detail::is_not_deduction_error< reference > , ::boost::generic::detail::is_not_deduction_error< const_reference > , ::boost::generic::detail::is_not_deduction_error< size_type > , ::boost::generic::detail::is_not_deduction_error< iterator > , ::boost::generic::detail::is_not_deduction_error< const_iterator > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , bool > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_2 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_2 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , size_type > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_3 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_3 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , iterator > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_4 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_4 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , const_iterator > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_5 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_5 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , iterator > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_6 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_6 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , const_iterator > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_7 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_7 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , const_iterator > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_8 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_8 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , const_iterator > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_9 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_9 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , reference > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_10 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_10 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , const_reference > > {}; }; template< class, class > struct boost_generic_detail_completed_concept_map_from_concept; template< class BoostGenericDetailConceptMap , typename C > struct boost_generic_detail_completed_concept_map_from_concept < BoostGenericDetailConceptMap , MemberContainer < C > > { typedef boost_generic_detail_completed_concept_map < BoostGenericDetailConceptMap , C > type; }; template< typename C , class BoostGenericDetailConceptMap > struct boost_generic_detail_is_valid_ < MemberContainer < C > , BoostGenericDetailConceptMap > : boost_generic_detail_completed_concept_map < BoostGenericDetailConceptMap , C >::boost_generic_detail_is_valid {}; template< class BoostGenericDetailConceptAndParams , class BoostGenericDetailConceptMap = typename ::boost_generic_concept_map_detail::concept_map_ < BoostGenericDetailConceptAndParams > ::boost_generic_concept_map_impl > struct boost_generic_detail_is_valid : boost_generic_detail_is_valid_ < BoostGenericDetailConceptAndParams , BoostGenericDetailConceptMap >::type {}; }; } typedef boost_generic_concept_impl_detail:: boost_generic_detail_concept_implMemberContainer MemberContainerBoostGenericDetailImpl; template< typename C > class MemberContainer : boost_generic_concept_impl_detail:: boost_generic_detail_concept_implMemberContainer:: boost_generic_detail_completed_concept_map < typename ::boost_generic_concept_map_detail::concept_map_ < MemberContainer < C > > ::boost_generic_concept_map_impl , C > { typedef boost_generic_concept_impl_detail:: boost_generic_detail_concept_implMemberContainer boost_generic_detail_concept_impl; typedef typename boost_generic_detail_concept_impl::template boost_generic_detail_completed_concept_map < typename ::boost_generic_concept_map_detail::concept_map_ < MemberContainer < C > > ::boost_generic_concept_map_impl , C > boost_generic_detail_completed_concept_map; typedef boost_generic_detail_concept_impl::boost_generic_detail_params < C > boost_generic_detail_params; struct parent_concept_asserts_substitution_failure { struct instantiate; }; struct parent_concept_asserts { struct instantiate; }; typedef typename ::std::conditional < boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded::value , parent_concept_asserts , parent_concept_asserts_substitution_failure >::type::instantiate parent_concept_asserts_; static_assert( boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded::value , "parameters unable to be substituted into parent concepts " "(guess: doing so may form a reference to void)." ); public: typedef typename boost_generic_detail_completed_concept_map:: value_type value_type; typedef typename boost_generic_detail_completed_concept_map:: reference reference; typedef typename boost_generic_detail_completed_concept_map:: const_reference const_reference; typedef typename boost_generic_detail_completed_concept_map:: size_type size_type; typedef typename boost_generic_detail_completed_concept_map:: iterator iterator; typedef typename boost_generic_detail_completed_concept_map:: const_iterator const_iterator; private: typedef ::boost::generic::detail::type_list < value_type , reference , const_reference , size_type , iterator , const_iterator , void > boost_generic_detail_typenames; static_assert ( ::boost::generic::detail::is_not_same < typename MemberContainer :: value_type , ::boost::generic::detail::no_deduction >::value , "typename '" "value_type" "' was not explicitly satisfied and cannot be deduced." ); static_assert ( ::boost::generic::detail::is_not_same < typename MemberContainer :: value_type , ::boost::generic::detail::ambiguous_deduction >::value , "typename '" "value_type" "' was not explicitly satisfied and deduction results in ambiguity." ); static_assert ( ::boost::mpl::or_ < ::boost::is_same < typename MemberContainer :: value_type , ::boost::generic::detail::no_deduction > , ::boost::is_same < typename MemberContainer :: value_type , ::boost::generic::detail::ambiguous_deduction > , ::boost::generic::detail::concept_is_valid < ObjectType < typename MemberContainer :: value_type > > >::value , "typename '" "value_type" "' does not model '" "ObjectType" "'." ); static_assert ( ::boost::generic::detail::is_not_same < typename MemberContainer :: reference , ::boost::generic::detail::no_deduction >::value , "typename '" "reference" "' was not explicitly satisfied and cannot be deduced." ); static_assert ( ::boost::generic::detail::is_not_same < typename MemberContainer :: reference , ::boost::generic::detail::ambiguous_deduction >::value , "typename '" "reference" "' was not explicitly satisfied and deduction results in ambiguity." ); static_assert ( ::boost::generic::detail::is_not_same < typename MemberContainer :: const_reference , ::boost::generic::detail::no_deduction >::value , "typename '" "const_reference" "' was not explicitly satisfied and cannot be deduced." ); static_assert ( ::boost::generic::detail::is_not_same < typename MemberContainer :: const_reference , ::boost::generic::detail::ambiguous_deduction >::value , "typename '" "const_reference" "' was not explicitly satisfied and deduction results in ambiguity." ); static_assert ( ::boost::generic::detail::is_not_same < typename MemberContainer :: size_type , ::boost::generic::detail::no_deduction >::value , "typename '" "size_type" "' was not explicitly satisfied and cannot be deduced." ); static_assert ( ::boost::generic::detail::is_not_same < typename MemberContainer :: size_type , ::boost::generic::detail::ambiguous_deduction >::value , "typename '" "size_type" "' was not explicitly satisfied and deduction results in ambiguity." ); static_assert ( ::boost::mpl::or_ < ::boost::is_same < typename MemberContainer :: size_type , ::boost::generic::detail::no_deduction > , ::boost::is_same < typename MemberContainer :: size_type , ::boost::generic::detail::ambiguous_deduction > , ::boost::generic::detail::concept_is_valid < UnsignedIntegralLike < typename MemberContainer :: size_type > > >::value , "typename '" "size_type" "' does not model '" "UnsignedIntegralLike" "'." ); static_assert ( ::boost::generic::detail::is_not_same < typename MemberContainer :: iterator , ::boost::generic::detail::no_deduction >::value , "typename '" "iterator" "' was not explicitly satisfied and cannot be deduced." ); static_assert ( ::boost::generic::detail::is_not_same < typename MemberContainer :: iterator , ::boost::generic::detail::ambiguous_deduction >::value , "typename '" "iterator" "' was not explicitly satisfied and deduction results in ambiguity." ); static_assert ( ::boost::mpl::or_ < ::boost::is_same < typename MemberContainer :: iterator , ::boost::generic::detail::no_deduction > , ::boost::is_same < typename MemberContainer :: iterator , ::boost::generic::detail::ambiguous_deduction > , ::boost::generic::detail::concept_is_valid < ForwardIterator < typename MemberContainer :: iterator > > >::value , "typename '" "iterator" "' does not model '" "ForwardIterator" "'." ); static_assert ( ::boost::generic::detail::is_not_same < typename MemberContainer :: const_iterator , ::boost::generic::detail::no_deduction >::value , "typename '" "const_iterator" "' was not explicitly satisfied and cannot be deduced." ); static_assert ( ::boost::generic::detail::is_not_same < typename MemberContainer :: const_iterator , ::boost::generic::detail::ambiguous_deduction >::value , "typename '" "const_iterator" "' was not explicitly satisfied and deduction results in ambiguity." ); static_assert ( ::boost::mpl::or_ < ::boost::is_same < typename MemberContainer :: const_iterator , ::boost::generic::detail::no_deduction > , ::boost::is_same < typename MemberContainer :: const_iterator , ::boost::generic::detail::ambiguous_deduction > , ::boost::generic::detail::concept_is_valid < ForwardIterator < typename MemberContainer :: const_iterator > > >::value , "typename '" "const_iterator" "' does not model '" "ForwardIterator" "'." ); static_assert ( ::boost::generic::detail::concept_is_valid < Convertible<reference, const_reference> >::value , "requires " "Convertible<reference, const_reference>" ); static_assert ( ::boost::generic::detail::concept_is_valid < Convertible<reference, const value_type&> >::value , "requires " "Convertible<reference, const value_type&>" ); static_assert ( ::boost::generic::detail::concept_is_valid < Convertible<const_reference, const value_type&> >::value , "requires " "Convertible<const_reference, const value_type&>" ); static_assert ( ::boost::generic::detail::concept_is_valid < Convertible<iterator, const_iterator> >::value , "requires " "Convertible<iterator, const_iterator>" ); static_assert ( ::boost::generic::detail::concept_is_valid < SameType<typename ForwardIterator<iterator>::value_type, value_type> >::value , "requires " "SameType<typename ForwardIterator<iterator>::value_type, value_type>" ); static_assert ( ::boost::generic::detail::concept_is_valid < SameType<typename ForwardIterator<const_iterator>::value_type, value_type> >::value , "requires " "SameType<typename ForwardIterator<const_iterator>::value_type, value_type>" ); static_assert ( ::boost::generic::detail::concept_is_valid < Convertible<typename ForwardIterator<iterator>::reference, reference> >::value , "requires " "Convertible<typename ForwardIterator<iterator>::reference, reference>" ); static_assert ( ::boost::generic::detail::concept_is_valid < Convertible<typename ForwardIterator<const_iterator>::reference, const_reference> >::value , "requires " "Convertible<typename ForwardIterator<const_iterator>::reference, const_reference>" ); static_assert ( ::boost::generic::detail::concept_is_valid < SameType<typename ForwardIterator<iterator>::difference_type, typename ForwardIterator<const_iterator>::difference_type> >::value , "requires " "SameType<typename ForwardIterator<iterator>::difference_type, typename ForwardIterator<const_iterator>::difference_type>" ); static_assert ( ::boost::generic::detail::concept_is_valid < IntegralType<size_type> >::value , "requires " "IntegralType<size_type>" ); static_assert ( ::boost::generic::detail::concept_is_valid < Convertible<typename ForwardIterator<iterator>::difference_type, size_type> >::value , "requires " "Convertible<typename ForwardIterator<iterator>::difference_type, size_type>" ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "bool" " " "C" "::" "empty" "( " "" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , bool > >::value , "the return type of " "C" "::" "empty" "( " "" " )" " is not convertible to " "bool" ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_2 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "size_type" " " "C" "::" "size" "( " "" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_2 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_2 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , size_type > >::value , "the return type of " "C" "::" "size" "( " "" " )" " is not convertible to " "size_type" ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_3 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "iterator" " " "C" "::" "begin" "( " "" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_3 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_3 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , iterator > >::value , "the return type of " "C" "::" "begin" "( " "" " )" " is not convertible to " "iterator" ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_4 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "const_iterator" " " "C" "::" "begin" "( " "" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_4 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_4 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , const_iterator > >::value , "the return type of " "C" "::" "begin" "( " "" " )" " is not convertible to " "const_iterator" ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_5 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "iterator" " " "C" "::" "end" "( " "" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_5 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_5 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , iterator > >::value , "the return type of " "C" "::" "end" "( " "" " )" " is not convertible to " "iterator" ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_6 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "const_iterator" " " "C" "::" "end" "( " "" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_6 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_6 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , const_iterator > >::value , "the return type of " "C" "::" "end" "( " "" " )" " is not convertible to " "const_iterator" ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_7 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "const_iterator" " " "C" "::" "cbegin" "( " "" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_7 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_7 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , const_iterator > >::value , "the return type of " "C" "::" "cbegin" "( " "" " )" " is not convertible to " "const_iterator" ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_8 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "const_iterator" " " "C" "::" "cend" "( " "" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_8 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_8 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , const_iterator > >::value , "the return type of " "C" "::" "cend" "( " "" " )" " is not convertible to " "const_iterator" ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_9 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "reference" " " "C" "::" "front" "( " "" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_9 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_9 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , reference > >::value , "the return type of " "C" "::" "front" "( " "" " )" " is not convertible to " "reference" ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_10 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "const_reference" " " "C" "::" "front" "( " "" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_10 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_10 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , const_reference > >::value , "the return type of " "C" "::" "front" "( " "" " )" " is not convertible to " "const_reference" ); }; } } } namespace boost { namespace generic { namespace detail { template< typename C > struct is_concept < ::boost:: generic:: std_concept:: MemberContainer < C > > : mpl::true_ {}; template< typename C > struct concept_impl_of < ::boost:: generic:: std_concept:: MemberContainer < C > > { static bool const is_specialized = false; static bool const is_auto = 1 ; typedef ::boost:: generic:: std_concept:: boost_generic_concept_impl_detail:: boost_generic_detail_concept_implMemberContainer type; }; } } } namespace boost_generic_concept_map_detail { template< typename C > struct concept_map_ < ::boost:: generic:: std_concept:: MemberContainer < C > > { static bool const is_auto_concept_definition = true, is_usable = true; struct boost_generic_concept_map_impl {}; template< class BoostGenericDetailDummy = void > struct instantiate { typedef decltype ( ::boost::generic::detail::instantiate_with_dummy < BoostGenericDetailDummy , ::boost:: generic:: std_concept:: MemberContainer < C > >() ) instantiate_; }; }; }
#undef BOOST_GENERIC_PREPROCESSED_HEADER_NAME
