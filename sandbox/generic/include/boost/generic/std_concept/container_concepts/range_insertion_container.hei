#line 25 BOOST_PP_STRINGIZE ( BOOST_GENERIC_DETAIL_NARY_CAT ( BOOST_GENERIC_PREPROCESSED_, ROOT, eric/std_ , BOOST_GENERIC_PREPROCESSED_HEADER_NAME, pp ) )
namespace boost_generic_detail_scope_checker { static_assert ( ::boost_generic_detail_scope_checker::boost_generic_detail_is_same_fun < boost_generic_detail_global_scope_check , ::boost_generic_detail_scope_checker ::boost_generic_detail_global_scope_check >::value , "The BOOST_GENERIC_CONCEPT macro must be invoked at global scope. " "To make a concept inside a namespace, use a namespace parameter." ); } namespace boost { namespace generic { namespace std_concept { template< typename C , typename Iter > class RangeInsertionContainer; namespace boost_generic_concept_impl_detail { struct boost_generic_detail_concept_implRangeInsertionContainer { struct boost_generic_detail_tag { static bool const is_auto_concept = 0 == 1; }; template< typename C , typename Iter > struct boost_generic_detail_params; template< class BoostGenericDetailConceptAndParams > struct boost_generic_detail_params_from_concept; template< typename C , typename Iter > struct boost_generic_detail_params_from_concept < RangeInsertionContainer < C , Iter > > { typedef boost_generic_detail_params < C , Iter > type; }; template< class, class, class, class = void > struct boost_generic_detail_requires_are_valid_0 : ::std::false_type {}; template< class BoostGenericDetailConceptMap , typename C , typename Iter , class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_0 < BoostGenericDetailConceptMap , boost_generic_detail_params < C , Iter > , BoostGenericDetailTypenames , typename ::boost::generic::detail::always_void < InsertionContainer<C> >::type > : ::boost::generic::detail::concepts_are_modeled < BoostGenericDetailConceptMap , InsertionContainer<C> > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_1 : ::std::integral_constant< bool, false > {}; template< typename C , typename Iter , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_1 < boost_generic_detail_params < C , Iter > , ::boost::generic::detail::type_list < BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < InputIterator<Iter> >::type > : ::boost::generic::detail::concept_is_valid < InputIterator<Iter> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_1 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_0 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_1 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , typename C , typename Iter > struct boost_generic_detail_first_pass { }; template< class BoostGenericDetailBoostGenericDetailT > friend typename ::boost::disable_if_c < sizeof( BoostGenericDetailBoostGenericDetailT ) == sizeof( BoostGenericDetailBoostGenericDetailT ) >::type insert (); template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_1 { typedef ::boost::generic::detail::dummy_type type; }; template< typename C , typename Iter , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_1 < boost_generic_detail_params < C , Iter > , ::boost::generic::detail::type_list < BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( insert (::std::declval< C& >() , ::std::declval< typename InsertionContainer<C>::const_iterator >() , ::std::declval< Iter >() , ::std::declval< Iter >()) ) ) >::type > { typedef decltype ( insert (::std::declval< C& >() , ::std::declval< typename InsertionContainer<C>::const_iterator >() , ::std::declval< Iter >() , ::std::declval< Iter >()) ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_1 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_1 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class, class > struct boost_generic_detail_is_valid_; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class = void > struct boost_generic_detail_parent_concepts { typedef ::std::false_type boost_generic_detail_parent_sub_succeeded; }; template< class BoostGenericDetailConceptMap , typename C , typename Iter > struct boost_generic_detail_parent_concepts < BoostGenericDetailConceptMap , boost_generic_detail_params < C , Iter > , typename ::boost::generic::detail::always_void < InsertionContainer<C> >::type > : virtual boost::generic::detail::completed_concept_map_bases < BoostGenericDetailConceptMap , InsertionContainer<C> > { typedef ::std::true_type boost_generic_detail_parent_sub_succeeded; }; template< class BoostGenericDetailConceptMap , typename C , typename Iter > struct boost_generic_detail_completed_concept_map : boost_generic_detail_parent_concepts < BoostGenericDetailConceptMap , boost_generic_detail_params < C , Iter > > { private: typedef boost_generic_detail_first_pass < BoostGenericDetailConceptMap , C , Iter > boost_generic_detail_typename_deducers; typedef boost_generic_detail_completed_concept_map RangeInsertionContainer; public: private: template< class, class > friend struct boost_generic_detail_is_valid_; typedef boost_generic_detail_completed_concept_map boost_generic_detail_completed_concept_map_; typedef boost_generic_detail_params < C , Iter > boost_generic_detail_params_; typedef ::boost::generic::detail::type_list < void > boost_generic_detail_typenames; public: struct boost_generic_detail_is_valid : ::boost::generic::detail::and_ < typename boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded , boost_generic_detail_requires_are_valid_1< boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , void > > {}; }; template< class, class > struct boost_generic_detail_completed_concept_map_from_concept; template< class BoostGenericDetailConceptMap , typename C , typename Iter > struct boost_generic_detail_completed_concept_map_from_concept < BoostGenericDetailConceptMap , RangeInsertionContainer < C , Iter > > { typedef boost_generic_detail_completed_concept_map < BoostGenericDetailConceptMap , C , Iter > type; }; template< typename C , typename Iter , class BoostGenericDetailConceptMap > struct boost_generic_detail_is_valid_ < RangeInsertionContainer < C , Iter > , BoostGenericDetailConceptMap > : boost_generic_detail_completed_concept_map < BoostGenericDetailConceptMap , C , Iter >::boost_generic_detail_is_valid {}; template< class BoostGenericDetailConceptAndParams , class BoostGenericDetailConceptMap = typename ::boost_generic_concept_map_detail::concept_map_ < BoostGenericDetailConceptAndParams > ::boost_generic_concept_map_impl > struct boost_generic_detail_is_valid : boost_generic_detail_is_valid_ < BoostGenericDetailConceptAndParams , BoostGenericDetailConceptMap >::type {}; }; } typedef boost_generic_concept_impl_detail:: boost_generic_detail_concept_implRangeInsertionContainer RangeInsertionContainerBoostGenericDetailImpl; template< typename C , typename Iter > class RangeInsertionContainer : boost_generic_concept_impl_detail:: boost_generic_detail_concept_implRangeInsertionContainer:: boost_generic_detail_completed_concept_map < typename ::boost_generic_concept_map_detail::concept_map_ < RangeInsertionContainer < C , Iter > > ::boost_generic_concept_map_impl , C , Iter > { typedef boost_generic_concept_impl_detail:: boost_generic_detail_concept_implRangeInsertionContainer boost_generic_detail_concept_impl; typedef typename boost_generic_detail_concept_impl::template boost_generic_detail_completed_concept_map < typename ::boost_generic_concept_map_detail::concept_map_ < RangeInsertionContainer < C , Iter > > ::boost_generic_concept_map_impl , C , Iter > boost_generic_detail_completed_concept_map; typedef boost_generic_detail_concept_impl::boost_generic_detail_params < C , Iter > boost_generic_detail_params; struct parent_concept_asserts_substitution_failure { struct instantiate; }; struct parent_concept_asserts { struct instantiate; static_assert ( ::boost::mpl::identity < decltype ( ::boost::generic::detail::instantiate < InsertionContainer<C> >() ) >::type::value , "This message should never be seen." ); }; typedef typename ::std::conditional < boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded::value , parent_concept_asserts , parent_concept_asserts_substitution_failure >::type::instantiate parent_concept_asserts_; static_assert( boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded::value , "parameters unable to be substituted into parent concepts " "(guess: doing so may form a reference to void)." ); public: private: typedef ::boost::generic::detail::type_list < void > boost_generic_detail_typenames; static_assert ( ::boost::generic::detail::concept_is_valid < InputIterator<Iter> >::value , "requires " "InputIterator<Iter>" ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "void" " " "insert" "( " "C& , typename InsertionContainer<C>::const_iterator position , Iter first , Iter last" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , void > >::value , "the return type of " "insert" "( " "C& , typename InsertionContainer<C>::const_iterator position , Iter first , Iter last" " ) " "is not convertible to " "void" " " ); }; } } } namespace boost { namespace generic { namespace detail { template< typename C , typename Iter > struct is_concept < ::boost:: generic:: std_concept:: RangeInsertionContainer < C , Iter > > : mpl::true_ {}; template< typename C , typename Iter > struct concept_impl_of < ::boost:: generic:: std_concept:: RangeInsertionContainer < C , Iter > > { static bool const is_specialized = false; static bool const is_auto = 0 ; typedef ::boost:: generic:: std_concept:: boost_generic_concept_impl_detail:: boost_generic_detail_concept_implRangeInsertionContainer type; }; } } }
#undef BOOST_GENERIC_PREPROCESSED_HEADER_NAME
