#line 28 BOOST_PP_STRINGIZE ( BOOST_GENERIC_DETAIL_NARY_CAT ( BOOST_GENERIC_PREPROCESSED_, ROOT, eric/std_ , BOOST_GENERIC_PREPROCESSED_HEADER_NAME, pp ) )
namespace boost_generic_detail_scope_checker { static_assert ( ::boost_generic_detail_scope_checker::boost_generic_detail_is_same_fun < boost_generic_detail_global_scope_check , ::boost_generic_detail_scope_checker ::boost_generic_detail_global_scope_check >::value , "The BOOST_GENERIC_AUTO_CONCEPT macro must be invoked at global scope. " "To make an auto concept inside a namespace, use a namespace parameter." ); } namespace boost { namespace generic { namespace std_concept { template< typename X , typename Value > class OutputIterator; namespace boost_generic_concept_impl_detail { struct boost_generic_detail_concept_implOutputIterator { struct boost_generic_detail_tag { static bool const is_auto_concept = 1 == 1; }; template< typename X , typename Value > struct boost_generic_detail_params; template< class BoostGenericDetailConceptAndParams > struct boost_generic_detail_params_from_concept; template< typename X , typename Value > struct boost_generic_detail_params_from_concept < OutputIterator < X , Value > > { typedef boost_generic_detail_params < X , Value > type; }; template< class, class, class > struct boost_generic_detail_requires_are_valid_0 : ::boost::mpl::true_ {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_1 : ::std::integral_constant< bool, false > {}; template< typename X , typename Value , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_1 < boost_generic_detail_params < X , Value > , ::boost::generic::detail::type_list < BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < Iterator<X> >::type > : ::boost::generic::detail::concept_is_valid < Iterator<X> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_1 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_0 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_1 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailEnabler = void > struct boost_generic_detail_providedreference { typedef ::boost::generic::detail::dummy_type_< 3 > type; }; template< class BoostGenericDetailConceptMap > struct boost_generic_detail_providedreference < BoostGenericDetailConceptMap , typename ::boost::generic::detail::always_void < typename BoostGenericDetailConceptMap:: reference >::type > { typedef typename BoostGenericDetailConceptMap:: reference type; }; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_typename_defaultreference { typedef ::boost::generic::detail::dummy_type_< 3 > type; }; template< typename X , typename Value , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_typename_defaultreference < boost_generic_detail_params < X , Value > , ::boost::generic::detail::type_list < BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < typename Iterator<X>::reference >::type > { typedef typename Iterator<X>::reference type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailProvidedName = typename boost_generic_detail_providedreference < BoostGenericDetailConceptMap >::type > struct boost_generic_detail_first_passreference : ::boost::mpl::if_c < ::boost::mpl::and_ < ::boost::generic::detail::is_dummy_type < BoostGenericDetailProvidedName > , boost_generic_detail_requires_are_valid_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > >::value , boost_generic_detail_typename_defaultreference < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< BoostGenericDetailProvidedName > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailEnabler = void > struct boost_generic_detail_providedpostincrement_result { typedef ::boost::generic::detail::dummy_type_< 4 > type; }; template< class BoostGenericDetailConceptMap > struct boost_generic_detail_providedpostincrement_result < BoostGenericDetailConceptMap , typename ::boost::generic::detail::always_void < typename BoostGenericDetailConceptMap:: postincrement_result >::type > { typedef typename BoostGenericDetailConceptMap:: postincrement_result type; }; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_typename_defaultpostincrement_result { typedef ::boost::generic::detail::dummy_type_< 4 > type; }; template< typename X , typename Value , class reference , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_typename_defaultpostincrement_result < boost_generic_detail_params < X , Value > , ::boost::generic::detail::type_list < reference , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < typename Iterator<X>::postincrement_result >::type > { typedef typename Iterator<X>::postincrement_result type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailProvidedName = typename boost_generic_detail_providedpostincrement_result < BoostGenericDetailConceptMap >::type > struct boost_generic_detail_first_passpostincrement_result : ::boost::mpl::if_c < ::boost::mpl::and_ < ::boost::generic::detail::is_dummy_type < BoostGenericDetailProvidedName > , boost_generic_detail_requires_are_valid_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > >::value , boost_generic_detail_typename_defaultpostincrement_result < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< BoostGenericDetailProvidedName > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_2 : ::std::integral_constant< bool, false > {}; template< typename X , typename Value , class reference , class postincrement_result , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_2 < boost_generic_detail_params < X , Value > , ::boost::generic::detail::type_list < reference , postincrement_result , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < SameType< reference, typename Iterator<X>::reference > >::type > : ::boost::generic::detail::concept_is_valid < SameType< reference, typename Iterator<X>::reference > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_2 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_2 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_3 : ::std::integral_constant< bool, false > {}; template< typename X , typename Value , class reference , class postincrement_result , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_3 < boost_generic_detail_params < X , Value > , ::boost::generic::detail::type_list < reference , postincrement_result , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < SameType< postincrement_result , typename Iterator<X>::postincrement_result > >::type > : ::boost::generic::detail::concept_is_valid < SameType< postincrement_result , typename Iterator<X>::postincrement_result > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_3 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_2 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_3 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_4 : ::std::integral_constant< bool, false > {}; template< typename X , typename Value , class reference , class postincrement_result , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_4 < boost_generic_detail_params < X , Value > , ::boost::generic::detail::type_list < reference , postincrement_result , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < Convertible< postincrement_result, const X& > >::type > : ::boost::generic::detail::concept_is_valid < Convertible< postincrement_result, const X& > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_4 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_3 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_4 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_5 : ::std::integral_constant< bool, false > {}; template< typename X , typename Value , class reference , class postincrement_result , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_5 < boost_generic_detail_params < X , Value > , ::boost::generic::detail::type_list < reference , postincrement_result , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < HasAssign< reference, Value > >::type > : ::boost::generic::detail::concept_is_valid < HasAssign< reference, Value > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_5 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_4 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_5 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_6 : ::std::integral_constant< bool, false > {}; template< typename X , typename Value , class reference , class postincrement_result , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_6 < boost_generic_detail_params < X , Value > , ::boost::generic::detail::type_list < reference , postincrement_result , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < HasAssign < typename HasDereference<postincrement_result>::result_type , Value > >::type > : ::boost::generic::detail::concept_is_valid < HasAssign < typename HasDereference<postincrement_result>::result_type , Value > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_6 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_5 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_6 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , typename X , typename Value > struct boost_generic_detail_first_pass { typedef typename boost_generic_detail_first_passreference < BoostGenericDetailConceptMap , boost_generic_detail_params < X , Value > , ::boost::generic::detail::type_list < void****** > >::type reference ; typedef typename boost_generic_detail_first_passpostincrement_result < BoostGenericDetailConceptMap , boost_generic_detail_params < X , Value > , ::boost::generic::detail::type_list < reference , void****** > >::type postincrement_result ; }; template< class, class, class > struct boost_generic_detail_deduce_0reference { typedef ::boost::generic::detail::no_deduction type; }; template< class, class, class > struct boost_generic_detail_deduce_0postincrement_result { typedef ::boost::generic::detail::no_deduction type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deducereference : boost_generic_detail_deduce_0reference < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deducepostincrement_result : boost_generic_detail_deduce_0postincrement_result < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > {}; template< class, class > struct boost_generic_detail_is_valid_; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class = void > struct boost_generic_detail_parent_concepts { typedef ::std::false_type boost_generic_detail_parent_sub_succeeded; }; template< class BoostGenericDetailConceptMap , typename X , typename Value > struct boost_generic_detail_parent_concepts < BoostGenericDetailConceptMap , boost_generic_detail_params < X , Value > , typename ::boost::generic::detail::always_void < >::type > { typedef ::std::true_type boost_generic_detail_parent_sub_succeeded; }; template< class BoostGenericDetailConceptMap , typename X , typename Value > struct boost_generic_detail_completed_concept_map : boost_generic_detail_parent_concepts < BoostGenericDetailConceptMap , boost_generic_detail_params < X , Value > > { private: typedef boost_generic_detail_first_pass < BoostGenericDetailConceptMap , X , Value > boost_generic_detail_typename_deducers; typedef boost_generic_detail_completed_concept_map OutputIterator; public: typedef typename ::boost::mpl::eval_if_c < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_typename_deducers:: reference >::value , boost_generic_detail_deducereference < BoostGenericDetailConceptMap , boost_generic_detail_params < X , Value > , ::boost::generic::detail::type_list < typename boost_generic_detail_typename_deducers:: reference, typename boost_generic_detail_typename_deducers:: postincrement_result, void********** > > , ::boost::mpl::identity < typename boost_generic_detail_typename_deducers:: reference > >::type reference; typedef typename ::boost::mpl::eval_if_c < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_typename_deducers:: postincrement_result >::value , boost_generic_detail_deducepostincrement_result < BoostGenericDetailConceptMap , boost_generic_detail_params < X , Value > , ::boost::generic::detail::type_list < reference, typename boost_generic_detail_typename_deducers:: postincrement_result, void********** > > , ::boost::mpl::identity < typename boost_generic_detail_typename_deducers:: postincrement_result > >::type postincrement_result; private: template< class, class > friend struct boost_generic_detail_is_valid_; typedef boost_generic_detail_completed_concept_map boost_generic_detail_completed_concept_map_; typedef boost_generic_detail_params < X , Value > boost_generic_detail_params_; typedef ::boost::generic::detail::type_list < typename boost_generic_detail_completed_concept_map_:: reference, typename boost_generic_detail_completed_concept_map_:: postincrement_result, void > boost_generic_detail_typenames; public: struct boost_generic_detail_is_valid : ::boost::generic::detail::and_ < typename boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded , boost_generic_detail_requires_are_valid_6< boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames > , ::boost::generic::detail::is_not_deduction_error< reference > , ::boost::generic::detail::is_not_deduction_error< postincrement_result > > {}; }; template< class, class > struct boost_generic_detail_completed_concept_map_from_concept; template< class BoostGenericDetailConceptMap , typename X , typename Value > struct boost_generic_detail_completed_concept_map_from_concept < BoostGenericDetailConceptMap , OutputIterator < X , Value > > { typedef boost_generic_detail_completed_concept_map < BoostGenericDetailConceptMap , X , Value > type; }; template< typename X , typename Value , class BoostGenericDetailConceptMap > struct boost_generic_detail_is_valid_ < OutputIterator < X , Value > , BoostGenericDetailConceptMap > : boost_generic_detail_completed_concept_map < BoostGenericDetailConceptMap , X , Value >::boost_generic_detail_is_valid {}; template< class BoostGenericDetailConceptAndParams , class BoostGenericDetailConceptMap = typename ::boost_generic_concept_map_detail::concept_map_ < BoostGenericDetailConceptAndParams > ::boost_generic_concept_map_impl > struct boost_generic_detail_is_valid : boost_generic_detail_is_valid_ < BoostGenericDetailConceptAndParams , BoostGenericDetailConceptMap >::type {}; }; } typedef boost_generic_concept_impl_detail:: boost_generic_detail_concept_implOutputIterator OutputIteratorBoostGenericDetailImpl; template< typename X , typename Value > class OutputIterator : boost_generic_concept_impl_detail:: boost_generic_detail_concept_implOutputIterator:: boost_generic_detail_completed_concept_map < typename ::boost_generic_concept_map_detail::concept_map_ < OutputIterator < X , Value > > ::boost_generic_concept_map_impl , X , Value > { typedef boost_generic_concept_impl_detail:: boost_generic_detail_concept_implOutputIterator boost_generic_detail_concept_impl; typedef typename boost_generic_detail_concept_impl::template boost_generic_detail_completed_concept_map < typename ::boost_generic_concept_map_detail::concept_map_ < OutputIterator < X , Value > > ::boost_generic_concept_map_impl , X , Value > boost_generic_detail_completed_concept_map; typedef boost_generic_detail_concept_impl::boost_generic_detail_params < X , Value > boost_generic_detail_params; struct parent_concept_asserts_substitution_failure { struct instantiate; }; struct parent_concept_asserts { struct instantiate; }; typedef typename ::std::conditional < boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded::value , parent_concept_asserts , parent_concept_asserts_substitution_failure >::type::instantiate parent_concept_asserts_; static_assert( boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded::value , "parameters unable to be substituted into parent concepts " "(guess: doing so may form a reference to void)." ); public: typedef typename boost_generic_detail_completed_concept_map:: reference reference; typedef typename boost_generic_detail_completed_concept_map:: postincrement_result postincrement_result; private: typedef ::boost::generic::detail::type_list < reference , postincrement_result , void > boost_generic_detail_typenames; static_assert ( ::boost::generic::detail::concept_is_valid < Iterator<X> >::value , "requires " "Iterator<X>" ); static_assert ( ::boost::generic::detail::is_not_same < typename OutputIterator :: reference , ::boost::generic::detail::no_deduction >::value , "typename '" "reference" "' was not explicitly satisfied and cannot be deduced." ); static_assert ( ::boost::generic::detail::is_not_same < typename OutputIterator :: reference , ::boost::generic::detail::ambiguous_deduction >::value , "typename '" "reference" "' was not explicitly satisfied and deduction results in ambiguity." ); static_assert ( ::boost::generic::detail::is_not_same < typename OutputIterator :: postincrement_result , ::boost::generic::detail::no_deduction >::value , "typename '" "postincrement_result" "' was not explicitly satisfied and cannot be deduced." ); static_assert ( ::boost::generic::detail::is_not_same < typename OutputIterator :: postincrement_result , ::boost::generic::detail::ambiguous_deduction >::value , "typename '" "postincrement_result" "' was not explicitly satisfied and deduction results in ambiguity." ); static_assert ( ::boost::generic::detail::concept_is_valid < SameType< reference, typename Iterator<X>::reference > >::value , "requires " "SameType< reference, typename Iterator<X>::reference >" ); static_assert ( ::boost::generic::detail::concept_is_valid < SameType< postincrement_result , typename Iterator<X>::postincrement_result > >::value , "requires " "SameType< postincrement_result , typename Iterator<X>::postincrement_result >" ); static_assert ( ::boost::generic::detail::concept_is_valid < Convertible< postincrement_result, const X& > >::value , "requires " "Convertible< postincrement_result, const X& >" ); static_assert ( ::boost::generic::detail::concept_is_valid < HasAssign< reference, Value > >::value , "requires " "HasAssign< reference, Value >" ); static_assert ( ::boost::generic::detail::concept_is_valid < HasAssign < typename HasDereference<postincrement_result>::result_type , Value > >::value , "requires " "HasAssign < typename HasDereference<postincrement_result>::result_type , Value >" ); }; } } } namespace boost { namespace generic { namespace detail { template< typename X , typename Value > struct is_concept < ::boost:: generic:: std_concept:: OutputIterator < X , Value > > : mpl::true_ {}; template< typename X , typename Value > struct concept_impl_of < ::boost:: generic:: std_concept:: OutputIterator < X , Value > > { static bool const is_specialized = false; static bool const is_auto = 1 ; typedef ::boost:: generic:: std_concept:: boost_generic_concept_impl_detail:: boost_generic_detail_concept_implOutputIterator type; }; } } } namespace boost_generic_concept_map_detail { template< typename X , typename Value > struct concept_map_ < ::boost:: generic:: std_concept:: OutputIterator < X , Value > > { static bool const is_auto_concept_definition = true, is_usable = true; struct boost_generic_concept_map_impl {}; template< class BoostGenericDetailDummy = void > struct instantiate { typedef decltype ( ::boost::generic::detail::instantiate_with_dummy < BoostGenericDetailDummy , ::boost:: generic:: std_concept:: OutputIterator < X , Value > >() ) instantiate_; }; }; }
#undef BOOST_GENERIC_PREPROCESSED_HEADER_NAME
