#line 29 BOOST_PP_STRINGIZE ( BOOST_GENERIC_DETAIL_NARY_CAT ( BOOST_GENERIC_PREPROCESSED_, ROOT, eric/std_ , BOOST_GENERIC_PREPROCESSED_HEADER_NAME, pp ) )
namespace boost_generic_detail_scope_checker { static_assert ( ::boost_generic_detail_scope_checker::boost_generic_detail_is_same_fun < boost_generic_detail_global_scope_check , ::boost_generic_detail_scope_checker ::boost_generic_detail_global_scope_check >::value , "The BOOST_GENERIC_CONCEPT macro must be invoked at global scope. " "To make a concept inside a namespace, use a namespace parameter." ); } namespace boost { namespace generic { namespace std_concept { template< typename T > class Range; namespace boost_generic_concept_impl_detail { struct boost_generic_detail_concept_implRange { struct boost_generic_detail_tag { static bool const is_auto_concept = 0 == 1; }; template< typename T > struct boost_generic_detail_params; template< class BoostGenericDetailConceptAndParams > struct boost_generic_detail_params_from_concept; template< typename T > struct boost_generic_detail_params_from_concept < Range < T > > { typedef boost_generic_detail_params < T > type; }; template< class, class, class > struct boost_generic_detail_requires_are_valid_0 : ::boost::mpl::true_ {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailEnabler = void > struct boost_generic_detail_first_passiterator { typedef ::boost::generic::detail::dummy_type_< 2 > type; }; template< class BoostGenericDetailConceptMap > struct boost_generic_detail_first_passiterator < BoostGenericDetailConceptMap , typename ::boost::generic::detail::always_void < typename BoostGenericDetailConceptMap:: iterator >::type > { typedef typename BoostGenericDetailConceptMap:: iterator type; }; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_1 : ::std::integral_constant< bool, false > {}; template< typename T , class iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_1 < boost_generic_detail_params < T > , ::boost::generic::detail::type_list < iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < InputIterator < iterator > >::type > : ::boost::generic::detail::concept_is_valid < InputIterator < iterator > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_1 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_0 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_1 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , typename T > struct boost_generic_detail_first_pass { typedef typename boost_generic_detail_first_passiterator < BoostGenericDetailConceptMap >::type iterator ; }; template< class, class, class > struct boost_generic_detail_deduce_0iterator { typedef ::boost::generic::detail::no_deduction type; }; template< class BoostGenericDetailBoostGenericDetailT > friend typename ::boost::disable_if_c < sizeof( BoostGenericDetailBoostGenericDetailT ) == sizeof( BoostGenericDetailBoostGenericDetailT ) >::type begin (); template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_1 { typedef ::boost::generic::detail::dummy_type type; }; template< typename T , class iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_1 < boost_generic_detail_params < T > , ::boost::generic::detail::type_list < iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( begin (::std::declval< T& >()) ) ) >::type > { typedef decltype ( begin (::std::declval< T& >()) ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_1 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_1 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_1iterator; template< typename T , class BoostGenericDetailAugiterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_1iterator < boost_generic_detail_params < T > , ::boost::generic::detail::type_list < BoostGenericDetailAugiterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugiterator iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class iterator > static ::boost::generic::detail::type_< iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_1iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_1iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_1iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_1iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_1iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_0iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_1iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailBoostGenericDetailT > friend typename ::boost::disable_if_c < sizeof( BoostGenericDetailBoostGenericDetailT ) == sizeof( BoostGenericDetailBoostGenericDetailT ) >::type end (); template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_2 { typedef ::boost::generic::detail::dummy_type type; }; template< typename T , class iterator , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_2 < boost_generic_detail_params < T > , ::boost::generic::detail::type_list < iterator , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( end (::std::declval< T& >()) ) ) >::type > { typedef decltype ( end (::std::declval< T& >()) ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_2 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_2 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_2iterator; template< typename T , class BoostGenericDetailAugiterator, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_2iterator < boost_generic_detail_params < T > , ::boost::generic::detail::type_list < BoostGenericDetailAugiterator, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugiterator iterator; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class iterator > static ::boost::generic::detail::type_< iterator > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < iterator > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_2iterator : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_2iterator< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_2 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_2iterator : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_2iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_2iterator : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_1iterator< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_2iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduceiterator : boost_generic_detail_deduce_2iterator < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > {}; template< class, class > struct boost_generic_detail_is_valid_; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class = void > struct boost_generic_detail_parent_concepts { typedef ::std::false_type boost_generic_detail_parent_sub_succeeded; }; template< class BoostGenericDetailConceptMap , typename T > struct boost_generic_detail_parent_concepts < BoostGenericDetailConceptMap , boost_generic_detail_params < T > , typename ::boost::generic::detail::always_void < >::type > { typedef ::std::true_type boost_generic_detail_parent_sub_succeeded; }; template< class BoostGenericDetailConceptMap , typename T > struct boost_generic_detail_completed_concept_map : boost_generic_detail_parent_concepts < BoostGenericDetailConceptMap , boost_generic_detail_params < T > > { private: typedef boost_generic_detail_first_pass < BoostGenericDetailConceptMap , T > boost_generic_detail_typename_deducers; typedef boost_generic_detail_completed_concept_map Range; public: typedef typename ::boost::mpl::eval_if_c < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_typename_deducers:: iterator >::value , boost_generic_detail_deduceiterator < BoostGenericDetailConceptMap , boost_generic_detail_params < T > , ::boost::generic::detail::type_list < typename boost_generic_detail_typename_deducers:: iterator, void********** > > , ::boost::mpl::identity < typename boost_generic_detail_typename_deducers:: iterator > >::type iterator; private: template< class, class > friend struct boost_generic_detail_is_valid_; typedef boost_generic_detail_completed_concept_map boost_generic_detail_completed_concept_map_; typedef boost_generic_detail_params < T > boost_generic_detail_params_; typedef ::boost::generic::detail::type_list < typename boost_generic_detail_completed_concept_map_:: iterator, void > boost_generic_detail_typenames; public: struct boost_generic_detail_is_valid : ::boost::generic::detail::and_ < typename boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded , boost_generic_detail_requires_are_valid_1< boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames > , ::boost::generic::detail::is_not_deduction_error< iterator > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , iterator > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_2 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_2 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , iterator > > {}; }; template< class, class > struct boost_generic_detail_completed_concept_map_from_concept; template< class BoostGenericDetailConceptMap , typename T > struct boost_generic_detail_completed_concept_map_from_concept < BoostGenericDetailConceptMap , Range < T > > { typedef boost_generic_detail_completed_concept_map < BoostGenericDetailConceptMap , T > type; }; template< typename T , class BoostGenericDetailConceptMap > struct boost_generic_detail_is_valid_ < Range < T > , BoostGenericDetailConceptMap > : boost_generic_detail_completed_concept_map < BoostGenericDetailConceptMap , T >::boost_generic_detail_is_valid {}; template< class BoostGenericDetailConceptAndParams , class BoostGenericDetailConceptMap = typename ::boost_generic_concept_map_detail::concept_map_ < BoostGenericDetailConceptAndParams > ::boost_generic_concept_map_impl > struct boost_generic_detail_is_valid : boost_generic_detail_is_valid_ < BoostGenericDetailConceptAndParams , BoostGenericDetailConceptMap >::type {}; }; } typedef boost_generic_concept_impl_detail:: boost_generic_detail_concept_implRange RangeBoostGenericDetailImpl; template< typename T > class Range : boost_generic_concept_impl_detail:: boost_generic_detail_concept_implRange:: boost_generic_detail_completed_concept_map < typename ::boost_generic_concept_map_detail::concept_map_ < Range < T > > ::boost_generic_concept_map_impl , T > { typedef boost_generic_concept_impl_detail:: boost_generic_detail_concept_implRange boost_generic_detail_concept_impl; typedef typename boost_generic_detail_concept_impl::template boost_generic_detail_completed_concept_map < typename ::boost_generic_concept_map_detail::concept_map_ < Range < T > > ::boost_generic_concept_map_impl , T > boost_generic_detail_completed_concept_map; typedef boost_generic_detail_concept_impl::boost_generic_detail_params < T > boost_generic_detail_params; struct parent_concept_asserts_substitution_failure { struct instantiate; }; struct parent_concept_asserts { struct instantiate; }; typedef typename ::std::conditional < boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded::value , parent_concept_asserts , parent_concept_asserts_substitution_failure >::type::instantiate parent_concept_asserts_; static_assert( boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded::value , "parameters unable to be substituted into parent concepts " "(guess: doing so may form a reference to void)." ); public: typedef typename boost_generic_detail_completed_concept_map:: iterator iterator; private: typedef ::boost::generic::detail::type_list < iterator , void > boost_generic_detail_typenames; static_assert ( ::boost::generic::detail::is_not_same < typename Range :: iterator , ::boost::generic::detail::no_deduction >::value , "typename '" "iterator" "' was not explicitly satisfied and cannot be deduced." ); static_assert ( ::boost::generic::detail::is_not_same < typename Range :: iterator , ::boost::generic::detail::ambiguous_deduction >::value , "typename '" "iterator" "' was not explicitly satisfied and deduction results in ambiguity." ); static_assert ( ::boost::mpl::or_ < ::boost::is_same < typename Range :: iterator , ::boost::generic::detail::no_deduction > , ::boost::is_same < typename Range :: iterator , ::boost::generic::detail::ambiguous_deduction > , ::boost::generic::detail::concept_is_valid < InputIterator < typename Range :: iterator > > >::value , "typename '" "iterator" "' does not model '" "InputIterator" "'." ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "iterator" " " "begin" "( " "T&" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , iterator > >::value , "the return type of " "begin" "( " "T&" " ) " "is not convertible to " "iterator" " " ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_2 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "iterator" " " "end" "( " "T&" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_2 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_2 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , iterator > >::value , "the return type of " "end" "( " "T&" " ) " "is not convertible to " "iterator" " " ); }; } } } namespace boost { namespace generic { namespace detail { template< typename T > struct is_concept < ::boost:: generic:: std_concept:: Range < T > > : mpl::true_ {}; template< typename T > struct concept_impl_of < ::boost:: generic:: std_concept:: Range < T > > { static bool const is_specialized = false; static bool const is_auto = 0 ; typedef ::boost:: generic:: std_concept:: boost_generic_concept_impl_detail:: boost_generic_detail_concept_implRange type; }; } } }
namespace boost_generic_detail_scope_checker { static_assert ( ::boost_generic_detail_scope_checker::boost_generic_detail_is_same_fun < boost_generic_detail_global_scope_check , ::boost_generic_detail_scope_checker ::boost_generic_detail_global_scope_check >::value , "Concept maps must be defined at global scope." ); } namespace boost_generic_concept_map_detail { template< class T , std::size_t N > struct concept_map_ < boost::generic::std_concept::Range < T[N] > >{ static bool const is_auto_concept_definition = false, is_usable = true; struct boost_generic_concept_map_impl { typedef T* iterator; iterator begin ( typename std::add_lvalue_reference<T[N]>::type a ) { return a; } iterator end ( typename std::add_lvalue_reference<T[N]>::type a ) { return a + N; } }; template< class BoostGenericDetailDummy = void > struct instantiate { typedef decltype ( ::boost::generic::detail::instantiate_with_dummy < BoostGenericDetailDummy , boost::generic::std_concept::Range < T[N] > >() ) instantiate_; }; }; }
#undef BOOST_GENERIC_PREPROCESSED_HEADER_NAME
