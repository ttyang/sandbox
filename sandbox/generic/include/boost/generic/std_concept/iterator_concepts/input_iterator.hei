#line 32 BOOST_PP_STRINGIZE ( BOOST_GENERIC_DETAIL_NARY_CAT ( BOOST_GENERIC_PREPROCESSED_, ROOT, eric/std_ , BOOST_GENERIC_PREPROCESSED_HEADER_NAME, pp ) )
namespace boost_generic_detail_scope_checker { static_assert ( ::boost_generic_detail_scope_checker::boost_generic_detail_is_same_fun < boost_generic_detail_global_scope_check , ::boost_generic_detail_scope_checker ::boost_generic_detail_global_scope_check >::value , "The BOOST_GENERIC_CONCEPT macro must be invoked at global scope. " "To make a concept inside a namespace, use a namespace parameter." ); } namespace boost { namespace generic { namespace std_concept { template< typename X > class InputIterator; namespace boost_generic_concept_impl_detail { struct boost_generic_detail_concept_implInputIterator { struct boost_generic_detail_tag { static bool const is_auto_concept = 0 == 1; }; template< typename X > struct boost_generic_detail_params; template< class BoostGenericDetailConceptAndParams > struct boost_generic_detail_params_from_concept; template< typename X > struct boost_generic_detail_params_from_concept < InputIterator < X > > { typedef boost_generic_detail_params < X > type; }; template< class, class, class, class = void > struct boost_generic_detail_requires_are_valid_0 : ::std::false_type {}; template< class BoostGenericDetailConceptMap , typename X , class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_0 < BoostGenericDetailConceptMap , boost_generic_detail_params < X > , BoostGenericDetailTypenames , typename ::boost::generic::detail::always_void < Iterator<X>, EqualityComparable<X> >::type > : ::boost::generic::detail::concepts_are_modeled < BoostGenericDetailConceptMap , Iterator<X>, EqualityComparable<X> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailEnabler = void > struct boost_generic_detail_providedvalue_type { typedef ::boost::generic::detail::dummy_type_< 3 > type; }; template< class BoostGenericDetailConceptMap > struct boost_generic_detail_providedvalue_type < BoostGenericDetailConceptMap , typename ::boost::generic::detail::always_void < typename BoostGenericDetailConceptMap:: value_type >::type > { typedef typename BoostGenericDetailConceptMap:: value_type type; }; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_typename_defaultvalue_type { typedef ::boost::generic::detail::dummy_type_< 3 > type; }; template< typename X , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_typename_defaultvalue_type < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < typename X::value_type >::type > { typedef typename X::value_type type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailProvidedName = typename boost_generic_detail_providedvalue_type < BoostGenericDetailConceptMap >::type > struct boost_generic_detail_first_passvalue_type : ::boost::mpl::if_c < ::boost::mpl::and_ < ::boost::generic::detail::is_dummy_type < BoostGenericDetailProvidedName > , boost_generic_detail_requires_are_valid_0 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > >::value , boost_generic_detail_typename_defaultvalue_type < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< BoostGenericDetailProvidedName > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_1 : ::std::integral_constant< bool, false > {}; template< typename X , class value_type , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_1 < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < value_type , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < ObjectType < value_type > >::type > : ::boost::generic::detail::concept_is_valid < ObjectType < value_type > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_1 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_0 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_1 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailEnabler = void > struct boost_generic_detail_providedpointer { typedef ::boost::generic::detail::dummy_type_< 4 > type; }; template< class BoostGenericDetailConceptMap > struct boost_generic_detail_providedpointer < BoostGenericDetailConceptMap , typename ::boost::generic::detail::always_void < typename BoostGenericDetailConceptMap:: pointer >::type > { typedef typename BoostGenericDetailConceptMap:: pointer type; }; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_typename_defaultpointer { typedef ::boost::generic::detail::dummy_type_< 4 > type; }; template< typename X , class value_type , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_typename_defaultpointer < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < value_type , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < typename X::pointer >::type > { typedef typename X::pointer type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailProvidedName = typename boost_generic_detail_providedpointer < BoostGenericDetailConceptMap >::type > struct boost_generic_detail_first_passpointer : ::boost::mpl::if_c < ::boost::mpl::and_ < ::boost::generic::detail::is_dummy_type < BoostGenericDetailProvidedName > , boost_generic_detail_requires_are_valid_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > >::value , boost_generic_detail_typename_defaultpointer < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< BoostGenericDetailProvidedName > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_2 : ::std::integral_constant< bool, false > {}; template< typename X , class value_type , class pointer , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_2 < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < value_type , pointer , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < MoveConstructible < pointer > >::type > : ::boost::generic::detail::concept_is_valid < MoveConstructible < pointer > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_2 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_2 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailEnabler = void > struct boost_generic_detail_provideddifference_type { typedef ::boost::generic::detail::dummy_type_< 5 > type; }; template< class BoostGenericDetailConceptMap > struct boost_generic_detail_provideddifference_type < BoostGenericDetailConceptMap , typename ::boost::generic::detail::always_void < typename BoostGenericDetailConceptMap:: difference_type >::type > { typedef typename BoostGenericDetailConceptMap:: difference_type type; }; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_typename_defaultdifference_type { typedef ::boost::generic::detail::dummy_type_< 5 > type; }; template< typename X , class value_type , class pointer , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_typename_defaultdifference_type < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < value_type , pointer , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < typename X::difference_type >::type > { typedef typename X::difference_type type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailProvidedName = typename boost_generic_detail_provideddifference_type < BoostGenericDetailConceptMap >::type > struct boost_generic_detail_first_passdifference_type : ::boost::mpl::if_c < ::boost::mpl::and_ < ::boost::generic::detail::is_dummy_type < BoostGenericDetailProvidedName > , boost_generic_detail_requires_are_valid_2 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > >::value , boost_generic_detail_typename_defaultdifference_type < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< BoostGenericDetailProvidedName > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_3 : ::std::integral_constant< bool, false > {}; template< typename X , class value_type , class pointer , class difference_type , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_3 < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < value_type , pointer , difference_type , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < SignedIntegralLike < difference_type > >::type > : ::boost::generic::detail::concept_is_valid < SignedIntegralLike < difference_type > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_3 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_2 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_3 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_4 : ::std::integral_constant< bool, false > {}; template< typename X , class value_type , class pointer , class difference_type , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_4 < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < value_type , pointer , difference_type , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < IntegralType< difference_type > >::type > : ::boost::generic::detail::concept_is_valid < IntegralType< difference_type > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_4 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_3 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_4 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_5 : ::std::integral_constant< bool, false > {}; template< typename X , class value_type , class pointer , class difference_type , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_5 < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < value_type , pointer , difference_type , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < Convertible< typename Iterator<X>::reference, const value_type &> >::type > : ::boost::generic::detail::concept_is_valid < Convertible< typename Iterator<X>::reference, const value_type &> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_5 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_4 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_5 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_6 : ::std::integral_constant< bool, false > {}; template< typename X , class value_type , class pointer , class difference_type , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_6 < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < value_type , pointer , difference_type , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < Convertible< pointer, const value_type* > >::type > : ::boost::generic::detail::concept_is_valid < Convertible< pointer, const value_type* > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_6 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_5 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_6 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_7 : ::std::integral_constant< bool, false > {}; template< typename X , class value_type , class pointer , class difference_type , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_7 < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < value_type , pointer , difference_type , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < Convertible < typename HasDereference < typename Iterator<X>::postincrement_result >::result_type , const value_type& > >::type > : ::boost::generic::detail::concept_is_valid < Convertible < typename HasDereference < typename Iterator<X>::postincrement_result >::result_type , const value_type& > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_7 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_6 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_7 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , typename X > struct boost_generic_detail_first_pass { typedef typename boost_generic_detail_first_passvalue_type < BoostGenericDetailConceptMap , boost_generic_detail_params < X > , ::boost::generic::detail::type_list < void****** > >::type value_type ; typedef typename boost_generic_detail_first_passpointer < BoostGenericDetailConceptMap , boost_generic_detail_params < X > , ::boost::generic::detail::type_list < value_type , void****** > >::type pointer ; typedef typename boost_generic_detail_first_passdifference_type < BoostGenericDetailConceptMap , boost_generic_detail_params < X > , ::boost::generic::detail::type_list < value_type , pointer , void****** > >::type difference_type ; }; template< class, class, class > struct boost_generic_detail_deduce_0value_type { typedef ::boost::generic::detail::no_deduction type; }; template< class, class, class > struct boost_generic_detail_deduce_0pointer { typedef ::boost::generic::detail::no_deduction type; }; template< class, class, class > struct boost_generic_detail_deduce_0difference_type { typedef ::boost::generic::detail::no_deduction type; }; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_1 { typedef ::boost::generic::detail::dummy_type type; }; template< typename X , class value_type , class pointer , class difference_type , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_1 < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < value_type , pointer , difference_type , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( ::boost::generic::detail::operator_arrow_fun < const X& >() ) ) >::type > { typedef decltype ( ::boost::generic::detail::operator_arrow_fun < const X& >() ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_1 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_7 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_1 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_1value_type; template< typename X , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugpointer, class BoostGenericDetailAugdifference_type, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_1value_type < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugpointer, BoostGenericDetailAugdifference_type, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugpointer pointer; typedef BoostGenericDetailAugdifference_type difference_type; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class value_type > static ::boost::generic::detail::type_< value_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < pointer > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_1value_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_1value_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_1value_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_7 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_1value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_1value_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_0value_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_1value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_1pointer; template< typename X , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugpointer, class BoostGenericDetailAugdifference_type, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_1pointer < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugpointer, BoostGenericDetailAugdifference_type, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugpointer pointer; typedef BoostGenericDetailAugdifference_type difference_type; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class pointer > static ::boost::generic::detail::type_< pointer > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < pointer > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_1pointer : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_1pointer< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_1pointer : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_7 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_1pointer < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_1pointer : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_0pointer< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_1pointer < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_1difference_type; template< typename X , class BoostGenericDetailAugvalue_type, class BoostGenericDetailAugpointer, class BoostGenericDetailAugdifference_type, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_1difference_type < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < BoostGenericDetailAugvalue_type, BoostGenericDetailAugpointer, BoostGenericDetailAugdifference_type, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugvalue_type value_type; typedef BoostGenericDetailAugpointer pointer; typedef BoostGenericDetailAugdifference_type difference_type; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class difference_type > static ::boost::generic::detail::type_< difference_type > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < pointer > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_1difference_type : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_1difference_type< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_1difference_type : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_7 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_1difference_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_1difference_type : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_0difference_type< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_1difference_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deducevalue_type : boost_generic_detail_deduce_1value_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deducepointer : boost_generic_detail_deduce_1pointer < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deducedifference_type : boost_generic_detail_deduce_1difference_type < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > {}; template< class, class > struct boost_generic_detail_is_valid_; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class = void > struct boost_generic_detail_parent_concepts { typedef ::std::false_type boost_generic_detail_parent_sub_succeeded; }; template< class BoostGenericDetailConceptMap , typename X > struct boost_generic_detail_parent_concepts < BoostGenericDetailConceptMap , boost_generic_detail_params < X > , typename ::boost::generic::detail::always_void < Iterator<X>, EqualityComparable<X> >::type > : virtual boost::generic::detail::completed_concept_map_bases < BoostGenericDetailConceptMap , Iterator<X>, EqualityComparable<X> > { typedef ::std::true_type boost_generic_detail_parent_sub_succeeded; }; template< class BoostGenericDetailConceptMap , typename X > struct boost_generic_detail_completed_concept_map : boost_generic_detail_parent_concepts < BoostGenericDetailConceptMap , boost_generic_detail_params < X > > { private: typedef boost_generic_detail_first_pass < BoostGenericDetailConceptMap , X > boost_generic_detail_typename_deducers; typedef boost_generic_detail_completed_concept_map InputIterator; public: typedef typename ::boost::mpl::eval_if_c < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_typename_deducers:: value_type >::value , boost_generic_detail_deducevalue_type < BoostGenericDetailConceptMap , boost_generic_detail_params < X > , ::boost::generic::detail::type_list < typename boost_generic_detail_typename_deducers:: value_type, typename boost_generic_detail_typename_deducers:: pointer, typename boost_generic_detail_typename_deducers:: difference_type, void********** > > , ::boost::mpl::identity < typename boost_generic_detail_typename_deducers:: value_type > >::type value_type; typedef typename ::boost::mpl::eval_if_c < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_typename_deducers:: pointer >::value , boost_generic_detail_deducepointer < BoostGenericDetailConceptMap , boost_generic_detail_params < X > , ::boost::generic::detail::type_list < value_type, typename boost_generic_detail_typename_deducers:: pointer, typename boost_generic_detail_typename_deducers:: difference_type, void********** > > , ::boost::mpl::identity < typename boost_generic_detail_typename_deducers:: pointer > >::type pointer; typedef typename ::boost::mpl::eval_if_c < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_typename_deducers:: difference_type >::value , boost_generic_detail_deducedifference_type < BoostGenericDetailConceptMap , boost_generic_detail_params < X > , ::boost::generic::detail::type_list < value_type , pointer, typename boost_generic_detail_typename_deducers:: difference_type, void********** > > , ::boost::mpl::identity < typename boost_generic_detail_typename_deducers:: difference_type > >::type difference_type; private: template< class, class > friend struct boost_generic_detail_is_valid_; typedef boost_generic_detail_completed_concept_map boost_generic_detail_completed_concept_map_; typedef boost_generic_detail_params < X > boost_generic_detail_params_; typedef ::boost::generic::detail::type_list < typename boost_generic_detail_completed_concept_map_:: value_type, typename boost_generic_detail_completed_concept_map_:: pointer, typename boost_generic_detail_completed_concept_map_:: difference_type, void > boost_generic_detail_typenames; public: struct boost_generic_detail_is_valid : ::boost::generic::detail::and_ < typename boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded , boost_generic_detail_requires_are_valid_7< boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames > , ::boost::generic::detail::is_not_deduction_error< value_type > , ::boost::generic::detail::is_not_deduction_error< pointer > , ::boost::generic::detail::is_not_deduction_error< difference_type > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , pointer > > {}; }; template< class, class > struct boost_generic_detail_completed_concept_map_from_concept; template< class BoostGenericDetailConceptMap , typename X > struct boost_generic_detail_completed_concept_map_from_concept < BoostGenericDetailConceptMap , InputIterator < X > > { typedef boost_generic_detail_completed_concept_map < BoostGenericDetailConceptMap , X > type; }; template< typename X , class BoostGenericDetailConceptMap > struct boost_generic_detail_is_valid_ < InputIterator < X > , BoostGenericDetailConceptMap > : boost_generic_detail_completed_concept_map < BoostGenericDetailConceptMap , X >::boost_generic_detail_is_valid {}; template< class BoostGenericDetailConceptAndParams , class BoostGenericDetailConceptMap = typename ::boost_generic_concept_map_detail::concept_map_ < BoostGenericDetailConceptAndParams > ::boost_generic_concept_map_impl > struct boost_generic_detail_is_valid : boost_generic_detail_is_valid_ < BoostGenericDetailConceptAndParams , BoostGenericDetailConceptMap >::type {}; }; } typedef boost_generic_concept_impl_detail:: boost_generic_detail_concept_implInputIterator InputIteratorBoostGenericDetailImpl; template< typename X > class InputIterator : boost_generic_concept_impl_detail:: boost_generic_detail_concept_implInputIterator:: boost_generic_detail_completed_concept_map < typename ::boost_generic_concept_map_detail::concept_map_ < InputIterator < X > > ::boost_generic_concept_map_impl , X > { typedef boost_generic_concept_impl_detail:: boost_generic_detail_concept_implInputIterator boost_generic_detail_concept_impl; typedef typename boost_generic_detail_concept_impl::template boost_generic_detail_completed_concept_map < typename ::boost_generic_concept_map_detail::concept_map_ < InputIterator < X > > ::boost_generic_concept_map_impl , X > boost_generic_detail_completed_concept_map; typedef boost_generic_detail_concept_impl::boost_generic_detail_params < X > boost_generic_detail_params; struct parent_concept_asserts_substitution_failure { struct instantiate; }; struct parent_concept_asserts { struct instantiate; static_assert ( ::boost::mpl::identity < decltype ( ::boost::generic::detail::instantiate < Iterator<X>, EqualityComparable<X> >() ) >::type::value , "This message should never be seen." ); }; typedef typename ::std::conditional < boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded::value , parent_concept_asserts , parent_concept_asserts_substitution_failure >::type::instantiate parent_concept_asserts_; static_assert( boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded::value , "parameters unable to be substituted into parent concepts " "(guess: doing so may form a reference to void)." ); public: typedef typename boost_generic_detail_completed_concept_map:: value_type value_type; typedef typename boost_generic_detail_completed_concept_map:: pointer pointer; typedef typename boost_generic_detail_completed_concept_map:: difference_type difference_type; private: typedef ::boost::generic::detail::type_list < value_type , pointer , difference_type , void > boost_generic_detail_typenames; static_assert ( ::boost::generic::detail::is_not_same < typename InputIterator :: value_type , ::boost::generic::detail::no_deduction >::value , "typename '" "value_type" "' was not explicitly satisfied and cannot be deduced." ); static_assert ( ::boost::generic::detail::is_not_same < typename InputIterator :: value_type , ::boost::generic::detail::ambiguous_deduction >::value , "typename '" "value_type" "' was not explicitly satisfied and deduction results in ambiguity." ); static_assert ( ::boost::mpl::or_ < ::boost::is_same < typename InputIterator :: value_type , ::boost::generic::detail::no_deduction > , ::boost::is_same < typename InputIterator :: value_type , ::boost::generic::detail::ambiguous_deduction > , ::boost::generic::detail::concept_is_valid < ObjectType < typename InputIterator :: value_type > > >::value , "typename '" "value_type" "' does not model '" "ObjectType" "'." ); static_assert ( ::boost::generic::detail::is_not_same < typename InputIterator :: pointer , ::boost::generic::detail::no_deduction >::value , "typename '" "pointer" "' was not explicitly satisfied and cannot be deduced." ); static_assert ( ::boost::generic::detail::is_not_same < typename InputIterator :: pointer , ::boost::generic::detail::ambiguous_deduction >::value , "typename '" "pointer" "' was not explicitly satisfied and deduction results in ambiguity." ); static_assert ( ::boost::mpl::or_ < ::boost::is_same < typename InputIterator :: pointer , ::boost::generic::detail::no_deduction > , ::boost::is_same < typename InputIterator :: pointer , ::boost::generic::detail::ambiguous_deduction > , ::boost::generic::detail::concept_is_valid < MoveConstructible < typename InputIterator :: pointer > > >::value , "typename '" "pointer" "' does not model '" "MoveConstructible" "'." ); static_assert ( ::boost::generic::detail::is_not_same < typename InputIterator :: difference_type , ::boost::generic::detail::no_deduction >::value , "typename '" "difference_type" "' was not explicitly satisfied and cannot be deduced." ); static_assert ( ::boost::generic::detail::is_not_same < typename InputIterator :: difference_type , ::boost::generic::detail::ambiguous_deduction >::value , "typename '" "difference_type" "' was not explicitly satisfied and deduction results in ambiguity." ); static_assert ( ::boost::mpl::or_ < ::boost::is_same < typename InputIterator :: difference_type , ::boost::generic::detail::no_deduction > , ::boost::is_same < typename InputIterator :: difference_type , ::boost::generic::detail::ambiguous_deduction > , ::boost::generic::detail::concept_is_valid < SignedIntegralLike < typename InputIterator :: difference_type > > >::value , "typename '" "difference_type" "' does not model '" "SignedIntegralLike" "'." ); static_assert ( ::boost::generic::detail::concept_is_valid < IntegralType< difference_type > >::value , "requires " "IntegralType< difference_type >" ); static_assert ( ::boost::generic::detail::concept_is_valid < Convertible< typename Iterator<X>::reference, const value_type &> >::value , "requires " "Convertible< typename Iterator<X>::reference, const value_type &>" ); static_assert ( ::boost::generic::detail::concept_is_valid < Convertible< pointer, const value_type* > >::value , "requires " "Convertible< pointer, const value_type* >" ); static_assert ( ::boost::generic::detail::concept_is_valid < Convertible < typename HasDereference < typename Iterator<X>::postincrement_result >::result_type , const value_type& > >::value , "requires " "Convertible < typename HasDereference < typename Iterator<X>::postincrement_result >::result_type , const value_type& >" ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "pointer" " operator " "->" "( " "const X&" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , pointer > >::value , "the return type of " "operator " "->" "( " "const X&" " )" " is not convertible to " "pointer" ); }; } } } namespace boost { namespace generic { namespace detail { template< typename X > struct is_concept < ::boost:: generic:: std_concept:: InputIterator < X > > : mpl::true_ {}; template< typename X > struct concept_impl_of < ::boost:: generic:: std_concept:: InputIterator < X > > { static bool const is_specialized = false; static bool const is_auto = 0 ; typedef ::boost:: generic:: std_concept:: boost_generic_concept_impl_detail:: boost_generic_detail_concept_implInputIterator type; }; } } }
namespace boost_generic_detail_scope_checker { static_assert ( ::boost_generic_detail_scope_checker::boost_generic_detail_is_same_fun < boost_generic_detail_global_scope_check , ::boost_generic_detail_scope_checker ::boost_generic_detail_global_scope_check >::value , "Concept maps must be defined at global scope." ); } namespace boost_generic_concept_map_detail { template< class T > struct concept_map_ < boost::generic::std_concept::InputIterator < T* > >{ static bool const is_auto_concept_definition = false, is_usable = true; struct boost_generic_concept_map_impl { typedef T value_type; typedef std::ptrdiff_t difference_type; typedef T& reference; typedef T* pointer; typedef T* postincrement_result; typedef T* postdecrement_result; }; template< class BoostGenericDetailDummy = void > struct instantiate { typedef decltype ( ::boost::generic::detail::instantiate_with_dummy < BoostGenericDetailDummy , boost::generic::std_concept::InputIterator < T* > >() ) instantiate_; }; }; }
#undef BOOST_GENERIC_PREPROCESSED_HEADER_NAME
