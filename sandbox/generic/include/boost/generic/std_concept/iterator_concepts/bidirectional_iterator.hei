#line 27 BOOST_PP_STRINGIZE ( BOOST_GENERIC_DETAIL_NARY_CAT ( BOOST_GENERIC_PREPROCESSED_, ROOT, eric/std_ , BOOST_GENERIC_PREPROCESSED_HEADER_NAME, pp ) )
namespace boost_generic_detail_scope_checker { static_assert ( ::boost_generic_detail_scope_checker::boost_generic_detail_is_same_fun < boost_generic_detail_global_scope_check , ::boost_generic_detail_scope_checker ::boost_generic_detail_global_scope_check >::value , "The BOOST_GENERIC_CONCEPT macro must be invoked at global scope. " "To make a concept inside a namespace, use a namespace parameter." ); } namespace boost { namespace generic { namespace std_concept { template< typename X > class BidirectionalIterator; namespace boost_generic_concept_impl_detail { struct boost_generic_detail_concept_implBidirectionalIterator { struct boost_generic_detail_tag { static bool const is_auto_concept = 0 == 1; }; template< typename X > struct boost_generic_detail_params; template< class BoostGenericDetailConceptAndParams > struct boost_generic_detail_params_from_concept; template< typename X > struct boost_generic_detail_params_from_concept < BidirectionalIterator < X > > { typedef boost_generic_detail_params < X > type; }; template< class, class, class, class = void > struct boost_generic_detail_requires_are_valid_0 : ::std::false_type {}; template< class BoostGenericDetailConceptMap , typename X , class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_0 < BoostGenericDetailConceptMap , boost_generic_detail_params < X > , BoostGenericDetailTypenames , typename ::boost::generic::detail::always_void < ForwardIterator<X> >::type > : ::boost::generic::detail::concepts_are_modeled < BoostGenericDetailConceptMap , ForwardIterator<X> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailEnabler = void > struct boost_generic_detail_first_passpostdecrement_result { typedef ::boost::generic::detail::dummy_type_< 3 > type; }; template< class BoostGenericDetailConceptMap > struct boost_generic_detail_first_passpostdecrement_result < BoostGenericDetailConceptMap , typename ::boost::generic::detail::always_void < typename BoostGenericDetailConceptMap:: postdecrement_result >::type > { typedef typename BoostGenericDetailConceptMap:: postdecrement_result type; }; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_1 : ::std::integral_constant< bool, false > {}; template< typename X , class postdecrement_result , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_1 < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < postdecrement_result , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < MoveConstructible < postdecrement_result > >::type > : ::boost::generic::detail::concept_is_valid < MoveConstructible < postdecrement_result > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_1 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_0 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_1 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_2 : ::std::integral_constant< bool, false > {}; template< typename X , class postdecrement_result , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_2 < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < postdecrement_result , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < HasDereference<postdecrement_result> >::type > : ::boost::generic::detail::concept_is_valid < HasDereference<postdecrement_result> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_2 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_2 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_3 : ::std::integral_constant< bool, false > {}; template< typename X , class postdecrement_result , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_3 < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < postdecrement_result , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < Convertible < typename HasDereference<postdecrement_result>::result_type , const typename ForwardIterator<X>::value_type& > >::type > : ::boost::generic::detail::concept_is_valid < Convertible < typename HasDereference<postdecrement_result>::result_type , const typename ForwardIterator<X>::value_type& > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_3 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_2 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_3 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_4 : ::std::integral_constant< bool, false > {}; template< typename X , class postdecrement_result , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_4 < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < postdecrement_result , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < Convertible<postdecrement_result, const X&> >::type > : ::boost::generic::detail::concept_is_valid < Convertible<postdecrement_result, const X&> > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_4 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_3 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_4 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , typename X > struct boost_generic_detail_first_pass { typedef typename boost_generic_detail_first_passpostdecrement_result < BoostGenericDetailConceptMap >::type postdecrement_result ; }; template< class, class, class > struct boost_generic_detail_deduce_0postdecrement_result { typedef ::boost::generic::detail::no_deduction type; }; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_1 { typedef ::boost::generic::detail::dummy_type type; }; template< typename X , class postdecrement_result , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_1 < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < postdecrement_result , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( -- ::std::declval< X& >() ) ) >::type > { typedef decltype ( -- ::std::declval< X& >() ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_1 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_4 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_1 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_1postdecrement_result; template< typename X , class BoostGenericDetailAugpostdecrement_result, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_1postdecrement_result < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < BoostGenericDetailAugpostdecrement_result, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugpostdecrement_result postdecrement_result; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class postdecrement_result > static ::boost::generic::detail::type_< postdecrement_result > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < X& > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_1postdecrement_result : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_1postdecrement_result< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_1 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_1postdecrement_result : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_4 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_1postdecrement_result < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_1postdecrement_result : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_0postdecrement_result< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_1postdecrement_result < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailParams , class BoostGenericDetailTypenames , class BoostGenericDetailEnabler = void > struct boost_generic_detail_return_type_impl_2 { typedef ::boost::generic::detail::dummy_type type; }; template< typename X , class postdecrement_result , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_return_type_impl_2 < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < postdecrement_result , BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < decltype ( ( ::std::declval< X& >() -- ) ) >::type > { typedef decltype ( ::std::declval< X& >() -- ) type; }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class BoostGenericDetailTypenames > struct boost_generic_detail_return_type_2 : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_4 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_return_type_impl_2 < BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::mpl::identity< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_funs_deduce_2postdecrement_result; template< typename X , class BoostGenericDetailAugpostdecrement_result, class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_funs_deduce_2postdecrement_result < boost_generic_detail_params < X > , ::boost::generic::detail::type_list < BoostGenericDetailAugpostdecrement_result, BoostGenericDetailOtherTypenames... > > { typedef BoostGenericDetailAugpostdecrement_result postdecrement_result; static ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > boost_generic_detail_fun_deducer( ... ); template< class postdecrement_result > static ::boost::generic::detail::type_< postdecrement_result > boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < postdecrement_result > ); }; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_impl_this_deduce_2postdecrement_result : ::boost::mpl::identity < decltype( boost_generic_detail_impl_funs_deduce_2postdecrement_result< BoostGenericDetailParams, BoostGenericDetailTypenames >:: boost_generic_detail_fun_deducer ( ::boost::generic::detail::type_ < typename boost_generic_detail_return_type_2 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > ::type >() ) ) >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_this_deduce_2postdecrement_result : ::boost::mpl::if_c < boost_generic_detail_requires_are_valid_4 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::value , boost_generic_detail_impl_this_deduce_2postdecrement_result < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , ::boost::generic::detail::type_< ::boost::generic::detail::dummy_type > >::type {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deduce_2postdecrement_result : ::boost::generic::detail::deduction_result < typename boost_generic_detail_deduce_1postdecrement_result< BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames >::type , boost_generic_detail_this_deduce_2postdecrement_result < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_deducepostdecrement_result : boost_generic_detail_deduce_2postdecrement_result < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > {}; template< class, class > struct boost_generic_detail_is_valid_; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class = void > struct boost_generic_detail_parent_concepts { typedef ::std::false_type boost_generic_detail_parent_sub_succeeded; }; template< class BoostGenericDetailConceptMap , typename X > struct boost_generic_detail_parent_concepts < BoostGenericDetailConceptMap , boost_generic_detail_params < X > , typename ::boost::generic::detail::always_void < ForwardIterator<X> >::type > : virtual boost::generic::detail::completed_concept_map_bases < BoostGenericDetailConceptMap , ForwardIterator<X> > { typedef ::std::true_type boost_generic_detail_parent_sub_succeeded; }; template< class BoostGenericDetailConceptMap , typename X > struct boost_generic_detail_completed_concept_map : boost_generic_detail_parent_concepts < BoostGenericDetailConceptMap , boost_generic_detail_params < X > > { private: typedef boost_generic_detail_first_pass < BoostGenericDetailConceptMap , X > boost_generic_detail_typename_deducers; typedef boost_generic_detail_completed_concept_map BidirectionalIterator; public: typedef typename ::boost::mpl::eval_if_c < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_typename_deducers:: postdecrement_result >::value , boost_generic_detail_deducepostdecrement_result < BoostGenericDetailConceptMap , boost_generic_detail_params < X > , ::boost::generic::detail::type_list < typename boost_generic_detail_typename_deducers:: postdecrement_result, void********** > > , ::boost::mpl::identity < typename boost_generic_detail_typename_deducers:: postdecrement_result > >::type postdecrement_result; private: template< class, class > friend struct boost_generic_detail_is_valid_; typedef boost_generic_detail_completed_concept_map boost_generic_detail_completed_concept_map_; typedef boost_generic_detail_params < X > boost_generic_detail_params_; typedef ::boost::generic::detail::type_list < typename boost_generic_detail_completed_concept_map_:: postdecrement_result, void > boost_generic_detail_typenames; public: struct boost_generic_detail_is_valid : ::boost::generic::detail::and_ < typename boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded , boost_generic_detail_requires_are_valid_4< boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames > , ::boost::generic::detail::is_not_deduction_error< postdecrement_result > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , X& > , ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_return_type_2 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_return_type_2 < boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames >::type , postdecrement_result > > {}; }; template< class, class > struct boost_generic_detail_completed_concept_map_from_concept; template< class BoostGenericDetailConceptMap , typename X > struct boost_generic_detail_completed_concept_map_from_concept < BoostGenericDetailConceptMap , BidirectionalIterator < X > > { typedef boost_generic_detail_completed_concept_map < BoostGenericDetailConceptMap , X > type; }; template< typename X , class BoostGenericDetailConceptMap > struct boost_generic_detail_is_valid_ < BidirectionalIterator < X > , BoostGenericDetailConceptMap > : boost_generic_detail_completed_concept_map < BoostGenericDetailConceptMap , X >::boost_generic_detail_is_valid {}; template< class BoostGenericDetailConceptAndParams , class BoostGenericDetailConceptMap = typename ::boost_generic_concept_map_detail::concept_map_ < BoostGenericDetailConceptAndParams > ::boost_generic_concept_map_impl > struct boost_generic_detail_is_valid : boost_generic_detail_is_valid_ < BoostGenericDetailConceptAndParams , BoostGenericDetailConceptMap >::type {}; }; } typedef boost_generic_concept_impl_detail:: boost_generic_detail_concept_implBidirectionalIterator BidirectionalIteratorBoostGenericDetailImpl; template< typename X > class BidirectionalIterator : boost_generic_concept_impl_detail:: boost_generic_detail_concept_implBidirectionalIterator:: boost_generic_detail_completed_concept_map < typename ::boost_generic_concept_map_detail::concept_map_ < BidirectionalIterator < X > > ::boost_generic_concept_map_impl , X > { typedef boost_generic_concept_impl_detail:: boost_generic_detail_concept_implBidirectionalIterator boost_generic_detail_concept_impl; typedef typename boost_generic_detail_concept_impl::template boost_generic_detail_completed_concept_map < typename ::boost_generic_concept_map_detail::concept_map_ < BidirectionalIterator < X > > ::boost_generic_concept_map_impl , X > boost_generic_detail_completed_concept_map; typedef boost_generic_detail_concept_impl::boost_generic_detail_params < X > boost_generic_detail_params; struct parent_concept_asserts_substitution_failure { struct instantiate; }; struct parent_concept_asserts { struct instantiate; static_assert ( ::boost::mpl::identity < decltype ( ::boost::generic::detail::instantiate < ForwardIterator<X> >() ) >::type::value , "This message should never be seen." ); }; typedef typename ::std::conditional < boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded::value , parent_concept_asserts , parent_concept_asserts_substitution_failure >::type::instantiate parent_concept_asserts_; static_assert( boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded::value , "parameters unable to be substituted into parent concepts " "(guess: doing so may form a reference to void)." ); public: typedef typename boost_generic_detail_completed_concept_map:: postdecrement_result postdecrement_result; private: typedef ::boost::generic::detail::type_list < postdecrement_result , void > boost_generic_detail_typenames; static_assert ( ::boost::generic::detail::is_not_same < typename BidirectionalIterator :: postdecrement_result , ::boost::generic::detail::no_deduction >::value , "typename '" "postdecrement_result" "' was not explicitly satisfied and cannot be deduced." ); static_assert ( ::boost::generic::detail::is_not_same < typename BidirectionalIterator :: postdecrement_result , ::boost::generic::detail::ambiguous_deduction >::value , "typename '" "postdecrement_result" "' was not explicitly satisfied and deduction results in ambiguity." ); static_assert ( ::boost::mpl::or_ < ::boost::is_same < typename BidirectionalIterator :: postdecrement_result , ::boost::generic::detail::no_deduction > , ::boost::is_same < typename BidirectionalIterator :: postdecrement_result , ::boost::generic::detail::ambiguous_deduction > , ::boost::generic::detail::concept_is_valid < MoveConstructible < typename BidirectionalIterator :: postdecrement_result > > >::value , "typename '" "postdecrement_result" "' does not model '" "MoveConstructible" "'." ); static_assert ( ::boost::generic::detail::concept_is_valid < HasDereference<postdecrement_result> >::value , "requires " "HasDereference<postdecrement_result>" ); static_assert ( ::boost::generic::detail::concept_is_valid < Convertible < typename HasDereference<postdecrement_result>::result_type , const typename ForwardIterator<X>::value_type& > >::value , "requires " "Convertible < typename HasDereference<postdecrement_result>::result_type , const typename ForwardIterator<X>::value_type& >" ); static_assert ( ::boost::generic::detail::concept_is_valid < Convertible<postdecrement_result, const X&> >::value , "requires " "Convertible<postdecrement_result, const X&>" ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "X&" " operator " "--" "( " "X&" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_1 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , X& > >::value , "the return type of " "operator " "--" "( " "X&" " )" " is not convertible to " "X&" ); static_assert ( ::boost::generic::detail::is_not_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_2 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type >::value , "requires " "postdecrement_result" " operator " "--" "( " "X& , int" " )" ); static_assert ( ::boost::mpl::or_ < ::boost::generic::detail::is_dummy_type < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_2 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type > , ::boost::generic::detail::is_convertible_or_target_is_void < typename boost_generic_detail_concept_impl ::template boost_generic_detail_return_type_2 < boost_generic_detail_completed_concept_map , boost_generic_detail_params, boost_generic_detail_typenames >::type , postdecrement_result > >::value , "the return type of " "operator " "--" "( " "X& , int" " )" " is not convertible to " "postdecrement_result" ); }; } } } namespace boost { namespace generic { namespace detail { template< typename X > struct is_concept < ::boost:: generic:: std_concept:: BidirectionalIterator < X > > : mpl::true_ {}; template< typename X > struct concept_impl_of < ::boost:: generic:: std_concept:: BidirectionalIterator < X > > { static bool const is_specialized = false; static bool const is_auto = 0 ; typedef ::boost:: generic:: std_concept:: boost_generic_concept_impl_detail:: boost_generic_detail_concept_implBidirectionalIterator type; }; } } }
namespace boost_generic_detail_scope_checker { static_assert ( ::boost_generic_detail_scope_checker::boost_generic_detail_is_same_fun < boost_generic_detail_global_scope_check , ::boost_generic_detail_scope_checker ::boost_generic_detail_global_scope_check >::value , "Concept maps must be defined at global scope." ); } namespace boost_generic_concept_map_detail { template< class T > struct concept_map_ < boost::generic::std_concept::BidirectionalIterator < T* > >{ static bool const is_auto_concept_definition = false, is_usable = true; struct boost_generic_concept_map_impl { typedef T value_type; typedef std::ptrdiff_t difference_type; typedef T& reference; typedef T* pointer; typedef T* postincrement_result; typedef T* postdecrement_result; }; template< class BoostGenericDetailDummy = void > struct instantiate { typedef decltype ( ::boost::generic::detail::instantiate_with_dummy < BoostGenericDetailDummy , boost::generic::std_concept::BidirectionalIterator < T* > >() ) instantiate_; }; }; }
#undef BOOST_GENERIC_PREPROCESSED_HEADER_NAME
