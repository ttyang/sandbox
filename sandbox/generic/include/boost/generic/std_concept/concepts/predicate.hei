#line 25 BOOST_PP_STRINGIZE ( BOOST_GENERIC_DETAIL_NARY_CAT ( BOOST_GENERIC_PREPROCESSED_, ROOT, eric/std_ , BOOST_GENERIC_PREPROCESSED_HEADER_NAME, pp ) )
namespace boost_generic_detail_scope_checker { static_assert ( ::boost_generic_detail_scope_checker::boost_generic_detail_is_same_fun < boost_generic_detail_global_scope_check , ::boost_generic_detail_scope_checker ::boost_generic_detail_global_scope_check >::value , "The BOOST_GENERIC_AUTO_CONCEPT macro must be invoked at global scope. " "To make an auto concept inside a namespace, use a namespace parameter." ); } namespace boost { namespace generic { namespace std_concept { template< typename F , typename... Args > class Predicate; namespace boost_generic_concept_impl_detail { struct boost_generic_detail_concept_implPredicate { struct boost_generic_detail_tag { static bool const is_auto_concept = 1 == 1; }; template< typename F , typename... Args > struct boost_generic_detail_params; template< class BoostGenericDetailConceptAndParams > struct boost_generic_detail_params_from_concept; template< typename F , typename... Args > struct boost_generic_detail_params_from_concept < Predicate < F , Args... > > { typedef boost_generic_detail_params < F , Args... > type; }; template< class, class, class, class = void > struct boost_generic_detail_requires_are_valid_0 : ::std::false_type {}; template< class BoostGenericDetailConceptMap , typename F , typename... Args , class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_0 < BoostGenericDetailConceptMap , boost_generic_detail_params < F , Args... > , BoostGenericDetailTypenames , typename ::boost::generic::detail::always_void < Callable< F, const Args&... > >::type > : ::boost::generic::detail::concepts_are_modeled < BoostGenericDetailConceptMap , Callable< F, const Args&... > > {}; template< class BoostGenericDetailParams, class BoostGenericDetailTypenames , class = void > struct boost_generic_detail_impl_requires_are_valid_1 : ::std::integral_constant< bool, false > {}; template< typename F , typename... Args , class... BoostGenericDetailOtherTypenames > struct boost_generic_detail_impl_requires_are_valid_1 < boost_generic_detail_params < F , Args... > , ::boost::generic::detail::type_list < BoostGenericDetailOtherTypenames... > , typename ::boost::generic::detail::always_void < Convertible< typename Callable< F, const Args&... >::result_type, bool > >::type > : ::boost::generic::detail::concept_is_valid < Convertible< typename Callable< F, const Args&... >::result_type, bool > > {}; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams, class BoostGenericDetailTypenames > struct boost_generic_detail_requires_are_valid_1 : ::boost::mpl::and_ < boost_generic_detail_requires_are_valid_0 < BoostGenericDetailConceptMap , BoostGenericDetailParams, BoostGenericDetailTypenames > , boost_generic_detail_impl_requires_are_valid_1 < BoostGenericDetailParams, BoostGenericDetailTypenames > > {}; template< class BoostGenericDetailConceptMap , typename F , typename... Args > struct boost_generic_detail_first_pass { }; template< class, class > struct boost_generic_detail_is_valid_; template< class BoostGenericDetailConceptMap , class BoostGenericDetailParams , class = void > struct boost_generic_detail_parent_concepts { typedef ::std::false_type boost_generic_detail_parent_sub_succeeded; }; template< class BoostGenericDetailConceptMap , typename F , typename... Args > struct boost_generic_detail_parent_concepts < BoostGenericDetailConceptMap , boost_generic_detail_params < F , Args... > , typename ::boost::generic::detail::always_void < Callable< F, const Args&... > >::type > : virtual boost::generic::detail::completed_concept_map_bases < BoostGenericDetailConceptMap , Callable< F, const Args&... > > { typedef ::std::true_type boost_generic_detail_parent_sub_succeeded; }; template< class BoostGenericDetailConceptMap , typename F , typename... Args > struct boost_generic_detail_completed_concept_map : boost_generic_detail_parent_concepts < BoostGenericDetailConceptMap , boost_generic_detail_params < F , Args... > > { private: typedef boost_generic_detail_first_pass < BoostGenericDetailConceptMap , F , Args... > boost_generic_detail_typename_deducers; typedef boost_generic_detail_completed_concept_map Predicate; public: private: template< class, class > friend struct boost_generic_detail_is_valid_; typedef boost_generic_detail_completed_concept_map boost_generic_detail_completed_concept_map_; typedef boost_generic_detail_params < F , Args... > boost_generic_detail_params_; typedef ::boost::generic::detail::type_list < void > boost_generic_detail_typenames; public: struct boost_generic_detail_is_valid : ::boost::generic::detail::and_ < typename boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded , boost_generic_detail_requires_are_valid_1< boost_generic_detail_completed_concept_map , boost_generic_detail_params_, boost_generic_detail_typenames > > {}; }; template< class, class > struct boost_generic_detail_completed_concept_map_from_concept; template< class BoostGenericDetailConceptMap , typename F , typename... Args > struct boost_generic_detail_completed_concept_map_from_concept < BoostGenericDetailConceptMap , Predicate < F , Args... > > { typedef boost_generic_detail_completed_concept_map < BoostGenericDetailConceptMap , F , Args... > type; }; template< typename F , typename... Args , class BoostGenericDetailConceptMap > struct boost_generic_detail_is_valid_ < Predicate < F , Args... > , BoostGenericDetailConceptMap > : boost_generic_detail_completed_concept_map < BoostGenericDetailConceptMap , F , Args... >::boost_generic_detail_is_valid {}; template< class BoostGenericDetailConceptAndParams , class BoostGenericDetailConceptMap = typename ::boost_generic_concept_map_detail::concept_map_ < BoostGenericDetailConceptAndParams > ::boost_generic_concept_map_impl > struct boost_generic_detail_is_valid : boost_generic_detail_is_valid_ < BoostGenericDetailConceptAndParams , BoostGenericDetailConceptMap >::type {}; }; } typedef boost_generic_concept_impl_detail:: boost_generic_detail_concept_implPredicate PredicateBoostGenericDetailImpl; template< typename F , typename... Args > class Predicate : boost_generic_concept_impl_detail:: boost_generic_detail_concept_implPredicate:: boost_generic_detail_completed_concept_map < typename ::boost_generic_concept_map_detail::concept_map_ < Predicate < F , Args... > > ::boost_generic_concept_map_impl , F , Args... > { typedef boost_generic_concept_impl_detail:: boost_generic_detail_concept_implPredicate boost_generic_detail_concept_impl; typedef typename boost_generic_detail_concept_impl::template boost_generic_detail_completed_concept_map < typename ::boost_generic_concept_map_detail::concept_map_ < Predicate < F , Args... > > ::boost_generic_concept_map_impl , F , Args... > boost_generic_detail_completed_concept_map; typedef boost_generic_detail_concept_impl::boost_generic_detail_params < F , Args... > boost_generic_detail_params; struct parent_concept_asserts_substitution_failure { struct instantiate; }; struct parent_concept_asserts { struct instantiate; static_assert ( ::boost::mpl::identity < decltype ( ::boost::generic::detail::instantiate < Callable< F, const Args&... > >() ) >::type::value , "This message should never be seen." ); }; typedef typename ::std::conditional < boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded::value , parent_concept_asserts , parent_concept_asserts_substitution_failure >::type::instantiate parent_concept_asserts_; static_assert( boost_generic_detail_completed_concept_map ::boost_generic_detail_parent_sub_succeeded::value , "parameters unable to be substituted into parent concepts " "(guess: doing so may form a reference to void)." ); public: private: typedef ::boost::generic::detail::type_list < void > boost_generic_detail_typenames; static_assert ( ::boost::generic::detail::concept_is_valid < Convertible< typename Callable< F, const Args&... >::result_type, bool > >::value , "requires " "Convertible< typename Callable< F, const Args&... >::result_type, bool >" ); }; } } } namespace boost { namespace generic { namespace detail { template< typename F , typename... Args > struct is_concept < ::boost:: generic:: std_concept:: Predicate < F , Args... > > : mpl::true_ {}; template< typename F , typename... Args > struct concept_impl_of < ::boost:: generic:: std_concept:: Predicate < F , Args... > > { static bool const is_specialized = false; static bool const is_auto = 1 ; typedef ::boost:: generic:: std_concept:: boost_generic_concept_impl_detail:: boost_generic_detail_concept_implPredicate type; }; } } } namespace boost_generic_concept_map_detail { template< typename F , typename... Args > struct concept_map_ < ::boost:: generic:: std_concept:: Predicate < F , Args... > > { static bool const is_auto_concept_definition = true, is_usable = true; struct boost_generic_concept_map_impl {}; template< class BoostGenericDetailDummy = void > struct instantiate { typedef decltype ( ::boost::generic::detail::instantiate_with_dummy < BoostGenericDetailDummy , ::boost:: generic:: std_concept:: Predicate < F , Args... > >() ) instantiate_; }; }; }
#undef BOOST_GENERIC_PREPROCESSED_HEADER_NAME
