[/==============================================================================
    Copyright (C) 2012 Matt Calabrese

    Use, modification and distribution is subject to the Boost Software
    License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
    http://www.boost.org/LICENSE_1_0.txt)
==============================================================================/]

[section LessThanComparable]

[heading Description]
Describes types whose values can be ordered, where `operator<` is a strict weak
ordering relation.

[heading Definition]

[import ../../../../include/boost/generic/std_concept/concepts/less_than_comparable.hpp]

[table LessThanComparable Definition
    [[Boost.Generic Definition] [N2914 Definition]]
    [[[LessThanComparable]]
[``
auto concept LessThanComparable<typename T> : HasLess<T, T> {
  bool operator>(const T& a, const T& b) { return b < a; }
  bool operator<=(const T& a, const T& b) { return !(b < a); }
  bool operator>=(const T& a, const T& b) { return !(a < b); }

  axiom Consistency(T a, T b) {
    (a > b) == (b < a);
    (a <= b) == !(b < a);
    (a >= b) == !(a < b);
  }

  axiom Irreflexivity(T a) { (a < a) == false; }

  axiom Antisymmetry(T a, T b) {
    if (a < b)
      (b < a) == false;
  }

  axiom Transitivity(T a, T b, T c) {
    if (a < b && b < c)
      (a < c) == true;
  }

  axiom TransitivityOfEquivalence(T a, T b, T c) {
    if (!(a < b) && !(b < a) && !(b < c) && !(c < b))
      (!(a < c) && !(c < a)) == true;
  }
}
``]]
]

[heading Header]

 #include <boost/generic/std_concept/concepts/less_than_comparable.hpp>

[section_in_n2914_heading `LessThanComparable`..[['concept.comparison]]]

[heading Differences From N2914]

TODO: Fill this in

[endsect]
