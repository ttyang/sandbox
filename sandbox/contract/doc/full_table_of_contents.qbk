
[/ Copyright (C) 2008-2012 Lorenzo Caminiti ]
[/ Distributed under the Boost Software License, Version 1.0 ]
[/ (see accompanying file LICENSE_1_0.txt or a copy at ]
[/ http://www.boost.org/LICENSE_1_0.txt) ]
[/ Home at http://sourceforge.net/projects/contractpp ]

[section Full Table of Contents]

[link contract__.introduction Introduction]

[link contract__.full_table_of_contents Full Table Of Contents]

[link contract__.getting_started Getting Started]
[:  
    [link contract__.getting_started.this_documentation This Documentation] [br]
    [link contract__.getting_started.compilers_and_platforms Compilers and Platforms] [br]
    [link contract__.getting_started.installation Installation] [br]
    [link contract__.getting_started.disable_contract_compilation Disable Contract Compilation] [br]
]

[link contract__.contract_programming_overview Contract Programming Overview]
[:
    [link contract__.contract_programming_overview.assertions Assertions] [br]
    [link contract__.contract_programming_overview.benefits Benefits] [br]
    [link contract__.contract_programming_overview.costs Costs] [br]
    [link contract__.contract_programming_overview.free_function_calls Free Function Calls] [br]
    [link contract__.contract_programming_overview.member_function_calls Member Function Calls] [br]
    [link contract__.contract_programming_overview.constructor_calls Constructor Calls] [br]
    [link contract__.contract_programming_overview.destructor_calls Destructor Calls] [br]
    [link contract__.contract_programming_overview.constant_correctness Constant-Correctness] [br]
    [link contract__.contract_programming_overview.specification_vs__implementation Specification vs. Implementation] [br]
    [link contract__.contract_programming_overview.broken_contracts Broken Contracts] [br]
    [link contract__.contract_programming_overview.features Features] [br]
]

[link contract__.tutorial Tutorial]
[:
    [link contract__.tutorial.free_functions Free Functions] [br]
    [link contract__.tutorial.preconditions Preconditions] [br]
    [link contract__.tutorial.postconditions__result_and_old_values_ Postconditions (Result and Old Values)] [br]
    [link contract__.tutorial.classes_and_class_invariants Classes and Class Invariants] [br]
    [link contract__.tutorial.constructors Constructors] [br]
    [link contract__.tutorial.destructors Destructors] [br]
    [link contract__.tutorial.member_functions Member Functions] [br]
    [link contract__.tutorial.inheritance_and_subcontracting Inheritance and Subcontracting] [br]
    [link contract__.tutorial.class_templates Class Templates] [br]
    [link contract__.tutorial.function_templates Function Templates] [br]
    [link contract__.tutorial.forward_declarations_and_body_definitions Forward Declarations and Body Definitions] [br]
]

[link contract__.advanced_topics Advanced Topics]
[:
    [link contract__.advanced_topics.commas_and_leading_symbols_in_macros Commas and Leading Symbols in Macros] [br]
    [link contract__.advanced_topics.static_assertions Static Assertions] [br]
    [link contract__.advanced_topics.constant_assertions Constant Assertions] [br]
    [link contract__.advanced_topics.select_assertions Select Assertions] [br]
    [link contract__.advanced_topics.assertion_statements Assertion Statements] [br]
    [link contract__.advanced_topics.assertion_requirements Assertion Requirements] [br]
    [link contract__.advanced_topics.old_of_requirements Old-Of Requirements] [br]
    [link contract__.advanced_topics.old_and_result_value_copies Old and Result Value Copies] [br]
    [link contract__.advanced_topics.pure_virtual_functions Pure Virtual Functions] [br]
    [link contract__.advanced_topics.subcontracting_preconditions Subcontracting Preconditions] [br]
    [link contract__.advanced_topics.static_member_functions Static Member Functions] [br]
    [link contract__.advanced_topics.volatile_member_functions Volatile Member Functions] [br]
    [link contract__.advanced_topics.operators Operators] [br]
    [link contract__.advanced_topics.nested_classes Nested Classes] [br]
    [link contract__.advanced_topics.friends Friends] [br]
    [link contract__.advanced_topics.template_specializations Template Specializations] [br]
    [link contract__.advanced_topics.exception_specifications_and_function_try_blocks Exception Specifications and Function-Try Blocks] [br]
    [link contract__.advanced_topics.specifying_types__no_boost_typeof_ Specifying Types (no Boost.Typeof)] [br]
    [link contract__.advanced_topics.block_invariants_and_loop_variants Block Invariants and Loop Variants] [br]
    [link contract__.advanced_topics.contract_broken_handlers__throw_on_failure_ Contract Broken Handlers (Throw on Failure)] [br]
]

[link contract__.virtual_specifiers Virtual Specifiers]
[:
    [link contract__.virtual_specifiers.final_classes Final Classes] [br]
    [link contract__.virtual_specifiers.final_member_functions Final Member Functions] [br]
    [link contract__.virtual_specifiers.overriding_member_functions Overriding Member Functions] [br]
    [link contract__.virtual_specifiers.new_member_functions New Member Functions] [br]
]

[link contract__.concepts Concepts]
[:
    [link contract__.concepts.class_templates Class Templates] [br]
    [link contract__.concepts.function_templates Function Templates] [br]
    [link contract__.concepts.concept_definitions__not_implemented_ Concept Definitions (Not Implemented)] [br]
]

[link contract__.named_parameters Named Parameters]
[:
    [link contract__.named_parameters.overview Overview] [br]
    [link contract__.named_parameters.named_function_parameters Named Function Parameters] [br]
    [link contract__.named_parameters.deduced_function_parameters Deduced Function Parameters] [br]
    [link contract__.named_parameters.member_function_parameters Member Function Parameters] [br]
    [link contract__.named_parameters.constructor_parameters Constructor Parameters] [br]
    [link contract__.named_parameters.class_template_parameters Class Template Parameters] [br]
    [link contract__.named_parameters.concepts Concepts] [br]
    [link contract__.named_parameters.parameter_identifiers Parameter Identifiers] [br]
]

[link contract__.examples Examples]
[:
    [link contract__.examples.__n1962___vector__comparison_with_c___proposed_syntax \[N1962\] Vector: Comparison with C++ proposed syntax] [br]
    [link contract__.examples.__n1962___circle__subcontracting \[N1962\] Circle: Subcontracting] [br]
    [link contract__.examples.__n1962___factorial__recursion_and_assertion_computational_complexity \[N1962\] Factorial: Recursion and assertion computational complexity] [br]
    [link contract__.examples.__n1962___equal__operators \[N1962\] Equal: Operators] [br]
    [link contract__.examples.__n1962___sum__separated_body_definitions \[N1962\] Sum: Separated body definitions] [br]
    [link contract__.examples.__n1962___square_root__default_parameters_and_comparison_with_d_syntax \[N1962\] Square Root: Default parameters and comparison with D syntax] [br]
    [link contract__.examples.__n1962___block__block_invariants \[N1962\] Block: Block invariants] [br]
    [link contract__.examples.__n2081___add__generic_addition_algorithm \[N2081\] Add: Generic addition algorithm] [br]
    [link contract__.examples.__n2081___advance__concept_based_iterator_overloading__emulated_using_tags_ \[N2081\] Advance: Concept-based iterator overloading (emulated using tags)] [br]
    [link contract__.examples.__n2081___find__generic_find_algorithm \[N2081\] Find: Generic find algorithm] [br]
    [link contract__.examples.__n2081___apply__overloaded_invocation_of_functors \[N2081\] Apply: Overloaded invocation of functors] [br]
    [link contract__.examples.__n2081___for_each__generic_for_each_algorithm \[N2081\] For Each: Generic for-each algorithm] [br]
    [link contract__.examples.__n2081___transform__generic_binary_transformation_algorithm \[N2081\] Transform: Generic binary transformation algorithm] [br]
    [link contract__.examples.__n2081___count__generic_counting_algorithm \[N2081\] Count: Generic counting algorithm] [br]
    [link contract__.examples.__n2081___convert__conversion_between_two_types \[N2081\] Convert: Conversion between two types] [br]
    [link contract__.examples.__n2081___equal__generic_equality_comparison \[N2081\] Equal: Generic equality comparison] [br]
    [link contract__.examples.__n2081___less_equal__generic_less_than_or_equal_to_comparison \[N2081\] Less Equal: Generic less-than or equal-to comparison] [br]
    [link contract__.examples.__n2081___de_ref__generic_iterator_dereferencing \[N2081\] De-Ref: Generic iterator dereferencing] [br]
    [link contract__.examples.__n2081___min__generic_minimum_algorithm \[N2081\] Min: Generic minimum algorithm] [br]
    [link contract__.examples.__meyer97___stack4__comparison_with_eiffel_syntax \[Meyer97\] Stack4: Comparison with Eiffel Syntax] [br]
    [link contract__.examples.__meyer97___stack3__error_codes_instead_of_preconditions \[Meyer97\] Stack3: Error codes instead of preconditions] [br]
    [link contract__.examples.__meyer97___gcd__loop_variants_and_invariants_plus_comparison_with_eiffel_syntax \[Meyer97\] GCD: Loop variants and invariants plus comparison with Eiffel syntax] [br]
    [link contract__.examples.__meyer97___max_array__nested_loop_variants_and_invariants \[Meyer97\] Max-Array: Nested loop variants and invariants] [br]
    [link contract__.examples.__mitchell02___name_list__relaxed_subcontracts \[Mitchell02\] Name List: Relaxed subcontracts] [br]
    [link contract__.examples.__mitchell02___dictionary__simple_key_value_map \[Mitchell02\] Dictionary: Simple key-value map] [br]
    [link contract__.examples.__mitchell02___courier__subcontracting_and_static_class_invariants \[Mitchell02\] Courier: Subcontracting and static class invariants] [br]
    [link contract__.examples.__mitchell02___stack__simple_stack_dispenser \[Mitchell02\] Stack: Simple stack dispenser] [br]
    [link contract__.examples.__mitchell02___simple_queue__simple_queue_dispenser \[Mitchell02\] Simple Queue: Simple queue dispenser] [br]
    [link contract__.examples.__mitchell02___customer_manager__contracts_instead_of_defensive_programming \[Mitchell02\] Customer Manager: Contracts instead of Defensive Programming] [br]
    [link contract__.examples.__mitchell02___observer__contracts_for_pure_virtual_functions \[Mitchell02\] Observer: Contracts for pure virtual functions] [br]
    [link contract__.examples.__mitchell02___counter__subcontracting_and_virtual_specifiers__final__override__new__and_pure_virtual_ \[Mitchell02\] Counter: Subcontracting and virtual specifiers (final, override, new, and pure virtual)] [br]
    [link contract__.examples.__stroustrup97___string__throw_when_contract_is_broken \[Stroustrup97\] String: Throw when contract is broken] [br]
    [link contract__.examples.__cline90___vector__comparison_with_a___proposed_syntax \[Cline90\] Vector: Comparison with A++ proposed syntax] [br]
    [link contract__.examples.__cline90___stack__function_try_blocks_and_exception_specifications \[Cline90\] Stack: Function-Try blocks and exception specifications] [br]
    [link contract__.examples.__cline90___vector_stack__subcontracting_from_abstract_data_type__adt_ \[Cline90\] Vector-Stack: Subcontracting from Abstract Data Type (ADT)] [br]
    [link contract__.examples.__cline90___calendar__a_very_simple_calendar \[Cline90\] Calendar: A very simple calendar] [br]
]

[link contract__.grammar Grammar]
[:
    [link contract__.grammar.preprocessor_dsel Preprocessor DSEL] [br]
    [link contract__.grammar.differences_with_c___syntax Differences with C++ Syntax] [br]
    [link contract__.grammar.macro_interface Macro Interface] [br]
    [link contract__.grammar.lexical_conventions Lexical Conventions] [br]
    [link contract__.grammar.class_declarations Class Declarations] [br]
    [link contract__.grammar.base_classes Base Classes] [br]
    [link contract__.grammar.template_specializations Template Specializations] [br]
    [link contract__.grammar.template_parameters Template Parameters] [br]
    [link contract__.grammar.concepts Concepts] [br]
    [link contract__.grammar.types Types] [br]
    [link contract__.grammar.function_declarations Function Declarations] [br]
    [link contract__.grammar.result_type Result Type] [br]
    [link contract__.grammar.function_and_operator_names Function and Operator Names] [br]
    [link contract__.grammar.exception_specifications Exception Specifications] [br]
    [link contract__.grammar.member_initializers Member Initializers] [br]
    [link contract__.grammar.function_parameters Function Parameters] [br]
    [link contract__.grammar.result_and_old_values Result and Old Values] [br]
    [link contract__.grammar.class_invariants Class Invariants] [br]
    [link contract__.grammar.assertions Assertions] [br]
    [link contract__.grammar.loop_variants Loop Variants] [br]
    [link contract__.grammar.named_parameter_declarations Named Parameter Declarations] [br]
    [link contract__.grammar.terminals Terminals] [br]
    [link contract__.grammar.alternative_assertion_syntax__not_implemented_ Alternative Assertion Syntax (Not Implemented)] [br]
]

[link contract__.no_variadic_macros No Variadic Macros]
[:
    [link contract__.no_variadic_macros.sequence_syntax Sequence Syntax] [br]
    [link contract__.no_variadic_macros.commas_and_leading_symbols_in_macros Commas and Leading Symbols in Macros] [br]
]

[link reference Reference]
[:
    [funcref    contract::block_invariant_broken] [br]
    [classref   contract::broken] [br]
    [classref   contract::broken_contract_handler] [br]
    [funcref    contract::class_invariant_broken_on_entry] [br]
    [funcref    contract::class_invariant_broken_on_exit] [br]
    [funcref    contract::class_invariant_broken_on_throw] [br]
    [classref   contract::copy] [br]
    [enumref    contract::from] [br]
    [classref   contract::has_oldof] [br]
    [funcref    contract::loop_variant_broken] [br]
    [funcref    contract::postcondition_broken] [br]
    [funcref    contract::precondition_broken] [br]
    [funcref    contract::set_block_invariant_broken] [br]
    [funcref    contract::set_class_invariant_broken] [br]
    [funcref    contract::set_class_invariant_broken_on_entry] [br]
    [funcref    contract::set_class_invariant_broken_on_exit] [br]
    [funcref    contract::set_class_invariant_broken_on_throw] [br]
    [funcref    contract::set_loop_variant_broken] [br]
    [funcref    contract::set_postcondition_broken] [br]
    [funcref    contract::set_precondition_broken] [br]
    [macroref   CONTRACT_BLOCK_INVARIANT] [br]
    [macroref   CONTRACT_BLOCK_INVARIANT_TPL] [br]
    [macroref   CONTRACT_CLASS] [br]
    [macroref   CONTRACT_CLASS_INVARIANT] [br]
    [macroref   CONTRACT_CLASS_INVARIANT_TPL] [br]
    [macroref   CONTRACT_CLASS_TPL] [br]
    [macroref   CONTRACT_CONFIG_ARRAY_DIMENSION_MAX] [br]
    [macroref   CONTRACT_CONFIG_DO_NOT_SUBCONTRACT_PRECONDITIONS] [br]
    [macroref   CONTRACT_CONFIG_FUNCTION_ARITY_MAX] [br]
    [macroref   CONTRACT_CONFIG_INHERITANCE_MAX] [br]
    [macroref   CONTRACT_CONFIG_NO_BLOCK_INVARIANTS] [br]
    [macroref   CONTRACT_CONFIG_NO_CLASS_INVARIANTS] [br]
    [macroref   CONTRACT_CONFIG_NO_LOOP_VARIANTS] [br]
    [macroref   CONTRACT_CONFIG_NO_POSTCONDITIONS] [br]
    [macroref   CONTRACT_CONFIG_NO_PRECONDITIONS] [br]
    [macroref   CONTRACT_CONFIG_OLDOF_MAX] [br]
    [macroref   CONTRACT_CONFIG_PRECONDITIONS_DISABLE_NO_ASSERTION] [br]
    [macroref   CONTRACT_CONFIG_REPORT_BASE_PRECONDITION_FAILURE] [br]
    [macroref   CONTRACT_CONFIG_THREAD_SAFE] [br]
    [macroref   CONTRACT_CONSTRUCTOR] [br]
    [macroref   CONTRACT_CONSTRUCTOR_ARG] [br]
    [macroref   CONTRACT_CONSTRUCTOR_BODY] [br]
    [macroref   CONTRACT_CONSTRUCTOR_TPL] [br]
    [macroref   CONTRACT_DESTRUCTOR] [br]
    [macroref   CONTRACT_DESTRUCTOR_BODY] [br]
    [macroref   CONTRACT_DESTRUCTOR_TPL] [br]
    [macroref   CONTRACT_FREE_BODY] [br]
    [macroref   CONTRACT_FUNCTION] [br]
    [macroref   CONTRACT_FUNCTION_TPL] [br]
    [macroref   CONTRACT_LIMIT_CONSTRUCTOR_TRY_BLOCK_CATCHES] [br]
    [macroref   CONTRACT_LIMIT_NESTED_SELECT_ASSERTIONS] [br]
    [macroref   CONTRACT_LIMIT_OLDOFS] [br]
    [macroref   CONTRACT_LOOP] [br]
    [macroref   CONTRACT_LOOP_VARIANT] [br]
    [macroref   CONTRACT_LOOP_VARIANT_TPL] [br]
    [macroref   CONTRACT_MEMBER_BODY] [br]
    [macroref   CONTRACT_OLDOF] [br]
    [macroref   CONTRACT_PARAMETER] [br]
    [macroref   CONTRACT_PARAMETER_BODY] [br]
    [macroref   CONTRACT_PARAMETER_TYPEOF] [br]
    [macroref   CONTRACT_TEMPLATE_PARAMETER] [br]
]

[link contract__.release_notes Release Notes]

[link contract__.bibliography Bibliography]

[link contract__.acknowledgments Acknowledgments]

[endsect]

