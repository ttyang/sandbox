[/ Generated by doxygen_xml2qbk, don't change, will be overwritten automatically]
[/ Generated from xml/classboost_1_1container_1_1static__vector.xml]
[section:boost_container_static_vector boost::container::static_vector]

'''<indexterm><primary>boost</primary></indexterm><indexterm><primary>container</primary></indexterm><indexterm><primary>static_vector</primary></indexterm>'''
A hybrid of boost::container::vector and boost::array. 

[heading Description]
static\u005fvector is a sequence container like boost::container::vector with contiguous storage that can change in size, along with the static allocation, low overhead, and fixed capacity of boost::array.

A static\u005fvector is a sequence that supports random access to elements, constant time insertion and removal of elements at the end, and linear time insertion and removal of elements at the beginning or in the middle. The number of elements in a static\u005fvector may vary dynamically up to a fixed capacity because elements are stored within the object itself similarly to an array. However, objects are initialized as they are inserted into static\u005fvector unlike C arrays or std::array which must construct all elements on instantiation. The behavior of static\u005fvector enables the use of statically allocated elements in cases with complex object lifetime requirements that would otherwise not be trivially possible.

[heading Error Handling]
Insertion beyond the capacity and out of bounds errors result in undefined behavior unless otherwise specified. In this respect if size() == capacity(), then static_vector::push_back() behaves like std::vector pop_front() if size() == empty(). The reason for this difference is because unlike vectors, static_vector does not perform allocation.
[heading Advanced Usage]
Error handling behavior can be modified to more closely match std::vector exception behavior when exceeding bounds by providing an alternate Strategy and static_vector_traits instantiation.

[heading Header]
`#include <.hpp>`

[heading Synopsis]
``template<typename Value,
         std::size_t Capacity,
         typename Strategy = static_vector_detail::default_strategy<Value>>
class static_vector
{
  // ...
};
``

[heading Template parameter(s)]
[table
[[Parameter] [Description]]
[[`Value`][the type of element that will be stored. ]]
[[`std::size_t Capacity`][the maximum number of elements static_vector can store, fixed at compile time. ]]
[[`Strategy`][defines the public typedefs and error handlers, implements StaticVectorStrategy and has some similarities to an Allocator.]]
]

[heading Typedef(s)]
[table
[[Type] [Description]]
[[`value_type`][The type of elements stored in the container. ]]
[[`size_type`][The unsigned integral type used by the container. ]]
[[`difference_type`][The pointers difference type. ]]
[[`pointer`][The pointer type. ]]
[[`const_pointer`][The const pointer type. ]]
[[`reference`][The value reference type. ]]
[[`const_reference`][The value const reference type. ]]
[[`iterator`][The iterator type. ]]
[[`const_iterator`][The const iterator type. ]]
[[`reverse_iterator`][The reverse iterator type. ]]
[[`const_reverse_iterator`][The const reverse iterator. ]]
[[`strategy_type`][The type of a strategy used by the static_vector. ]]
]

[heading Constructor(s) and destructor]
[table
[[Function][Description]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member0 `static_vector()`]][Constructs an empty static_vector. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member1 `static_vector(size_type)`]][Constructs a static_vector containing count default constructed Values. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member2 `static_vector(size_type, value_type const &)`]][Constructs a static_vector containing count copies of value. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member3 `static_vector(Iterator, Iterator)`]][Constructs a static_vector containing copy of a range [first, last). ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member4 `static_vector(static_vector const &)`]][Constructs a copy of other static_vector. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member5 `static_vector(static_vector<...> const &)`]][Constructs a copy of other static_vector. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member8 `static_vector(static_vector &&)`]][Move constructor. Moves Values stored in the other static_vector to this one. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member9 `static_vector(static_vector<...> &&)`]][Move constructor. Moves Values stored in the other static_vector to this one. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member12 `~static_vector()`]][Destructor. Destroys Values stored in this container. ]]
]

[heading Member(s)]
[table
[[Function][Description]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member6 `operator=(const static_vector &)`]][Copy assigns Values stored in the other static_vector to this one. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member7 `operator=(static_vector<...> const &)`]][Copy assigns Values stored in the other static_vector to this one. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member10 `operator=(static_vector &&)`]][Move assignment. Moves Values stored in the other static_vector to this one. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member11 `operator=(static_vector<...> &&)`]][Move assignment. Moves Values stored in the other static_vector to this one. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member13 `swap(static_vector &)`]][Swaps contents of the other static_vector and this one. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member14 `swap(static_vector<...> &)`]][Swaps contents of the other static_vector and this one. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member15 `resize(size_type)`]][Inserts or erases elements at the end such that the size becomes count. New elements are default constructed. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member16 `resize(size_type, value_type const &)`]][Inserts or erases elements at the end such that the size becomes count. New elements are copy constructed from value. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member17 `reserve(size_type)`]][This call has no effect because the Capacity of this container is constant. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member18 `push_back(value_type const &)`]][Adds a copy of value at the end. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member19 `push_back(value_type &&)`]][Moves value to the end. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member20 `pop_back()`]][Destroys last value and decreases the size. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member21 `insert(iterator, value_type const &)`]][Inserts a copy of element at position. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member22 `insert(iterator, value_type &&)`]][Inserts a move-constructed element at position. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member23 `insert(iterator, size_type, value_type const &)`]][Inserts a count copies of value at position. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member24 `insert(iterator, Iterator, Iterator)`]][Inserts a copy of a range [first, last) at position. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member25 `erase(iterator)`]][Erases Value from position. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member26 `erase(iterator, iterator)`]][Erases Values from a range [first, last). ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member27 `assign(Iterator, Iterator)`]][Assigns a range [first, last) of Values to this container. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member28 `assign(size_type, value_type const &)`]][Assigns a count copies of value to this container. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member29 `emplace_back(Args &&...)`]][Inserts a Value constructed with std::forward<Args>(args)... in the end of the container. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member30 `emplace(iterator, Args &&...)`]][Inserts a Value constructed with std::forward<Args>(args)... before position. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member31 `clear()`]][Removes all elements from the container. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member32 `at(size_type)`]][Returns reference to the i-th element. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member33 `at(size_type)`]][Returns const reference to the i-th element. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member34 `operator[](size_type)`]][Returns reference to the i-th element. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member35 `operator[](size_type)`]][Returns const reference to the i-th element. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member36 `front()`]][Returns reference to the first element. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member37 `front()`]][Returns const reference to the first element. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member38 `back()`]][Returns reference to the last element. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member39 `back()`]][Returns const reference to the first element. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member40 `data()`]][Pointer such that [data(), data() + size()) is a valid range. For a non-empty vector, data() == &front(). ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member41 `data()`]][Const pointer such that [data(), data() + size()) is a valid range. For a non-empty vector, data() == &front(). ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member42 `begin()`]][Returns iterator to the first element. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member43 `begin()`]][Returns const iterator to the first element. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member44 `cbegin()`]][Returns const iterator to the first element. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member45 `end()`]][Returns iterator to the one after the last element. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member46 `end()`]][Returns const iterator to the one after the last element. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member47 `cend()`]][Returns const iterator to the one after the last element. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member48 `rbegin()`]][Returns reverse iterator to the first element of the reversed container. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member49 `rbegin()`]][Returns const reverse iterator to the first element of the reversed container. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member50 `crbegin()`]][Returns const reverse iterator to the first element of the reversed container. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member51 `rend()`]][Returns reverse iterator to the one after the last element of the reversed container. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member52 `rend()`]][Returns const reverse iterator to the one after the last element of the reversed container. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member53 `crend()`]][Returns const reverse iterator to the one after the last element of the reversed container. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member54 `capacity()`]][Returns container's capacity. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member55 `max_size()`]][Returns container's capacity. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member56 `size()`]][Returns the number of stored elements. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member57 `empty()`]][Queries if the container contains elements. ]]
[[[link staticvector.static_vector.reference.boost_container_static_vector.member58 `shrink_to_fit()`]][Capacity is fixed so this call has no effects. ]]
]

[br]
[section:member0 static_vector()]
Constructs an empty static_vector. [heading Synopsis]
``static_vector()``

[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member1 static_vector(size_type)]
Constructs a static_vector containing count default constructed Values. [heading Synopsis]
``static_vector(size_type count)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `size_type` ][ `count` ][The number of values which will be contained in the container.]]
]
[heading Precondition]
count <= Capacity.
[heading Throws]
If Value's default constructor throws.
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member2 static_vector(size_type, value_type const &)]
Constructs a static_vector containing count copies of value. [heading Synopsis]
``static_vector(size_type count, value_type const & value)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `size_type` ][ `count` ][The number of copies of a values that will be contained in the container. ]]
[[ `value_type const &` ][ `value` ][The value which will be used to copy construct values.]]
]
[heading Precondition]
count <= Capacity.
[heading Throws]
If Value's copy constructor throws.
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member3 static_vector(Iterator, Iterator)]
Constructs a static_vector containing copy of a range [first, last). [heading Synopsis]
``template<typename Iterator>
static_vector(Iterator first, Iterator last)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `Iterator` ][ `first` ][The iterator to the first element in range. ]]
[[ `Iterator` ][ `last` ][The iterator to the one after the last element in range.]]
]
[heading Precondition]
distance(first, last) <= Capacity. Iterator must meet the ForwardTraversal Iterator concept
[heading Throws]
If Value's constructor taking a dereferenced Iterator throws.
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member4 static_vector(static_vector const &)]
Constructs a copy of other static_vector. [heading Synopsis]
``static_vector(static_vector const & other)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `static_vector const &` ][ `other` ][The static_vector which content will be copied to this one.]]
]
[heading Throws]
If Value's copy constructor throws.
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member5 static_vector(static_vector<...> const &)]
Constructs a copy of other static_vector. [heading Synopsis]
``template<std::size_t C, typename S>
static_vector(static_vector< value_type, C, S > const & other)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `static_vector< value_type, C, S > const &` ][ `other` ][The static_vector which content will be copied to this one.]]
]
[heading Precondition]
other.size() <= Capacity.
[heading Throws]
If Value's copy constructor throws.
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member8 static_vector(static_vector &&)]
Move constructor. Moves Values stored in the other static_vector to this one. [heading Synopsis]
``static_vector(static_vector && other)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `static_vector &&` ][ `other` ][The static_vector which content will be moved to this one.]]
]
[heading Throws]


* If boost::has_nothrow_move<Value>::value is true and Value's move constructor throws. 
* If boost::has_nothrow_move<Value>::value is false and Value's copy constructor throws.

[/]
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member9 static_vector(static_vector<...> &&)]
Move constructor. Moves Values stored in the other static_vector to this one. [heading Synopsis]
``template<std::size_t C, typename S>
static_vector(static_vector< value_type, C, S > && other)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `static_vector< value_type, C, S > &&` ][ `other` ][The static_vector which content will be moved to this one.]]
]
[heading Precondition]
other.size() <= Capacity.
[heading Throws]


* If boost::has_nothrow_move<Value>::value is true and Value's move constructor throws. 
* If boost::has_nothrow_move<Value>::value is false and Value's copy constructor throws.

[/]
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member12 ~static_vector()]
Destructor. Destroys Values stored in this container. [heading Synopsis]
``~static_vector()``

[heading Throws]
Nothing
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member6 operator=(const static_vector &)]
Copy assigns Values stored in the other static_vector to this one. [heading Synopsis]
``static_vector & operator=(const static_vector & other)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `const static_vector &` ][ `other` ][The static_vector which content will be copied to this one.]]
]
[heading Throws]
If Value's copy constructor or copy assignment throws.
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member7 operator=(static_vector<...> const &)]
Copy assigns Values stored in the other static_vector to this one. [heading Synopsis]
``template<std::size_t C, typename S>
static_vector & operator=(static_vector< value_type, C, S > const & other)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `static_vector< value_type, C, S > const &` ][ `other` ][The static_vector which content will be copied to this one.]]
]
[heading Precondition]
other.size() <= Capacity.
[heading Throws]
If Value's copy constructor or copy assignment throws.
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member10 operator=(static_vector &&)]
Move assignment. Moves Values stored in the other static_vector to this one. [heading Synopsis]
``static_vector & operator=(static_vector && other)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `static_vector &&` ][ `other` ][The static_vector which content will be moved to this one.]]
]
[heading Throws]


* If boost::has_nothrow_move<Value>::value is true and Value's move constructor or move assignment throws. 
* If boost::has_nothrow_move<Value>::value is false and Value's copy constructor or copy assignment throws.

[/]
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member11 operator=(static_vector<...> &&)]
Move assignment. Moves Values stored in the other static_vector to this one. [heading Synopsis]
``template<std::size_t C, typename S>
static_vector & operator=(static_vector< value_type, C, S > && other)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `static_vector< value_type, C, S > &&` ][ `other` ][The static_vector which content will be moved to this one.]]
]
[heading Precondition]
other.size() <= Capacity.
[heading Throws]


* If boost::has_nothrow_move<Value>::value is true and Value's move constructor or move assignment throws. 
* If boost::has_nothrow_move<Value>::value is false and Value's copy constructor or copy assignment throws.

[/]
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member13 swap(static_vector &)]
Swaps contents of the other static_vector and this one. [heading Synopsis]
``void swap(static_vector & other)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `static_vector &` ][ `other` ][The static_vector which content will be swapped with this one's content.]]
]
[heading Throws]


* If boost::has_nothrow_move<Value>::value is true and Value's move constructor or move assignment throws, 
* If boost::has_nothrow_move<Value>::value is false and Value's copy constructor or copy assignment throws,

[/]
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member14 swap(static_vector<...> &)]
Swaps contents of the other static_vector and this one. [heading Synopsis]
``template<std::size_t C, typename S>
void swap(static_vector< value_type, C, S > & other)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `static_vector< value_type, C, S > &` ][ `other` ][The static_vector which content will be swapped with this one's content.]]
]
[heading Precondition]
other.size() <= Capacity && size() <= other.capacity().
[heading Throws]


* If boost::has_nothrow_move<Value>::value is true and Value's move constructor or move assignment throws, 
* If boost::has_nothrow_move<Value>::value is false and Value's copy constructor or copy assignment throws,

[/]
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member15 resize(size_type)]
Inserts or erases elements at the end such that the size becomes count. New elements are default constructed. [heading Synopsis]
``void resize(size_type count)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `size_type` ][ `count` ][The number of elements which will be stored in the container.]]
]
[heading Precondition]
count <= Capacity.
[heading Throws]
If Value's default constructor throws.
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member16 resize(size_type, value_type const &)]
Inserts or erases elements at the end such that the size becomes count. New elements are copy constructed from value. [heading Synopsis]
``void resize(size_type count, value_type const & value)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `size_type` ][ `count` ][The number of elements which will be stored in the container. ]]
[[ `value_type const &` ][ `value` ][The value used to copy construct the new element.]]
]
[heading Precondition]
count <= Capacity.
[heading Throws]
If Value's copy constructor throws.
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member17 reserve(size_type)]
This call has no effect because the Capacity of this container is constant. [heading Synopsis]
``void reserve(size_type count)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `size_type` ][ `count` ][The number of elements which the container should be able to contain.]]
]
[heading Precondition]
count <= Capacity.
[heading Throws]
Nothing.
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member18 push_back(value_type const &)]
Adds a copy of value at the end. [heading Synopsis]
``void push_back(value_type const & value)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `value_type const &` ][ `value` ][]]
]
[heading Precondition]
size() < Capacity.
[heading Throws]
If Value's copy constructor throws.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member19 push_back(value_type &&)]
Moves value to the end. [heading Synopsis]
``void push_back(value_type && value)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `value_type &&` ][ `value` ][]]
]
[heading Precondition]
size() < Capacity.
[heading Throws]
If Value's move constructor throws.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member20 pop_back()]
Destroys last value and decreases the size. [heading Synopsis]
``void pop_back()``

[heading Precondition]
!empty().
[heading Throws]
Nothing by default.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member21 insert(iterator, value_type const &)]
Inserts a copy of element at position. [heading Synopsis]
``iterator insert(iterator position, value_type const & value)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `iterator` ][ `position` ][The position at which the new value will be inserted. ]]
[[ `value_type const &` ][ `value` ][The value used to copy construct the new element.]]
]
[heading Precondition]
position must be a valid iterator of *this in range [begin(), end()].
[heading Throws]


* If Value's copy constructor or copy assignment throws 
* If Value's move constructor or move assignment throws.

[/]
[heading Complexity]
Constant or linear.

[endsect]
[br]

[section:member22 insert(iterator, value_type &&)]
Inserts a move-constructed element at position. [heading Synopsis]
``iterator insert(iterator position, value_type && value)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `iterator` ][ `position` ][The position at which the new value will be inserted. ]]
[[ `value_type &&` ][ `value` ][The value used to move construct the new element.]]
]
[heading Precondition]
position must be a valid iterator of *this in range [begin(), end()] and size() < Capacity.
[heading Throws]
If Value's move constructor or move assignment throws.
[heading Complexity]
Constant or linear.

[endsect]
[br]

[section:member23 insert(iterator, size_type, value_type const &)]
Inserts a count copies of value at position. [heading Synopsis]
``iterator insert(iterator position,
                size_type count,
                value_type const & value)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `iterator` ][ `position` ][The position at which new elements will be inserted. ]]
[[ `size_type` ][ `count` ][The number of new elements which will be inserted. ]]
[[ `value_type const &` ][ `value` ][The value used to copy construct new elements.]]
]
[heading Precondition]
position must be a valid iterator of *this in range [begin(), end()] and size() + count <= Capacity.
[heading Throws]


* If Value's copy constructor or copy assignment throws. 
* If Value's move constructor or move assignment throws.

[/]
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member24 insert(iterator, Iterator, Iterator)]
Inserts a copy of a range [first, last) at position. [heading Synopsis]
``template<typename Iterator>
iterator insert(iterator position,
                Iterator first,
                Iterator last)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `iterator` ][ `position` ][The position at which new elements will be inserted. ]]
[[ `Iterator` ][ `first` ][The iterator to the first element of a range used to construct new elements. ]]
[[ `Iterator` ][ `last` ][The iterator to the one after the last element of a range used to construct new elements.]]
]
[heading Precondition]
position must be a valid iterator of *this in range [begin(), end()] and distance(first, last) <= Capacity. Iterator must meet the ForwardTraversal Iterator concept
[heading Throws]


* If Value's constructor and assignment taking a dereferenced Iterator. 
* If Value's move constructor or move assignment throws. //!

[/]
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member25 erase(iterator)]
Erases Value from position. [heading Synopsis]
``iterator erase(iterator position)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `iterator` ][ `position` ][The position of the element which will be erased from the container.]]
]
[heading Precondition]
position must be a valid iterator of *this in range [begin(), end()).
[heading Throws]
If Value's move assignment throws.
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member26 erase(iterator, iterator)]
Erases Values from a range [first, last). [heading Synopsis]
``iterator erase(iterator first, iterator last)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `iterator` ][ `first` ][The position of the first element of a range which will be erased from the container. ]]
[[ `iterator` ][ `last` ][The position of the one after the last element of a range which will be erased from the container.]]
]
[heading Precondition]
first and last must define a valid range, iterators must be in range [begin(), end()].
[heading Throws]
If Value's move assignment throws.
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member27 assign(Iterator, Iterator)]
Assigns a range [first, last) of Values to this container. [heading Synopsis]
``template<typename Iterator>
void assign(Iterator first, Iterator last)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `Iterator` ][ `first` ][The iterator to the first element of a range used to construct new content of this container. ]]
[[ `Iterator` ][ `last` ][The iterator to the one after the last element of a range used to construct new content of this container.]]
]
[heading Precondition]
distance(first, last) <= Capacity.
[heading Throws]
If Value's copy constructor or copy assignment throws,
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member28 assign(size_type, value_type const &)]
Assigns a count copies of value to this container. [heading Synopsis]
``void assign(size_type count, value_type const & value)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `size_type` ][ `count` ][The new number of elements which will be container in the container. ]]
[[ `value_type const &` ][ `value` ][The value which will be used to copy construct the new content.]]
]
[heading Precondition]
count <= Capacity.
[heading Throws]
If Value's copy constructor or copy assignment throws.
[heading Complexity]
Linear O(N).

[endsect]
[br]

[section:member29 emplace_back(Args &&...)]
Inserts a Value constructed with std::forward<Args>(args)... in the end of the container. [heading Synopsis]
``template<class... Args>
void emplace_back(Args &&... args)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `Args &&...` ][ `args` ][The arguments of the constructor of the new element which will be created at the end of the container.]]
]
[heading Precondition]
size() < Capacity.
[heading Throws]
If in-place constructor throws or Value's move constructor throws.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member30 emplace(iterator, Args &&...)]
Inserts a Value constructed with std::forward<Args>(args)... before position. [heading Synopsis]
``template<class... Args>
iterator emplace(iterator position, Args &&... args)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `iterator` ][ `position` ][The position at which new elements will be inserted. ]]
[[ `Args &&...` ][ `args` ][The arguments of the constructor of the new element.]]
]
[heading Precondition]
position must be a valid iterator of *this in range [begin(), end()] and size() < Capacity.
[heading Throws]
If in-place constructor throws or Value's move constructor or move assignment throws.
[heading Complexity]
Constant or linear.

[endsect]
[br]

[section:member31 clear()]
Removes all elements from the container. [heading Synopsis]
``void clear()``

[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member32 at(size_type)]
Returns reference to the i-th element. [heading Synopsis]
``reference at(size_type i)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `size_type` ][ `i` ][The element's index.]]
]
[heading Returns]
reference to the i-th element from the beginning of the container.
[heading Precondition]
i < size().
[heading Throws]
std::out_of_range exception by default.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member33 at(size_type)]
Returns const reference to the i-th element. [heading Synopsis]
``const_reference at(size_type i)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `size_type` ][ `i` ][The element's index.]]
]
[heading Returns]
const reference to the i-th element from the beginning of the container.
[heading Precondition]
i < size().
[heading Throws]
std::out_of_range exception by default.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member34 operator[](size_type)]
Returns reference to the i-th element. [heading Synopsis]
``reference operator[](size_type i)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `size_type` ][ `i` ][The element's index.]]
]
[heading Returns]
reference to the i-th element from the beginning of the container.
[heading Precondition]
i < size().
[heading Throws]
Nothing by default.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member35 operator[](size_type)]
Returns const reference to the i-th element. [heading Synopsis]
``const_reference operator[](size_type i)``

[heading Parameters]
[table 
[[Type][Name][Description]]
[[ `size_type` ][ `i` ][The element's index.]]
]
[heading Returns]
const reference to the i-th element from the beginning of the container.
[heading Precondition]
i < size().
[heading Throws]
Nothing by default.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member36 front()]
Returns reference to the first element. [heading Synopsis]
``reference front()``

[heading Returns]
reference to the first element from the beginning of the container.
[heading Precondition]
!empty().
[heading Throws]
Nothing by default.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member37 front()]
Returns const reference to the first element. [heading Synopsis]
``const_reference front()``

[heading Returns]
const reference to the first element from the beginning of the container.
[heading Precondition]
!empty().
[heading Throws]
Nothing by default.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member38 back()]
Returns reference to the last element. [heading Synopsis]
``reference back()``

[heading Returns]
reference to the last element from the beginning of the container.
[heading Precondition]
!empty().
[heading Throws]
Nothing by default.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member39 back()]
Returns const reference to the first element. [heading Synopsis]
``const_reference back()``

[heading Returns]
const reference to the last element from the beginning of the container.
[heading Precondition]
!empty().
[heading Throws]
Nothing by default.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member40 data()]
Pointer such that [data(), data() + size()) is a valid range. For a non-empty vector, data() == &front(). [heading Synopsis]
``Value * data()``

[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member41 data()]
Const pointer such that [data(), data() + size()) is a valid range. For a non-empty vector, data() == &front(). [heading Synopsis]
``const Value * data()``

[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member42 begin()]
Returns iterator to the first element. [heading Synopsis]
``iterator begin()``

[heading Returns]
iterator to the first element contained in the vector.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member43 begin()]
Returns const iterator to the first element. [heading Synopsis]
``const_iterator begin()``

[heading Returns]
const_iterator to the first element contained in the vector.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member44 cbegin()]
Returns const iterator to the first element. [heading Synopsis]
``const_iterator cbegin()``

[heading Returns]
const_iterator to the first element contained in the vector.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member45 end()]
Returns iterator to the one after the last element. [heading Synopsis]
``iterator end()``

[heading Returns]
iterator pointing to the one after the last element contained in the vector.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member46 end()]
Returns const iterator to the one after the last element. [heading Synopsis]
``const_iterator end()``

[heading Returns]
const_iterator pointing to the one after the last element contained in the vector.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member47 cend()]
Returns const iterator to the one after the last element. [heading Synopsis]
``const_iterator cend()``

[heading Returns]
const_iterator pointing to the one after the last element contained in the vector.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member48 rbegin()]
Returns reverse iterator to the first element of the reversed container. [heading Synopsis]
``reverse_iterator rbegin()``

[heading Returns]
reverse_iterator pointing to the beginning of the reversed static_vector.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member49 rbegin()]
Returns const reverse iterator to the first element of the reversed container. [heading Synopsis]
``const_reverse_iterator rbegin()``

[heading Returns]
const_reverse_iterator pointing to the beginning of the reversed static_vector.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member50 crbegin()]
Returns const reverse iterator to the first element of the reversed container. [heading Synopsis]
``const_reverse_iterator crbegin()``

[heading Returns]
const_reverse_iterator pointing to the beginning of the reversed static_vector.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member51 rend()]
Returns reverse iterator to the one after the last element of the reversed container. [heading Synopsis]
``reverse_iterator rend()``

[heading Returns]
reverse_iterator pointing to the one after the last element of the reversed static_vector.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member52 rend()]
Returns const reverse iterator to the one after the last element of the reversed container. [heading Synopsis]
``const_reverse_iterator rend()``

[heading Returns]
const_reverse_iterator pointing to the one after the last element of the reversed static_vector.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member53 crend()]
Returns const reverse iterator to the one after the last element of the reversed container. [heading Synopsis]
``const_reverse_iterator crend()``

[heading Returns]
const_reverse_iterator pointing to the one after the last element of the reversed static_vector.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member54 capacity()]
Returns container's capacity. [heading Synopsis]
``size_type capacity()``

[heading Returns]
container's capacity.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member55 max_size()]
Returns container's capacity. [heading Synopsis]
``size_type max_size()``

[heading Returns]
container's capacity.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member56 size()]
Returns the number of stored elements. [heading Synopsis]
``size_type size()``

[heading Returns]
Number of elements contained in the container.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member57 empty()]
Queries if the container contains elements. [heading Synopsis]
``bool empty()``

[heading Returns]
true if the number of elements contained in the container is equal to 0.
[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[section:member58 shrink_to_fit()]
Capacity is fixed so this call has no effects. [heading Synopsis]
``void shrink_to_fit()``

[heading Throws]
Nothing.
[heading Complexity]
Constant O(1).

[endsect]
[br]

[endsect]

