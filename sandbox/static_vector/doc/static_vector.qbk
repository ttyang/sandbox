[/
 / Copyright (c) 2012 Adam Wulkiewicz
 / Copyright (c) 2012 Andrew Hundt
 /
 / Distributed under the Boost Software License, Version 1.0. (See accompanying
 / file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 /]

[library StaticVector
    [quickbook 1.5]
    [authors [Wulkiewicz, Adam], [Hundt, Andrew]]
    [copyright 2012 Adam Wulkiewicz, 2011-2012 Andrew Hundt]
    [id static_vector]
    [category containers]
    [purpose Containers library]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[section:static_vector static_vector]

[section:introduction Introduction]

static_vector is hybrid of boost::container::vector and boost::array with fixed capacity.

static_vector is a sequence container like boost::container::vector with contiguous storage that can
change in size, along with the static allocation, low overhead, and fixed capacity of boost::array.

[heading Example]
[import ../example/static_vector_example.cpp]
[static_vector_example_cpp]

[heading Behavior]
The number of elements in a static_vector may vary dynamically up to a fixed capacity 
because elements are stored within the object itself similarly to an array. However, objects are 
initialized as they are inserted into static_vector unlike C arrays or std::array which must construct 
all elements on instantiation. The behavior of static_vector enables the use of statically allocated 
elements in cases with complex object lifetime requirements that would otherwise not be trivially 
possible.

[heading Runtime Complexity]
 * random access to elements
 * constant time insertion and removal of elements at the end 
 * linear time insertion and removal of elements at the beginning or in the middle. 

[heading Use Cases]
static_vector is well suited for use in a buffer, the internal implementation of of other 
classes, or use cases where there is a fixed limit to the number of elements that must be stored. 
Embedded and realtime applications where allocation either may not be available or acceptable 
are a particular case where static_vector can be beneficial. 

Exceptions can be disabled for cases where they are either not supported or desired.

[endsect]

[section:reference Reference]

[include generated/static_vector.qbk]

[endsect]

[endsect]
